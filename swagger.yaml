swagger: '2.0'
info:
  version: 1.0-rev0
  title: Veeam Backup for AWS public API 1.0
parameters:
  apiVersionParam:
    name: x-api-version
    in: header
    required: true
    type: string
    default: 1.0-rev0
paths:
  /api/v1/test:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Test
      operationId: Test
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/EmptySuccessResponse'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/accounts/standard:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - SMTPServerCredentialsRecords
      operationId: StandardAccountsGetAll
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/StandardAccountsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/StandardAccountsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/StandardAccountsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            enum:
              - nameAsc
              - nameDesc
            type: string
          x-veeam-spec:
            $ref: '#/definitions/StandardAccountsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StandardAccountsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - SMTPServerCredentialsRecords
      operationId: AddStandardAccount
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: standardAccount
          in: body
          required: true
          schema:
            $ref: '#/definitions/StandardAccountCreateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/StandardAccount'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/accounts/standard/{standardAccountId}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - SMTPServerCredentialsRecords
      operationId: StandardAccountsGetOneById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: standardAccountId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StandardAccount'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    put:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - SMTPServerCredentialsRecords
      operationId: UpdateStandardAccount
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: standardAccountId
          in: path
          required: true
          type: string
          format: uuid
        - name: standardAccount
          in: body
          required: false
          schema:
            $ref: '#/definitions/StandardAccountUpdateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StandardAccount'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - SMTPServerCredentialsRecords
      operationId: DeleteStandardAccount
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: standardAccountId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/accounts/standard/validateName:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - SMTPServerCredentialsRecords
      operationId: ValidateStandardAccountName
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: validationSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/StandardAccountNameValidationSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ValidationMessage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/accounts/standard/export:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - SMTPServerCredentialsRecords
      operationId: ExportStandardAccounts
      consumes: []
      produces:
        - text/csv
        - application/xml
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/accounts/amazon:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - IAMRoles
      operationId: AmazonAccountsGetAll
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/AmazonAccountsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/AmazonAccountsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/AmazonAccountsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            enum:
              - nameAsc
              - nameDesc
            type: string
          x-veeam-spec:
            $ref: '#/definitions/AmazonAccountsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AmazonAccountsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - IAMRoles
      operationId: AddAmazonAccount
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
        - application/problem+json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonAccount
          in: body
          required: true
          schema:
            $ref: '#/definitions/AmazonAccountCreateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/AmazonAccount'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/accounts/amazon/validateName:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - IAMRoles
      operationId: ValidateAmazonAccountName
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: validationSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/AmazonAccountNameValidationSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ValidationMessage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/accounts/amazon/{amazonAccountId}/validateDelete':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - IAMRoles
      operationId: ValidateDeleteAmazonAccount
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonAccountId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ValidationMessage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/accounts/amazon/{amazonAccountId}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - IAMRoles
      operationId: AmazonAccountsGetOneById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonAccountId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AmazonAccount'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - IAMRoles
      operationId: UpdateAmazonAccount
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonAccountId
          in: path
          required: true
          type: string
          format: uuid
        - name: amazonAccount
          in: body
          required: false
          schema:
            $ref: '#/definitions/AmazonAccountUpdateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AmazonAccount'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - IAMRoles
      operationId: DeleteAmazonAccount
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonAccountId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/accounts/amazon/{amazonAccountId}/rescan':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - IAMRoles
      operationId: RescanAmazonAccount
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonAccountId
          in: path
          required: true
          type: string
          format: uuid
        - name: rescanCloudAccountSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/RescanCloudAccountSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/SessionLink'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/accounts/amazon/export:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - IAMRoles
      operationId: ExportAmazonAccounts
      consumes: []
      produces:
        - text/csv
        - application/xml
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/cloudInfrastructure/tags:
    get:
      tags:
        - Tags
      operationId: Tags
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
        - application/problem+json
      parameters:
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/TagsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/TagsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/TagsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - keyAsc
              - keyDesc
          x-veeam-spec:
            $ref: '#/definitions/TagsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TagsPage'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/cloudInfrastructure/tags/{tagId}':
    get:
      tags:
        - Tags
      operationId: Tag
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
        - application/problem+json
      parameters:
        - name: tagId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Tag'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/virtualMachines:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Instances
      operationId: VirtualMachines
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - nameAsc
              - nameDesc
              - locationAsc
              - locationDesc
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        - name: ProtectionStatus
          in: query
          required: false
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - Protected
              - Unprotected
          collectionFormat: multi
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        - name: BuckupDestination
          in: query
          required: false
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - Snapshot
              - AwsBlob
              - ManualSnapshot
          collectionFormat: multi
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        - name: BackupState
          in: query
          required: false
          type: string
          enum:
            - OnlyBackedUp
            - OnlyNotBackedUp
            - All
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/VirtualMachinesPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/virtualMachines/{virtualMachineId}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Instances
      operationId: VirtualMachineById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: virtualMachineId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/VirtualMachine'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/virtualMachines/{virtualMachineId}/takeSnapshot':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Instances
      operationId: TakeSnapshot
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: virtualMachineId
          in: path
          required: true
          type: string
          format: uuid
        - name: snapshotSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/VirtualMachineSnapshotSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/SessionLink'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/virtualMachines/{virtualMachineId}/deleteSnapshots':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Instances
      operationId: DeleteVirtualMachineSnapshots
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: virtualMachineId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/SessionLink'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/virtualMachines/{virtualMachineId}/deleteBackups':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Instances
      operationId: DeleteVirtualMachineBackups
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: virtualMachineId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/SessionLink'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/virtualMachines/export:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Instances
      operationId: ExportVirtualMachines
      consumes: []
      produces:
        - text/csv
        - application/xml
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/cloudInfrastructure/buckets:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Buckets
      operationId: Buckets
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: AmazonAccountId
          in: query
          required: false
          type: string
          format: uuid
          x-veeam-spec:
            $ref: '#/definitions/BucketsFilters'
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/BucketsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/BucketsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/BucketsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - nameAsc
              - nameDesc
          x-veeam-spec:
            $ref: '#/definitions/BucketsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BucketsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/cloudInfrastructure/buckets/{bucketId}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Buckets
      operationId: BucketById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: bucketId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Bucket'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/cloudInfrastructure/buckets/rescan/{amazonAccountId}':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Buckets
      operationId: RescanBucket
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonAccountId
          in: path
          required: true
          format: uuid
          type: string
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/SessionLink'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/cloudInfrastructure/buckets/{bucketId}/folders':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Buckets
      operationId: GetBucketFolders
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: bucketId
          in: path
          required: true
          type: string
          format: uuid
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        - name: Sort
          in: query
          required: false
          type: array
          uniqueItems: false
          items:
            enum:
              - NameAsc
              - NameDesc
            type: string
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BucketFoldersPage'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/cloudInfrastructure/buckets/{bucketId}/folders/{folderName}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Buckets
      operationId: GetBucketFolder
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: bucketId
          in: path
          required: true
          format: uuid
          type: string
        - name: folderName
          in: path
          required: true
          type: string
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BucketFolder'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/cloudInfrastructure/regions:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Regions
      operationId: GetAllRegions
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - nameAsc
              - nameDesk
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RegionsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/cloudInfrastructure/regions/{regionId}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Regions
      operationId: GetRegionById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: regionId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Region'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/cloudInfrastructure/regions/{regionId}/zones':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Regions
      operationId: GetInnerRegions
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: regionId
          in: path
          required: true
          type: string
          format: uuid
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - nameAsc
              - nameDesk
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RegionsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/cloudInfrastructure/regions/{regionId}/instancesTypes':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Regions
      operationId: GetInstancesTypesByRegion
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
        - application/problem+json
      parameters:
        - name: regionId
          in: path
          required: true
          type: string
          format: uuid
        - name: offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
        - name: limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
        - name: isArm64
          in: query
          required: false
          type: boolean
          x-veeam-spec:
            $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
        - name: virtualizationTypes
          in: query
          required: false
          type: array
          uniqueItems: false
          items:
            type: string
          x-veeam-spec:
            $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AmazonInstanceTypesByRegionPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/repositories:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Repositories
      operationId: RepositoriesGetAll
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RepositoriesFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/RepositoriesFilters'
        - name: Sort
          in: query
          required: false
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - nameAsc
              - nameDesc
              - descriptionAsc
              - descriptionDesc
              - amazonAccountNameAsc
              - amazonAccountNameDesc
              - amazonBucketAsc
              - amazonBucketDesc
              - amazonStorageFolderAsc
              - amazonStorageFolderDesc
              - regionAsc
              - regionDesc
              - encryptionAsc
              - encryptionDesc
          x-veeam-spec:
            $ref: '#/definitions/RepositoriesFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/RepositoriesFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RepositoriesPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Repositories
      operationId: CreateRepository
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: repository
          in: body
          required: false
          schema:
            $ref: '#/definitions/RepositoryCreateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Repository'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/repositories/{repositoryId}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Repositories
      operationId: RepositoriesGetOneById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: repositoryId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Repository'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    put:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Repositories
      operationId: UpdateRepository
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: repositoryId
          in: path
          required: true
          type: string
          format: uuid
        - name: repository
          in: body
          required: false
          schema:
            $ref: '#/definitions/RepositoryUpdateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Repository'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Repositories
      operationId: DeleteRepository
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: repositoryId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: The repository is in use by one or more policies.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/repositories/{repositoryId}/rescan':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Repositories
      operationId: RescanRepository
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: repositoryId
          in: path
          required: true
          format: uuid
          type: string
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/SessionLink'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/repositories/settings/validate:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Repositories
      operationId: RepositoryValidateSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: repository
          in: body
          required: true
          schema:
            $ref: '#/definitions/RepositoryCreateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ValidationMessage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/repositories/{repositoryId}/checkPassword':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Repositories
      operationId: RepositoryPasswordIsCorrect
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: repositoryId
          in: path
          required: true
          type: string
          format: uuid
        - name: repositoryPassword
          in: body
          required: false
          schema:
            $ref: '#/definitions/RepositoryPasswordValidationSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RepositoryPasswordValidationResult'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/repositories/export:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Repositories
      operationId: ExportRepositories
      consumes: []
      produces:
        - text/csv
        - application/xml
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/policies:
    get:
      tags:
        - Policies
      operationId: PoliciesGetAll
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        - name: VirtualMachineId
          in: query
          required: false
          type: string
          format: uuid
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        - name: LastPolicySessionStatus
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - Running
              - NeverExecuted
              - Succeeded
              - Warning
              - Failed
              - Canceled
          collectionFormat: multi
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        - name: PolicyStatus
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - Enabled
              - Disabled
          collectionFormat: multi
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - priorityAsc
              - priorityDesc
              - nameAsc
              - nameDesc
              - usnAsc
              - usnDesc
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        - name: Usn
          in: query
          required: false
          type: integer
          format: int64
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        - name: RepositoryId
          in: query
          required: false
          type: string
          format: uuid
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PoliciesPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: CreatePolicy
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policy
          in: body
          required: false
          schema:
            $ref: '#/definitions/PolicySpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Policy'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/policies/{policyId}':
    get:
      tags:
        - Policies
      operationId: PoliciesGetOneById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Policy'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    put:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: UpdatePolicy
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - name: policy
          in: body
          required: false
          schema:
            $ref: '#/definitions/Policy'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Policy'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: DeletePolicy
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: 'Failed to delete policy, verify it is not in use and try again.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/policies/{policyId}/selectedItems':
    get:
      tags:
        - Policies
      operationId: PoliciesGetSelectedItemsById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - nameAsc
              - nameDesc
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PolicyItemsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/policies/{policyId}/regions':
    get:
      tags:
        - Policies
      operationId: PoliciesGetRegionsById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - nameAsc
              - nameDesk
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RegionsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/policies/{policyId}/excludedItems':
    get:
      tags:
        - Policies
      operationId: PoliciesGetExcludedItemsById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - nameAsc
              - nameDesc
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PolicyItemsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/policies/{policyId}/enable':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: EnablePolicy
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/policies/{policyId}/disable':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: DisablePolicy
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/policies/{policyId}/start':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: StartPolicy
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/SessionLink'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: The policy has already started.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/policies/{policyId}/stop':
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: StopPolicy
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/policies/{policyId}/export':
    get:
      tags:
        - Policies
      operationId: ExportPolicy
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PolicyExportModel'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/policies/import:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: ImportPolicy
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policySpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/PolicyExportModel'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/SessionLink'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/policies/validate:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: Validate
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
        - application/problem+json
      parameters:
        - name: validationSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/PolicySpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ValidationMessage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/policies/orderPriorities:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: PolicyOrderPriorityOfPolicies
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policiesPrioritySpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/PoliciesPrioritySpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/EmptySuccessResponse'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/policies/export:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - Policies
      operationId: ExportPolicies
      consumes: []
      produces:
        - text/csv
        - application/xml
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/policies/{policyId}/cost':
    get:
      tags:
        - Policies
      operationId: GetPolicyCost
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policyId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CostEstimationsPage'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/costEstimation:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - CostEstimation
      operationId: GetCostEstimation
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: policySpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/PolicySpec'
        - name: VirtualMachineNameFilter
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/CostEstimationFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/CostEstimationFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/CostEstimationFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - virtualMachineNameAsc
              - virtualMachineNameDesc
              - snapshotCostAsc
              - snapshotCostDesc
              - replicaCostAsc
              - replicaCostDesc
              - backupCostAsc
              - backupCostDesc
              - trafficAsc
              - trafficDesc
              - transactionAsc
              - transactionDesc
              - totalAsc
              - totalDesc
          x-veeam-spec:
            $ref: '#/definitions/CostEstimationFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CostEstimationsPage'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/costEstimation/export:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - CostEstimation
      operationId: ExportCostEstimation
      consumes: []
      produces:
        - text/csv
        - application/xml
      parameters:
        - name: policySpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/PolicySpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/sessions:
    get:
      tags:
        - Sessions
      operationId: GetSessions
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        - name: PolicyId
          in: query
          required: false
          type: string
          format: uuid
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        - name: Status
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - Running
              - NeverExecuted
              - Succeeded
              - Warning
              - Failed
              - Canceled
          collectionFormat: multi
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        - name: Types
          in: query
          required: false
          type: array
          items:
            enum:
              - Policy
              - Job
              - Task
              - UserPolicy
              - RetentionActivity
              - RestoreTask
              - FLRTask
              - SelfBackupActivity
            type: string
          collectionFormat: multi
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        - name: FromUtc
          in: query
          required: false
          type: string
          format: date-time
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        - name: ToUtc
          in: query
          required: false
          type: string
          format: date-time
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        - name: Usn
          in: query
          required: false
          type: integer
          format: int64
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - startTimeAsc
              - startTimeDesc
              - stopTimeAsc
              - stopTimeDesc
              - durationAsc
              - durationDesc
              - typeAsc
              - typeDesc
              - reasonAsc
              - reasonDesc
              - usnAsc
              - usnDesc
          collectionFormat: multi
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        - name: VmId
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SessionsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/sessions/{retentionSessionId}/deletedItems':
    get:
      tags:
        - Sessions
      operationId: GetRetentionSessionDeletedRestorePoints
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: retentionSessionId
          in: path
          required: true
          type: string
          format: uuid
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - nameAsc
              - nameDesc
              - statusAsc
              - statusDesc
              - regionAsc
              - regionDesc
          collectionFormat: multi
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RetentionJobDeletedRestorePointsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/sessions/{backupSessionId}/protectedItems':
    get:
      tags:
        - Sessions
      operationId: GetBackupSessionProtectedItems
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: backupSessionId
          in: path
          required: true
          type: string
          format: uuid
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/ProtectedItemsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - virtualMachineNameAsc
              - virtualMachineNameDesc
              - regionAsc
              - regionDesc
              - succeededAsc
              - succeededDesc
              - failedAsc
              - failedDesc
          collectionFormat: multi
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/ProtectedItemsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/ProtectedItemsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/ProtectedItemsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ProtectedItemsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/sessions/{restoreSessionId}/restoredItems':
    get:
      tags:
        - Sessions
      operationId: GetRestoreSessionRestoredItems
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: restoreSessionId
          in: path
          required: true
          type: string
          format: uuid
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RestoredItemsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - nameAsc
              - nameDesc
              - regionAsc
              - regionDesc
          collectionFormat: multi
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/RestoredItemsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/RestoredItemsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/RestoredItemsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RestoredItemsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/sessions/{sessionId}':
    get:
      tags:
        - Sessions
      operationId: GetSessionById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Session'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/sessions/{sessionId}/log':
    get:
      tags:
        - Sessions
      operationId: GetSessionLog
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SessionLog'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/sessions/{sessionId}/stop':
    post:
      tags:
        - Sessions
      operationId: StopJob
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/sessions/export:
    post:
      tags:
        - Sessions
      operationId: ExportSessions
      consumes: []
      produces:
        - text/csv
        - application/xml
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/amazonConnections:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - AmazonConnections
      operationId: GetAllAmazonConnections
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AmazonConnectionsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - AmazonConnections
      operationId: CreateAmazonConnection
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonConnectionSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/AmazonConnectionSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/AmazonConnection'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/amazonConnections/{amazonConnectionId}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - AmazonConnections
      operationId: GetAmazonConnectionById
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonConnectionId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AmazonConnection'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - AmazonConnections
      operationId: DeleteAmazonConnection
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonConnectionId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '204':
          description: Success
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/amazonConnections/{amazonConnectionId}/cloudNetworks':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - AmazonConnections
      operationId: BrowseCloudNetworks
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonConnectionId
          in: path
          required: true
          type: string
          format: uuid
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/CloudNetworksFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/CloudNetworksFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CloudNetworksPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/amazonConnections/{amazonConnectionId}/cloudSubnetworks':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - AmazonConnections
      operationId: BrowseCloudSubnetworks
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonConnectionId
          in: path
          required: true
          type: string
          format: uuid
        - name: cloudNetworkId
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/CloudSubnetworksFilters'
        - name: availabilityZone
          in: query
          required: false
          type: string
          format: uuid
          x-veeam-spec:
            $ref: '#/definitions/CloudSubnetworksFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/CloudSubnetworksFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/CloudSubnetworksFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CloudSubnetworksPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/amazonConnections/{amazonConnectionId}/cloudSecurityGroups':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - AmazonConnections
      operationId: BrowseCloudSecurityGroups
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonConnectionId
          in: path
          required: true
          type: string
          format: uuid
        - name: cloudNetworkId
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/CloudSecurityGroupsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/CloudSecurityGroupsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/CloudSecurityGroupsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CloudSecurityGroupsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/amazonConnections/{amazonConnectionId}/availabilityZones':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - AmazonConnections
      operationId: BrowseAvailabilityZones
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonConnectionId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RegionsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/amazonConnections/{amazonConnectionId}/validateS3endpoint':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - AmazonConnections
      operationId: ValidateS3Endpoint
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonConnectionId
          in: path
          required: true
          type: string
          format: uuid
        - name: subnetId
          in: query
          required: true
          type: string
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CloudSubnetS3EndpointValidationResult'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/amazonConnections/{amazonConnectionId}/cloudEncryptionKeys':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - AmazonConnections
      operationId: BrowseEncryptionKeys
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonConnectionId
          in: path
          required: true
          type: string
          format: uuid
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/CloudEncryptionKeysFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/CloudEncryptionKeysFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CloudEncryptionKeysPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/amazonConnections/{amazonConnectionId}/browseBucketFolders/{bucketId}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
          - Portal Operator
      tags:
        - AmazonConnections
      operationId: BrowseBucketFolders
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: amazonConnectionId
          in: path
          required: true
          type: string
          format: uuid
        - name: bucketId
          in: path
          required: true
          type: string
          format: uuid
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        - name: Sort
          in: query
          required: false
          type: array
          uniqueItems: false
          items:
            enum:
              - NameAsc
              - NameDesc
            type: string
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BucketFoldersPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/vmRestorePoints:
    get:
      tags:
        - VmRestorePoints
      operationId: RestorePointsGetAll
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: VirtualMachineId
          in: query
          required: false
          type: string
          format: uuid
          x-veeam-spec:
            $ref: '#/definitions/VmRestorePointsFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/VmRestorePointsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/VmRestorePointsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - pointInTimeAsc
              - pointInTimeDesc
              - backupSizeBytesAsc
              - backupSizeBytesDesc
              - jobTypeAsc
              - jobTypeDesc
          x-veeam-spec:
            $ref: '#/definitions/VmRestorePointsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/VmRestorePointsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/vmRestorePoints/{vmRestorePointId}':
    get:
      tags:
        - VmRestorePoints
      operationId: RestorePointsGetOneById
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: vmRestorePointId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/VmRestorePoint'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/vmRestorePoints/{vmRestorePointId}/restoreDisk':
    post:
      tags:
        - VmRestorePoints
      operationId: RestoreDisk
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: vmRestorePointId
          in: path
          required: true
          type: string
          format: uuid
        - name: options
          in: body
          required: false
          schema:
            $ref: '#/definitions/DiskBulkRestoreOptions'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/SessionLink'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/vmRestorePoints/{vmRestorePointId}/validateRestoreDisk':
    post:
      tags:
        - VmRestorePoints
      operationId: ValidateRestoreDisk
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: vmRestorePointId
          in: path
          required: true
          type: string
          format: uuid
        - name: validationConfig
          in: body
          required: false
          schema:
            $ref: '#/definitions/DiskBulkRestoreOptions'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ValidationMessage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/vmRestorePoints/{vmRestorePointId}/restoreVm':
    post:
      tags:
        - VmRestorePoints
      operationId: RestoreVm
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: vmRestorePointId
          in: path
          required: true
          type: string
          format: uuid
        - name: vmRestoreOptions
          in: body
          required: false
          schema:
            $ref: '#/definitions/VirtualMachineRestoreOptions'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/SessionLink'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/vmRestorePoints/{vmRestorePointId}/validateRestoreVm':
    post:
      tags:
        - VmRestorePoints
      operationId: ValidateRestoreVm
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: vmRestorePointId
          in: path
          required: true
          type: string
          format: uuid
        - name: validationConfig
          in: body
          required: false
          schema:
            $ref: '#/definitions/VirtualMachineRestoreOptions'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ValidationMessage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/vmRestorePoints/{vmRestorePointId}/restoreFile':
    post:
      tags:
        - VmRestorePoints
      operationId: startFlr
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
        - application/problem+json
      parameters:
        - name: vmRestorePointId
          in: path
          required: true
          type: string
          format: uuid
        - name: flrSpec
          in: body
          required: false
          schema:
            $ref: '#/definitions/FlrOptions'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/StartFlrResponse'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/vmRestorePoints/{vmRestorePointId}/defaultNetworkSettings':
    get:
      tags:
        - VmRestorePoints
      operationId: VmRestorePointsGetDefaultNetworkSettings
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: vmRestorePointId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/VmRestorePointDefaultNetworkSettings'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/users:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: UsersGetAll
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/UsersFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - nameAsc
              - nameDesc
              - descriptionAsc
              - descriptionDesc
              - isDefaultAsc
              - isDefaultDesc
              - mfaEnabledAsc
              - mfaEnabledDesc
          collectionFormat: multi
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/UsersFilters'
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/UsersFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/UsersFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UsersPage'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: CreateUser
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: user
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserCreateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/users/{userId}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: UsersGetByName
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    put:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: UpdateUser
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: user
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserUpdateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: DeleteUser
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/users/validateName:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: ValidateName
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: user
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserNameValidationSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ValidationMessage'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/users/validateDescription:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: ValidateDescription
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: user
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserDescriptionValidationSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ValidationMessage'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/users/validatePassword:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: ValidatePassword
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: user
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserPasswordValidationSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ValidationMessage'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/users/{userId}/enableMfa':
    post:
      tags:
        - Users
      operationId: EnableMfa
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: userMfaSetup
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserMfaSetup'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserMfaData'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/users/{userId}/disableMfa':
    post:
      tags:
        - Users
      operationId: DisableMfa
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/users/{userId}/acceptMfa':
    post:
      tags:
        - Users
      operationId: AcceptMfa
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
        - application/csp-report
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: userMfaAccept
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserMfaAccept'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '201':
          description: Success
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/users/isFirstLogin:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: IsFirstLogin
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IsFirstLoginResult'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
      security: []
  /api/v1/users/checkInstanceId:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: CheckInstance
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: instance
          in: body
          required: true
          schema:
            $ref: '#/definitions/CheckInstanceIdSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CheckInstanceIdResult'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
      security: []
  /api/v1/users/createDefaultUser:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: CreateDefaultUser
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: defaultUserSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/DefaultUserSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: The license agreement has not been accepted.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
      security: []
  /api/v1/users/export:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Users
      operationId: ExportUsers
      consumes: []
      produces:
        - text/csv
        - application/xml
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/serviceAccount:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Workers
      operationId: GetServiceAccountSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ServiceAccountSettings'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    put:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Workers
      operationId: UpdateServiceAccountSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: configurationSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/ServiceAccountSettings'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ServiceAccountSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/regions:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Workers
      operationId: GetAllRegionSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/RegionSettingsFilters'
        - name: limit
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/RegionSettingsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RegionSettingsPage'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Workers
      operationId: CreateRegionSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: regionConfigurationSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/RegionSettingsSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/RegionSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  '/api/v1/settings/regions/{regionId}':
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Workers
      operationId: GetRegionSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: regionId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RegionSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    put:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Workers
      operationId: UpdateRegionSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: regionId
          in: path
          required: true
          type: string
          format: uuid
        - name: locationConfigurationSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/RegionSettings'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RegionSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Workers
      operationId: DeleteRegionSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: regionId
          in: path
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '204':
          description: Success
          schema:
            $ref: '#/definitions/EmptySuccessResponse'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/emailNotifications:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - EmailNotifications
      operationId: GetEmailNotifications
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/EmailNotifications'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - EmailNotifications
      operationId: SaveEmailNotifications
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: smtpSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/EmailNotifications'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/EmailNotifications'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/emailNotifications/sendTestMessage:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - EmailNotifications
      operationId: SendTestMessage
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: EmailNotifications
          in: body
          required: true
          schema:
            $ref: '#/definitions/EmailNotifications'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/EmailNotificationsTestResult'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/certificates:
    get:
      tags:
        - Certificates
      operationId: GetCertificates
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Certificates'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/certificates/regenerate:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Certificates
      operationId: RecreateCertificate
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: recreateCertificateSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/CertificateRegenerateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/certificates/upload:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Certificates
      operationId: UploadCertificate
      consumes:
        - multipart/form-data
      produces:
        - application/json
        - application/problem+json
      parameters:
        - in: formData
          name: certificateFile
          required: true
          type: file
          description: The .PFX certificate to upload.
          x-veeam-spec:
            $ref: '#/definitions/UploadCertificateSpec'
        - in: formData
          name: certificatePassword
          required: true
          type: string
          description: .PFX certificate password
          x-veeam-spec:
            $ref: '#/definitions/UploadCertificateSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '202':
          description: Success
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/retentionSettings:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - RetentionSettings
      operationId: GetRetentionSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RetentionSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - RetentionSettings
      operationId: UpdateRetentionSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: retentionSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/RetentionSettings'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RetentionSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/retentionSettings/reset:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - RetentionSettings
      operationId: SetDefaultRetentionSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RetentionSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/dateTime:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Timezone
      operationId: GetDateTimeSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DateTimeSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Timezone
      operationId: SetDateTimeSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: datetimeSettingsSpec
          in: body
          required: true
          schema:
            $ref: '#/definitions/DateTimeSettings'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DateTimeSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/dateTime/timeZones:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Timezone
      operationId: GetTimeZones
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TimeZones'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/dateTime/setDefault:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Timezone
      operationId: SetDefaultDateTimeSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DateTimeSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/settings/dateTime/getDefault:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Timezone
      operationId: GetDefaultDateTimeSettings
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DateTimeSettings'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/userStatus:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Overview
      operationId: UserStatus
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserStatus'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/system/version:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Version
      operationId: GetProductVersion
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ProductVersion'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/system/version/productId:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Version
      operationId: GetProductId
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ProductId'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/licensing/license:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Licensing
      operationId: GetLicense
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/LicenseInfo'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Licensing
      operationId: InstallLicense
      consumes:
        - multipart/form-data
      produces:
        - application/json
        - application/problem+json
      parameters:
        - in: formData
          name: licenseFile
          required: true
          type: file
          description: The .lic license to upload.
          x-veeam-spec:
            $ref: '#/definitions/UploadLicenseSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/LicenseInfo'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Licensing
      operationId: RemoveLicense
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '204':
          description: Deleted
          schema:
            $ref: '#/definitions/EmptySuccessResponse'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/licensing/license/export:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Licensing
      operationId: ExportLicense
      consumes: []
      produces:
        - text/csv
        - application/xml
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/licensing/licensedWorkloads:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Licensing
      operationId: GetLicensedWorkloads
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: Offset
          in: query
          required: false
          type: integer
          format: int32
          minimum: 0
          x-veeam-spec:
            $ref: '#/definitions/LicensedWorkloadsFilters'
        - name: Limit
          in: query
          required: false
          type: integer
          format: int32
          minimum: -1
          x-veeam-spec:
            $ref: '#/definitions/LicensedWorkloadsFilters'
        - name: Sort
          in: query
          required: false
          type: array
          items:
            type: string
            enum:
              - nameAsc
              - nameDesc
              - lastBackupAsc
              - lastBackupDesc
          collectionFormat: multi
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/LicensedWorkloadsFilters'
        - name: SearchPattern
          in: query
          required: false
          type: string
          x-veeam-spec:
            $ref: '#/definitions/LicensedWorkloadsFilters'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/LicensedWorkloadsPage'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. One or more resources specified in the request could not be found in the specified resource collection.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/licensing/alerts:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Licensing
      operationId: GetAllLicenseNotifications
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/LicenseNotifications'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/licensing/alerts/resolve:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - Licensing
      operationId: ResolveLicenseNotifications
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: resolveNotificationsModel
          in: body
          required: true
          schema:
            $ref: '#/definitions/ResolveNotificationsSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '204':
          description: Success
          schema:
            $ref: '#/definitions/EmptySuccessResponse'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/system/logs:
    get:
      tags:
        - System
      operationId: GetSystemLogs
      consumes: []
      produces:
        - application/octet-stream
        - application/problem+json
      parameters:
        - name: ExportLogsType
          in: query
          required: false
          type: string
          enum:
            - LastDays
            - BetweenDates
          x-veeam-spec:
            $ref: '#/definitions/LogExportSpec'
        - name: Days
          in: query
          required: false
          type: integer
          format: int32
          x-veeam-spec:
            $ref: '#/definitions/LogExportSpec'
        - name: FromDateUtc
          in: query
          required: false
          type: string
          format: date-time
          x-veeam-spec:
            $ref: '#/definitions/LogExportSpec'
        - name: ToDateUtc
          in: query
          required: false
          type: string
          format: date-time
          x-veeam-spec:
            $ref: '#/definitions/LogExportSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/system/time:
    get:
      tags:
        - System
      operationId: GetSystemDateTimeInfo
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DateTimeInfo'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/statistics/summary:
    get:
      tags:
        - Statistics
      operationId: GetSummary
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SummaryStatistics'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/licenseAgreement:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - LicenseAgreement
      operationId: GetLicenseAgreement
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/LicenseAgreements'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
      security: []
  /api/v1/licenseAgreement/accepted:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - LicenseAgreement
      operationId: GetCurrentLicenseAgreementAccepted
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/LicenseAgreementAcceptResult'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
      security: []
  /api/v1/licenseAgreement/accept:
    post:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - LicenseAgreement
      operationId: AcceptLicenseAgreement
      consumes: []
      produces:
        - application/json
        - application/problem+json
      parameters:
        - name: eulaChecksum
          in: query
          required: true
          type: string
        - name: thirdPartyLicenseAgreementChecksum
          in: query
          required: true
          type: string
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '204':
          description: Success
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
      security: []
  /api/v1/licenseAgreement/download:
    get:
      x-veeam-authorize:
        roles:
          - Portal Administrator
      tags:
        - LicenseAgreement
      operationId: DownloadLicenseAgreementFile
      consumes: []
      produces:
        - application/octet-stream
        - application/problem+json
      parameters:
        - name: licenseAgreementType
          in: query
          required: true
          type: string
          enum:
            - Eula
            - ThirdPartyAgreement
          x-veeam-spec:
            $ref: '#/definitions/LicenseAgreementDownloadSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            type: file
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
      security: []
  /api/v1/token:
    post:
      tags:
        - Token
      operationId: Authenticate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - application/problem+json
      parameters:
        - in: formData
          name: grant_type
          type: string
          enum:
            - password
            - refresh_token
            - authorization_code
            - mfa
          required: true
          description: Authentication grant type
          x-veeam-spec:
            $ref: '#/definitions/LoginSpec'
        - in: formData
          name: username
          type: string
          description: User name (required for the 'password' grant type)
          x-veeam-spec:
            $ref: '#/definitions/LoginSpec'
        - in: formData
          name: password
          type: string
          format: password
          description: Password (required for the 'password' grant type)
          x-veeam-spec:
            $ref: '#/definitions/LoginSpec'
        - in: formData
          name: refresh_token
          type: string
          description: Refresh token (required for the 'refresh_token' grant type)
          x-veeam-spec:
            $ref: '#/definitions/LoginSpec'
        - in: formData
          name: code
          type: string
          description: Authorization code (required for the 'authorization_code' grant type)
          x-veeam-spec:
            $ref: '#/definitions/LoginSpec'
        - in: formData
          name: mfa_token
          type: string
          description: MFA token (required for the 'mfa' grant type)
          x-veeam-spec:
            $ref: '#/definitions/LoginSpec'
        - in: formData
          name: mfa_code
          type: string
          description: Verification code (required for the 'mfa' grant type)
          x-veeam-spec:
            $ref: '#/definitions/LoginSpec'
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RESTLogin'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
      security: []
    delete:
      tags:
        - Token
      operationId: SignOut
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '204':
          description: Success
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/token/authorizationCode:
    post:
      tags:
        - Token
      operationId: CreateAuthorizationCode
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
      parameters:
        - $ref: '#/parameters/apiVersionParam'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AuthorizationCode'
        '400':
          description: 'Bad Request. The request body is malformed, incomplete or otherwise invalid.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. The authorization header has been expected but not found (or found but is expired).
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The user sending a request does not have adequate privileges to access one or more objects specified in the request.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error. The request has been received but could not be completed because of an internal error at the server side.
          schema:
            $ref: '#/definitions/Error'
  /api/v1/problems/accessDenied:
    get:
      tags:
        - Problems
      operationId: AccessDenied
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/noAccessToken:
    get:
      tags:
        - Problems
      operationId: NoAccessToken
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/invalidAccessToken:
    get:
      tags:
        - Problems
      operationId: InvalidAccessToken
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/expiredAccessToken:
    get:
      tags:
        - Problems
      operationId: ExpiredAccessToken
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/resourceNotFound:
    get:
      tags:
        - Problems
      operationId: ResourceNotFound
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/validationError:
    get:
      tags:
        - Problems
      operationId: ValidationError
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/serviceUnavailable:
    get:
      tags:
        - Problems
      operationId: ServiceUnavailable
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/notImplemented:
    get:
      tags:
        - Problems
      operationId: ActionNotImplemented
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/unknownError:
    get:
      tags:
        - Problems
      operationId: UnknownError
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/repositoryUsedByPolicy:
    get:
      tags:
        - Problems
      operationId: RepositoryUsedByPolicy
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/unsupportedApiVersion:
    get:
      tags:
        - Problems
      operationId: UnsupportedApiVersion
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/apiVersionUnspecified:
    get:
      tags:
        - Problems
      operationId: ApiVersionUnspecified
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/invalidApiVersion:
    get:
      tags:
        - Problems
      operationId: InvalidApiVersion
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/ambiguousApiVersion:
    get:
      tags:
        - Problems
      operationId: AmbiguousApiVersion
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/failedToRemoveUserPolicy:
    get:
      tags:
        - Problems
      operationId: FailedToRemoveUserPolicy
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/policyAlreadyStarted:
    get:
      tags:
        - Problems
      operationId: PolicyAlreadyStarted
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
  /api/v1/problems/licenseAgreementsIsNotAccepted:
    get:
      tags:
        - Problems
      operationId: LicenseAgreementsIsNotAccepted
      consumes: []
      produces:
        - text/html
      responses:
        '200':
          description: Success
          schema:
            type: file
      security: []
definitions:
  Error:
    description: ''
    required:
      - type
      - title
      - status
      - errorCode
    type: object
    properties:
      type:
        type: string
        format: uri
        description: 'An URI reference that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g. using HTML).'
      title:
        type: string
        description: 'A short, summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized)'
      status:
        type: integer
        format: int32
        description: The HTTP status code generated by the origin server for this occurrence of the problem.
        minimum: 400
        maximum: 600
        exclusiveMaximum: true
      errorCode:
        description: The error code is a string that uniquely identifies an error condition and should be understood by programs that detect and handle errors by type
        enum:
          - AccessDenied
          - ExpiredToken
          - InvalidToken
          - InvalidURI
          - MethodNotAllowed
          - NotFound
          - NotImplemented
          - ServiceUnavailable
          - UnexpectedContent
          - UnknownError
        type: string
      details:
        description: The error message contains a generic description of the error condition in English. It is intended for a human audience
        type: string
      instance:
        description: ID of the object that is involved in the error (or empty)
        type: string
        format: uri
      data:
        type: object
        description: Error payload
        additionalProperties:
          type: object
  EmptySuccessResponse:
    description: 'Empty succes response ( 200, 201, 204 )'
    type: object
  Link:
    required:
      - rel
      - href
      - method
    type: object
    properties:
      rel:
        type: string
      href:
        type: string
      method:
        type: string
        enum:
          - GET
          - POST
          - PUT
          - DELETE
  StandardAccount:
    required:
      - id
      - name
      - username
      - description
    type: object
    properties:
      id:
        format: uuid
        type: string
      name:
        type: string
      username:
        type: string
      description:
        type: string
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  StandardAccountCreateSpec:
    required:
      - name
      - username
    type: object
    properties:
      name:
        maxLength: 255
        minLength: 0
        type: string
      description:
        maxLength: 512
        minLength: 0
        type: string
      username:
        maxLength: 255
        minLength: 0
        type: string
      password:
        maxLength: 255
        minLength: 0
        type: string
  StandardAccountUpdateSpec:
    required:
      - name
    type: object
    properties:
      name:
        maxLength: 255
        minLength: 0
        type: string
      description:
        maxLength: 512
        minLength: 0
        type: string
      username:
        maxLength: 255
        minLength: 0
        type: string
      password:
        maxLength: 255
        minLength: 0
        type: string
  StandardAccountsPage:
    required:
      - resutls
      - totalCount
    type: object
    properties:
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/StandardAccount'
      totalCount:
        format: int32
        type: integer
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  StandardAccountsSortColumns:
    enum:
      - nameAsc
      - nameDesc
    type: string
  StandardAccountsFilters:
    type: object
    properties:
      searchPattern:
        type: string
      offset:
        type: integer
        format: int32
        minimum: 0
      limit:
        type: integer
        format: int32
        minimum: -1
      sort:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/StandardAccountsSortColumns'
  RegionTypes:
    enum:
      - Global
      - Emulator
      - Government
      - China
    type: string
  AmazonAccount:
    required:
      - id
      - name
      - awsid
      - description
    type: object
    properties:
      id:
        format: uuid
        type: string
      name:
        type: string
      description:
        type: string
      awsid:
        type: string
      regionType:
        $ref: '#/definitions/RegionTypes'
      accessKeys:
        $ref: '#/definitions/AmazonAccountAccessKeys'
      IAMRole:
        $ref: '#/definitions/AmazonAccountIAMRole'
      IAMRoleFromAnotherAccount:
        $ref: '#/definitions/AmazonAccountIAMRoleFromAnotherAccount'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  AmazonAccountCreateSpec:
    required:
      - name
      - username
    type: object
    properties:
      name:
        maxLength: 255
        minLength: 0
        type: string
      description:
        maxLength: 512
        minLength: 0
        type: string
      accessKeys:
        $ref: '#/definitions/AmazonAccountAccessKeysCreateSpec'
      IAMRole:
        $ref: '#/definitions/AmazonAccountIAMRoleCreateSpec'
      IAMRoleFromAnotherAccount:
        $ref: '#/definitions/AmazonAccountIAMRoleFromAnotherAccountCreateSpec'
  AmazonAccountUpdateSpec:
    required:
      - name
    type: object
    properties:
      name:
        maxLength: 255
        minLength: 0
        type: string
      description:
        maxLength: 512
        minLength: 0
        type: string
      accessKeys:
        $ref: '#/definitions/AmazonAccountAccessKeysUpdateSpec'
      IAMRole:
        $ref: '#/definitions/AmazonAccountIAMRoleUpdateSpec'
      IAMRoleFromAnotherAccount:
        $ref: '#/definitions/AmazonAccountIAMRoleFromAnotherAccountUpdateSpec'
  AmazonAccountsPage:
    required:
      - results
      - totalCount
    type: object
    properties:
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/AmazonAccount'
      totalCount:
        format: int32
        type: integer
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  AmazonAccountsSortColumns:
    enum:
      - nameAsc
      - nameDesc
    type: string
  AmazonAccountsFilters:
    type: object
    properties:
      searchPattern:
        type: string
      offset:
        type: integer
        format: int32
        minimum: 0
      limit:
        type: integer
        format: int32
        minimum: -1
      sort:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/AmazonAccountsSortColumns'
  AmazonAccountAccessKeys:
    required:
      - accessKey
      - defaultRegionType
    type: object
    properties:
      accessKey:
        type: string
      defaultRegion:
        $ref: '#/definitions/RegionTypes'
  AmazonAccountIAMRole:
    required:
      - roleName
      - isDefault
    type: object
    properties:
      parentAmazonAccountId:
        format: uuid
        type: string
      roleName:
        type: string
      isDefault:
        type: boolean
  AmazonAccountIAMRoleFromAnotherAccount:
    required:
      - parentAmazonAccountId
      - accountId
      - roleName
    type: object
    properties:
      parentAmazonAccountId:
        format: uuid
        type: string
      accountId:
        type: string
      roleName:
        type: string
  AmazonAccountAccessKeysCreateSpec:
    required:
      - accessKey
      - secretKey
      - defaultRegionType
    type: object
    properties:
      accessKey:
        type: string
      secretKey:
        type: string
      defaultRegionType:
        $ref: '#/definitions/RegionTypes'
  AmazonAccountIAMRoleCreateSpec:
    required:
      - roleName
    type: object
    properties:
      roleName:
        type: string
  AmazonAccountIAMRoleFromAnotherAccountCreateSpec:
    required:
      - accountId
      - roleName
    type: object
    properties:
      accountId:
        type: string
      roleName:
        type: string
      externalId:
        type: string
  AmazonAccountAccessKeysUpdateSpec:
    required:
      - accessKey
      - secretKey
      - defaultRegionType
    type: object
    properties:
      accessKey:
        type: string
      secretKey:
        type: string
      defaultRegionType:
        $ref: '#/definitions/RegionTypes'
  AmazonAccountIAMRoleUpdateSpec:
    required:
      - roleName
    type: object
    properties:
      roleName:
        type: string
  AmazonAccountIAMRoleFromAnotherAccountUpdateSpec:
    required:
      - accountId
      - roleName
    type: object
    properties:
      accountId:
        type: string
      roleName:
        type: string
      externalId:
        type: string
  AmazonAccountNameValidationSpec:
    required:
      - name
    type: object
    properties:
      name:
        minLength: 1
        type: string
  StandardAccountNameValidationSpec:
    required:
      - name
    type: object
    properties:
      name:
        minLength: 1
        type: string
  RescanCloudAccountSpec:
    type: object
    properties:
      regionIds:
        type: array
        uniqueItems: false
        items:
          type: string
          format: uuid
  TagsSortColumns:
    type: string
    enum:
      - keyAsc
      - keyDesc
  TagsFilters:
    type: object
    properties:
      searchPattern:
        type: string
      offset:
        type: integer
        format: int32
        minimum: 0
      limit:
        type: integer
        format: int32
        minimum: -1
      sort:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/TagsSortColumns'
  TagSpec:
    required:
      - key
      - value
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  Tag:
    required:
      - id
      - key
      - value
    type: object
    properties:
      id:
        format: uuid
        type: string
      key:
        type: string
      value:
        type: string
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  TagsPage:
    required:
      - results
      - totalCount
    type: object
    properties:
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Tag'
      totalCount:
        format: int32
        type: integer
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  VirtualMachine:
    required:
      - id
      - awsResourceId
      - protectionStatus
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      awsResourceId:
        type: string
      protectionStatus:
        $ref: '#/definitions/VirtualMachineProtectionStatuses'
      backupDestinations:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/BackupDestinations'
      location:
        required:
          - id
          - name
        type: object
        properties:
          name:
            type: string
          id:
            type: string
            format: uuid
      isDeleted:
        type: boolean
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  VirtualMachinesPage:
    required:
      - results
      - totalCount
    type: object
    properties:
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/VirtualMachine'
      totalCount:
        format: int32
        type: integer
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  VirtualMachinesSortColumns:
    type: string
    enum:
      - nameAsc
      - nameDesc
      - locationAsc
      - locationDesc
  VirtualMachineProtectionStatuses:
    type: string
    enum:
      - Protected
      - Unprotected
  BackupDestinations:
    type: string
    enum:
      - Snapshot
      - AwsBlob
      - ManualSnapshot
  VirtualMachinesFilters:
    type: object
    properties:
      SearchPattern:
        type: string
      ProtectionStatus:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/VirtualMachineProtectionStatuses'
      BackupDestination:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/BackupDestinations'
      BackupState:
        type: string
        enum:
          - OnlyBackedUp
          - OnlyNotBackedUp
          - All
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      Sort:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/VirtualMachinesSortColumns'
  VirtualMachineSnapshotSpec:
    required:
      - amazonAccountId
    type: object
    properties:
      amazonAccountId:
        type: string
        format: uuid
      targetAmazonAccountIdToCopySnapshots:
        format: uuid
        type: string
      targetRegionIdToCopySnapshots:
        format: uuid
        type: string
      encryptionKey:
        type: string
      additionalTags:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/TagSpec'
      copyTagsFromVolumeEnabled:
        type: boolean
  BucketsSortColumns:
    type: string
    enum:
      - nameAsc
      - nameDesc
  BucketsFilters:
    type: object
    properties:
      AmazonAccountId:
        type: string
        format: uuid
      SearchPattern:
        type: string
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      Sort:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/BucketsSortColumns'
  Bucket:
    required:
      - id
      - name
      - location
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      location:
        type: object
        required:
          - id
          - name
        properties:
          id:
            type: string
            format: uuid
          name:
            type: string
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  BucketsPage:
    required:
      - results
      - totalCount
    type: object
    properties:
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Bucket'
      totalCount:
        format: int32
        type: integer
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  RepositoriesPage:
    required:
      - results
      - totalCount
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Repository'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  Repository:
    required:
      - id
      - name
      - description
      - amazonAccountId
      - amazonStorageFolder
      - enableEncryption
    type: object
    properties:
      id:
        format: uuid
        type: string
      name:
        type: string
      description:
        type: string
      amazonAccountId:
        type: string
        format: uuid
      amazonStorageFolder:
        type: string
      amazonBucketId:
        type: string
        format: uuid
      hint:
        type: string
      enableEncryption:
        type: boolean
      _embedded:
        $ref: '#/definitions/RepositoryEmbedded'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  RepositoryCreateSpec:
    required:
      - name
      - amazonBucketId
      - amazonAccountId
      - amazonStorageFolder
      - enableEncryption
    type: object
    properties:
      name:
        maxLength: 255
        minLength: 1
        type: string
      description:
        type: string
      amazonAccountId:
        type: string
        format: uuid
      amazonBucketId:
        type: string
        format: uuid
      amazonStorageFolder:
        type: string
      password:
        type: string
      hint:
        type: string
      enableEncryption:
        type: boolean
  RepositoryUpdateSpec:
    required:
      - name
      - amazonAccountId
      - enableEncryption
    type: object
    properties:
      name:
        maxLength: 255
        minLength: 1
        type: string
      description:
        type: string
      amazonAccountId:
        type: string
        format: uuid
      password:
        type: string
      hint:
        type: string
      enableEncryption:
        type: boolean
  RepositoryEmbedded:
    type: object
    properties:
      amazonAccount:
        type: string
      amazonAccountLink:
        $ref: '#/definitions/Link'
      region:
        type: string
      regionLink:
        $ref: '#/definitions/Link'
      bucket:
        type: string
      bucketLink:
        $ref: '#/definitions/Link'
  RepositoriesSortColumns:
    type: string
    enum:
      - nameAsc
      - nameDesc
      - descriptionAsc
      - descriptionDesc
      - amazonAccountNameAsc
      - amazonAccountNameDesc
      - amazonBucketAsc
      - amazonBucketDesc
      - amazonStorageFolderAsc
      - amazonStorageFolderDesc
      - regionAsc
      - regionDesc
      - encryptionAsc
      - encryptionDesc
  RepositoriesFilters:
    type: object
    properties:
      SearchPattern:
        type: string
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      Sort:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/RepositoriesSortColumns'
  RepositoryPasswordValidationSpec:
    required:
      - password
    type: object
    properties:
      password:
        minLength: 1
        type: string
  RepositoryPasswordValidationResult:
    required:
      - isSuccess
    type: object
    properties:
      isSuccess:
        type: boolean
  SessionStatuses:
    type: string
    enum:
      - Running
      - NeverExecuted
      - Succeeded
      - Warning
      - Failed
      - Canceled
  SessionResults:
    enum:
      - Running
      - Success
      - Warning
      - Failed
      - Cancelled
    type: string
  RetentionTypes:
    type: string
    enum:
      - Days
      - Months
  DaysOfWeek:
    enum:
      - Sunday
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday
      - Saturday
    type: string
  DayNumbersInMonth:
    enum:
      - First
      - Second
      - Third
      - Fourth
      - Last
      - OnDay
    type: string
  Months:
    enum:
      - January
      - February
      - March
      - April
      - May
      - June
      - July
      - August
      - September
      - October
      - November
      - December
    type: string
  PeriodRetentionOptions:
    required:
      - type
      - count
    type: object
    properties:
      type:
        $ref: '#/definitions/RetentionTypes'
      count:
        type: integer
        format: int32
        minimum: 0
  PointsRetentionOptions:
    required:
      - count
    type: object
    properties:
      count:
        type: integer
        format: int32
        minimum: 0
  YearlyRetentionOptions:
    required:
      - count
      - type
    type: object
    properties:
      count:
        type: integer
        format: int32
        minimum: 0
      type:
        type: string
        enum:
          - Years
  DailySchedule:
    type: object
    required:
      - hours
    properties:
      hours:
        type: array
        uniqueItems: false
        minLength: 24
        maxLength: 24
        items:
          type: boolean
  DailySnapshotScheduleSettings:
    type: object
    required:
      - retention
      - schedule
    properties:
      retention:
        $ref: '#/definitions/PointsRetentionOptions'
      schedule:
        $ref: '#/definitions/DailySchedule'
  DailyBackupScheduleSettings:
    type: object
    required:
      - retention
      - schedule
    properties:
      retention:
        $ref: '#/definitions/PeriodRetentionOptions'
      schedule:
        $ref: '#/definitions/DailySchedule'
  DailyReplicaScheduleSettings:
    type: object
    required:
      - retention
      - schedule
    properties:
      retention:
        $ref: '#/definitions/PointsRetentionOptions'
      schedule:
        $ref: '#/definitions/DailySchedule'
  DailyScheduleKinds:
    enum:
      - Everyday
      - WeekDays
      - SelectedDays
    type: string
  DailyScheduleSettings:
    required:
      - kind
      - runsPerHour
      - snapshotOptions
    type: object
    properties:
      kind:
        $ref: '#/definitions/DailyScheduleKinds'
      runsPerHour:
        type: integer
        format: int32
        minimum: 1
      days:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/DaysOfWeek'
      snapshotOptions:
        $ref: '#/definitions/DailySnapshotScheduleSettings'
      backupOptions:
        $ref: '#/definitions/DailyBackupScheduleSettings'
      replicaOptions:
        $ref: '#/definitions/DailyReplicaScheduleSettings'
  WeeklySchedule:
    type: object
    required:
      - days
    properties:
      days:
        type: array
        uniqueItems: true
        minLength: 0
        maxLength: 7
        items:
          $ref: '#/definitions/DaysOfWeek'
  WeeklySnapshotScheduleSettings:
    type: object
    required:
      - retention
      - schedule
    properties:
      retention:
        $ref: '#/definitions/PointsRetentionOptions'
      schedule:
        $ref: '#/definitions/WeeklySchedule'
  WeeklyBackupScheduleSettings:
    type: object
    required:
      - retention
      - schedule
    properties:
      retention:
        $ref: '#/definitions/PeriodRetentionOptions'
      schedule:
        $ref: '#/definitions/WeeklySchedule'
  WeeklyReplicaScheduleSettings:
    type: object
    required:
      - retention
      - schedule
    properties:
      retention:
        $ref: '#/definitions/PointsRetentionOptions'
      schedule:
        $ref: '#/definitions/WeeklySchedule'
  WeeklyScheduleSettings:
    required:
      - timeLocal
      - snapshotOptions
    type: object
    properties:
      timeLocal:
        format: date-time
        type: string
      snapshotOptions:
        $ref: '#/definitions/WeeklySnapshotScheduleSettings'
      backupOptions:
        $ref: '#/definitions/WeeklyBackupScheduleSettings'
      replicaOptions:
        $ref: '#/definitions/WeeklyReplicaScheduleSettings'
  MonthlySchedule:
    type: object
    required:
      - months
    properties:
      months:
        type: array
        uniqueItems: true
        minLength: 0
        maxLength: 12
        items:
          $ref: '#/definitions/Months'
  MonthlySnapshotScheduleSettings:
    type: object
    required:
      - retention
      - schedule
    properties:
      retention:
        $ref: '#/definitions/PointsRetentionOptions'
      schedule:
        $ref: '#/definitions/MonthlySchedule'
  MonthlyBackupScheduleSettings:
    type: object
    required:
      - retention
      - schedule
    properties:
      retention:
        $ref: '#/definitions/PeriodRetentionOptions'
      schedule:
        $ref: '#/definitions/MonthlySchedule'
  MonthlyReplicaScheduleSettings:
    type: object
    required:
      - retention
      - schedule
    properties:
      retention:
        $ref: '#/definitions/PointsRetentionOptions'
      schedule:
        $ref: '#/definitions/MonthlySchedule'
  MonthlyScheduleSettings:
    required:
      - timeLocal
      - dayNumberInMonth
      - snapshotOptions
    type: object
    properties:
      timeLocal:
        format: date-time
        type: string
      dayNumberInMonth:
        $ref: '#/definitions/DayNumbersInMonth'
      dayOfWeek:
        $ref: '#/definitions/DaysOfWeek'
      dayOfMonth:
        format: int32
        type: integer
      snapshotOptions:
        $ref: '#/definitions/MonthlySnapshotScheduleSettings'
      backupOptions:
        $ref: '#/definitions/MonthlyBackupScheduleSettings'
      replicaOptions:
        $ref: '#/definitions/MonthlyReplicaScheduleSettings'
  YearlyScheduleSettings:
    required:
      - timeLocal
      - dayNumberInMonth
      - month
      - retention
    type: object
    properties:
      timeLocal:
        type: string
        format: date-time
      dayNumberInMonth:
        $ref: '#/definitions/DayNumbersInMonth'
      dayOfWeek:
        $ref: '#/definitions/DaysOfWeek'
      dayOfMonth:
        format: int32
        type: integer
      month:
        $ref: '#/definitions/Months'
      retention:
        $ref: '#/definitions/YearlyRetentionOptions'
  ScheduleSettings:
    required:
      - dailyScheduleEnabled
      - weeklyScheduleEnabled
      - monthlyScheduleEnabled
      - yearlyScheduleEnabled
    type: object
    properties:
      dailyScheduleEnabled:
        type: boolean
      dailySchedule:
        $ref: '#/definitions/DailyScheduleSettings'
      weeklyScheduleEnabled:
        type: boolean
      weeklySchedule:
        $ref: '#/definitions/WeeklyScheduleSettings'
      monthlyScheduleEnabled:
        type: boolean
      monthlySchedule:
        $ref: '#/definitions/MonthlyScheduleSettings'
      yearlyScheduleEnabled:
        type: boolean
      yearlySchedule:
        $ref: '#/definitions/YearlyScheduleSettings'
  PolicyStatuses:
    type: string
    enum:
      - Enabled
      - Disabled
  PoliciesSortColumns:
    type: string
    enum:
      - priorityAsc
      - priorityDesc
      - nameAsc
      - nameDesc
      - usnAsc
      - usnDesc
  PoliciesFilters:
    type: object
    properties:
      SearchPattern:
        type: string
      VirtualMachineId:
        type: string
        format: uuid
      LastPolicySessionStatus:
        type: array
        items:
          $ref: '#/definitions/SessionStatuses'
        uniqueItems: false
      PolicyStatus:
        type: array
        items:
          $ref: '#/definitions/PolicyStatuses'
        uniqueItems: false
      Sort:
        type: array
        items:
          $ref: '#/definitions/PoliciesSortColumns'
        uniqueItems: false
      Usn:
        type: integer
        format: int64
      RepositoryId:
        type: string
        format: uuid
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
  PoliciesPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Policy'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  PolicySelectionTypes:
    enum:
      - AllItems
      - SelectedItems
    type: string
  Policy:
    required:
      - id
      - name
      - description
      - regionIds
      - priority
      - isEnabled
      - amazonAccountId
      - backupType
    type: object
    properties:
      id:
        format: uuid
        type: string
      snapshotSettings:
        $ref: '#/definitions/PolicySnapshotSettings'
      replicaSettings:
        $ref: '#/definitions/PolicyReplicaSettings'
      backupSettings:
        $ref: '#/definitions/PolicyBackupSettings'
      regionIds:
        minLength: 1
        uniqueItems: false
        type: array
        items:
          type: string
          format: uuid
      selectedItems:
        $ref: '#/definitions/PolicyBackupItems'
      excludedItems:
        $ref: '#/definitions/PolicyBackupItems'
      scheduleSettings:
        $ref: '#/definitions/ScheduleSettings'
      name:
        type: string
      description:
        type: string
      priority:
        format: int64
        type: integer
      amazonAccountId:
        type: string
        format: uuid
      retrySettings:
        $ref: '#/definitions/RetrySettings'
      policyNotificationSettings:
        $ref: '#/definitions/PolicyNotificationSettings'
      isEnabled:
        type: boolean
      backupType:
        $ref: '#/definitions/PolicySelectionTypes'
      createdBy:
        type: string
      modifiedBy:
        type: string
      lastPolicySessionStatus:
        $ref: '#/definitions/SessionStatuses'
      warning:
        type: string
      usn:
        format: int64
        type: integer
      _embeddedResources:
        $ref: '#/definitions/PolicyEmbeddedResources'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  PolicySpec:
    required:
      - regions
      - name
      - amazonAccountId
      - backupType
    type: object
    properties:
      snapshotSettings:
        $ref: '#/definitions/PolicySnapshotSettings'
      replicaSettings:
        $ref: '#/definitions/PolicyReplicaSettings'
      backupSettings:
        $ref: '#/definitions/PolicyBackupSettings'
      regionIds:
        minLength: 1
        uniqueItems: false
        type: array
        items:
          type: string
          format: uuid
      selectedItems:
        $ref: '#/definitions/PolicyBackupItems'
      excludedItems:
        $ref: '#/definitions/PolicyBackupItems'
      scheduleSettings:
        $ref: '#/definitions/ScheduleSettings'
      name:
        maxLength: 255
        minLength: 1
        type: string
      description:
        type: string
      amazonAccountId:
        type: string
        format: uuid
      retrySettings:
        $ref: '#/definitions/RetrySettings'
      policyNotificationSettings:
        $ref: '#/definitions/PolicyNotificationSettings'
      backupType:
        $ref: '#/definitions/PolicySelectionTypes'
  PolicySnapshotSettings:
    type: object
    properties:
      additionalTags:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/TagSpec'
      copyTagsFromVolumeEnabled:
        type: boolean
      tryCreateVSSSnapshot:
        type: boolean
  ReplicaMapping:
    required:
      - sourceRegionId
      - targetRegionId
      - targetAmazonAccountId
    type: object
    properties:
      sourceRegionId:
        format: uuid
        type: string
      targetRegionId:
        format: uuid
        type: string
      targetAmazonAccountId:
        type: string
        format: uuid
      encryptionKey:
        type: string
  PolicyReplicaSettings:
    required:
      - mapping
    type: object
    properties:
      mapping:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/ReplicaMapping'
      additionalTags:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/TagSpec'
      copyTagsFromVolumeEnabled:
        type: boolean
  PolicyBackupSettings:
    type: object
    properties:
      targetRepositoryId:
        format: uuid
        type: string
  PolicyEmbeddedResources:
    type: object
    properties:
      lastBackupSession:
        $ref: '#/definitions/Link'
      lastFinishedBackupSession:
        $ref: '#/definitions/Link'
      targetRepository:
        $ref: '#/definitions/Link'
      protectedResources:
        $ref: '#/definitions/Link'
      excludedResources:
        $ref: '#/definitions/Link'
      regions:
        $ref: '#/definitions/Link'
  PolicyItem:
    type: object
    properties:
      name:
        type: string
      tag:
        $ref: '#/definitions/Link'
      virtualMachine:
        $ref: '#/definitions/Link'
      deletedItem:
        $ref: '#/definitions/PolicyItemDeletedFromAmazon'
  PolicyBackupItems:
    type: object
    properties:
      virtualMachineIds:
        uniqueItems: false
        type: array
        items:
          type: string
          format: uuid
      tagIds:
        uniqueItems: false
        type: array
        items:
          type: string
          format: uuid
  PolicyItemsSortColumns:
    type: string
    enum:
      - nameAsc
      - nameDesc
  PolicyItemsFilters:
    type: object
    properties:
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      SearchPattern:
        type: string
      Sort:
        type: array
        items:
          $ref: '#/definitions/PolicyItemsSortColumns'
        uniqueItems: false
  PolicyItemsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/PolicyItem'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  PoliciesPrioritySpec:
    required:
      - priorities
    type: object
    properties:
      priorities:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/PolicyPrioritySpec'
  PolicyPrioritySpec:
    required:
      - policyId
      - priority
    type: object
    properties:
      policyId:
        type: string
        format: uuid
      priority:
        type: integer
        format: int32
  PolicyExportModel:
    required:
      - regions
      - name
      - amazonAccountName
      - isEnabled
      - backupType
    type: object
    properties:
      snapshotSettings:
        $ref: '#/definitions/PolicySnapshotSettings'
      replicaSettings:
        $ref: '#/definitions/ReplicaSettingsExportModel'
      backupSettings:
        $ref: '#/definitions/BackupSettingsExportModel'
      regions:
        minLength: 1
        uniqueItems: false
        type: array
        items:
          type: string
      selectedItems:
        $ref: '#/definitions/PolicyBackupItemsExportModel'
      excludedItems:
        $ref: '#/definitions/PolicyBackupItemsExportModel'
      scheduleSettings:
        $ref: '#/definitions/ScheduleSettings'
      name:
        maxLength: 255
        minLength: 1
        type: string
      description:
        type: string
      priority:
        format: int64
        type: integer
      amazonAccountName:
        type: string
      retrySettings:
        $ref: '#/definitions/RetrySettings'
      policyNotificationSettings:
        $ref: '#/definitions/PolicyNotificationSettings'
      isEnabled:
        type: boolean
      backupType:
        $ref: '#/definitions/PolicySelectionTypes'
  ReplicaSettingsExportModel:
    required:
      - mapping
    type: object
    properties:
      mapping:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/RemoteMappingExportModel'
      additionalTags:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/TagSpec'
      copyTagsFromVolumeEnabled:
        type: boolean
  BackupSettingsExportModel:
    required:
      - targetRepositoryName
    type: object
    properties:
      targetRepositoryName:
        type: string
  PolicyBackupItemsExportModel:
    type: object
    properties:
      virtualMachines:
        uniqueItems: false
        type: array
        items:
          type: string
      tags:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/TagSpec'
  RemoteMappingExportModel:
    required:
      - sourceRegionName
      - targetRegionName
      - targetAmazonAccountName
    type: object
    properties:
      sourceRegionName:
        type: string
      targetRegionName:
        type: string
      targetAmazonAccountName:
        type: string
      encryptionKey:
        type: string
  CostEstimationSortColumns:
    type: string
    enum:
      - virtualMachineNameAsc
      - virtualMachineNameDesc
      - snapshotCostAsc
      - snapshotCostDesc
      - replicaCostAsc
      - replicaCostDesc
      - backupCostAsc
      - backupCostDesc
      - trafficAsc
      - trafficDesc
      - transactionAsc
      - transactionDesc
      - totalAsc
      - totalDesc
  CostEstimationFilters:
    type: object
    properties:
      VirtualMachineNameFilter:
        type: string
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      Sort:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/CostEstimationSortColumns'
  CostEstimationsPage:
    required:
      - totalCount
      - items
      - isEmpty
      - instancesCosts
      - totalTrafficCost
      - totalTransactionCost
      - totalCost
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      items:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/CostEstimationItem'
      isEmpty:
        type: boolean
      totalSnapshotCost:
        type: number
        format: double
      totalReplicaCost:
        type: number
        format: double
      totalBackupCost:
        type: number
        format: double
      totalTrafficCost:
        type: number
        format: double
      totalTransactionCost:
        type: number
        format: double
      totalCost:
        type: number
        format: double
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  CostEstimationItem:
    required:
      - virtualMachineId
      - virtualMachineName
      - trafficCost
      - transactionCost
      - totalCost
    type: object
    properties:
      virtualMachineId:
        type: string
        format: uuid
      virtualMachineName:
        type: string
      snapshotCost:
        type: number
        format: double
      replicaCost:
        type: number
        format: double
      backupCost:
        type: number
        format: double
      trafficCost:
        type: number
        format: double
      transactionCost:
        type: number
        format: double
      totalCost:
        type: number
        format: double
  RegionsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Region'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  RegionsSortColumns:
    type: string
    enum:
      - nameAsc
      - nameDesk
  RegionsFilters:
    type: object
    properties:
      SearchPattern:
        type: string
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      Sort:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/RegionsSortColumns'
  Region:
    required:
      - id
      - name
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  AmazonInstancesTypesByRegionFilters:
    type: object
    properties:
      offset:
        type: integer
        format: int32
      limit:
        type: integer
        format: int32
      isArm64:
        type: boolean
      virtualizationTypes:
        type: array
        uniqueItems: false
        items:
          type: string
  AmazonInstanceType:
    required:
      - name
      - cpuCount
      - ram
    type: object
    properties:
      name:
        type: string
      cpuCount:
        format: int32
        type: integer
      ram:
        format: int32
        type: integer
      isArm64:
        type: boolean
      virtualizationType:
        type: array
        uniqueItems: false
        items:
          type: string
  AmazonInstanceTypesByRegionPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/AmazonInstanceType'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  PolicyItemDeletedFromAmazon:
    required:
      - id
      - name
      - type
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      type:
        enum:
          - VirtualMachine
          - Tag
          - Region
          - Bucket
        type: string
  VmRestorePointsSortColumns:
    type: string
    enum:
      - pointInTimeAsc
      - pointInTimeDesc
      - backupSizeBytesAsc
      - backupSizeBytesDesc
      - jobTypeAsc
      - jobTypeDesc
  VmRestorePointsFilters:
    type: object
    properties:
      VirtualMachineId:
        type: string
        format: uuid
      OnlyLatest:
        type: boolean
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      Sort:
        type: array
        items:
          $ref: '#/definitions/VmRestorePointsSortColumns'
        uniqueItems: false
  JobTypes:
    enum:
      - Backup
      - Snapshot
      - ManualSnapshot
      - Replica
    type: string
  VmBackupVolume:
    required:
      - diskId
      - backupSizeBytes
      - type
    type: object
    properties:
      diskId:
        type: string
      type:
        $ref: '#/definitions/Ec2DiskTypes'
      backupSizeBytes:
        format: int64
        type: integer
      iops:
        format: int32
        type: integer
      name:
        type: string
      device:
        type: string
      encryptionKey:
        type: string
      encryptionKeyName:
        type: string
  VmRestorePoint:
    required:
      - id
      - backupId
      - backupSizeBytes
      - jobType
      - pointInTime
      - volumes
    type: object
    properties:
      id:
        format: uuid
        type: string
      backupId:
        format: uuid
        type: string
      jobType:
        $ref: '#/definitions/JobTypes'
      pointInTime:
        format: date-time
        type: string
      backupSizeBytes:
        format: int64
        type: integer
      volumes:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/VmBackupVolume'
      regionId:
        format: uuid
        type: string
      availabilityZoneId:
        format: uuid
        type: string
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  VmRestorePointsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/VmRestorePoint'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  VmRestorePointDefaultNetworkSettings:
    required:
      - restorePointId
    type: object
    properties:
      restorePointId:
        type: string
        format: uuid
      networkName:
        type: string
      networkId:
        type: string
      subNetworkName:
        type: string
      subNetworkId:
        type: string
      securityGroupName:
        type: string
      securityGroupId:
        type: string
  DiskBulkRestoreOptions:
    required:
      - volumes
    type: object
    properties:
      reason:
        type: string
      amazonAccountId:
        type: string
        format: uuid
      accessKey:
        type: string
      secretKey:
        type: string
      volumes:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/DiskRestoreOptions'
      toAlternative:
        $ref: '#/definitions/DiskBulkRestoreToAlternativeOptions'
  DiskBulkRestoreToAlternativeOptions:
    required:
      - availabilityZoneId
      - preserveEncryptionForVolumes
    type: object
    properties:
      availabilityZoneId:
        type: string
        format: uuid
      preserveEncryptionForVolumes:
        type: boolean
      encryptionKeyId:
        type: string
  Ec2DiskTypes:
    type: string
    enum:
      - Standart
      - St1
      - Sc1
      - Io1
      - Gp2
  DiskRestoreOptions:
    required:
      - diskId
    type: object
    properties:
      diskId:
        type: string
      name:
        type: string
  ValidationMessage:
    type: object
    properties:
      severity:
        enum:
          - Warning
          - Error
        type: string
      message:
        type: string
      contextId:
        type: string
        format: uuid
  VirtualMachineRestoreOptions:
    type: object
    properties:
      reason:
        type: string
      amazonAccountId:
        type: string
        format: uuid
      accessKey:
        type: string
      secretKey:
        type: string
      startInstance:
        type: boolean
      toAlternative:
        $ref: '#/definitions/VirtualMachineToAlternativeRestoreOptions'
  VirtualMachineToAlternativeRestoreOptions:
    required:
      - regionId
      - name
      - vmType
      - subnetId
      - networkSecurityGroupId
      - preserveEncryptionForVolumes
    type: object
    properties:
      name:
        type: string
      regionId:
        type: string
        format: uuid
      vmType:
        type: string
      subnetId:
        type: string
      networkSecurityGroupId:
        type: string
      preserveEncryptionForVolumes:
        type: boolean
      encryptionKeyId:
        type: string
  SessionTypes:
    enum:
      - Policy
      - Job
      - Task
      - UserPolicy
      - RetentionActivity
      - RestoreTask
      - FLRTask
      - SelfBackupActivity
      - ImportPolicy
      - TombstoneRetention
    type: string
  SessionsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Session'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  Session:
    required:
      - id
      - type
      - status
      - usn
    type: object
    properties:
      id:
        type: string
        format: uuid
      type:
        $ref: '#/definitions/SessionTypes'
      executionStartTime:
        format: date-time
        type: string
      executionStopTime:
        format: date-time
        type: string
      executionDuration:
        type: integer
        format: int64
      status:
        $ref: '#/definitions/SessionStatuses'
      result:
        $ref: '#/definitions/SessionResults'
      reason:
        type: string
      usn:
        format: int64
        type: integer
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
      _embedded:
        $ref: '#/definitions/SessionEmbeddedResources'
  SessionLink:
    required:
      - sessionId
    type: object
    properties:
      sessionId:
        type: string
        format: uuid
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  SessionEmbeddedResources:
    type: object
    properties:
      backupJobInfo:
        $ref: '#/definitions/Link'
      restoreJobInfo:
        $ref: '#/definitions/Link'
      retentionJobDeletedRestorePoints:
        $ref: '#/definitions/Link'
  RetentionJobDeletedRestorePointSortColumns:
    type: string
    enum:
      - nameAsc
      - nameDesc
      - statusAsc
      - statusDesc
      - regionAsc
      - regionDesc
  RetentionJobDeletedRestorePointsFilters:
    type: object
    properties:
      SearchPattern:
        type: string
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      Sort:
        type: array
        items:
          $ref: '#/definitions/RetentionJobDeletedRestorePointSortColumns'
        uniqueItems: false
  SessionItemsStatuses:
    enum:
      - Succeeded
      - Warning
      - Failed
    type: string
  RetentionJobDeletedRestorePoint:
    type: object
    properties:
      name:
        type: string
      status:
        $ref: '#/definitions/SessionItemsStatuses'
      region:
        type: string
      _embedded:
        $ref: '#/definitions/RetentionJobDeletedRestorePointEmbedded'
  RetentionJobDeletedRestorePointEmbedded:
    type: object
    properties:
      region:
        $ref: '#/definitions/Link'
  RetentionJobDeletedRestorePointsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/RetentionJobDeletedRestorePoint'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  ProtectedItemsSortColumns:
    type: string
    enum:
      - virtualMachineNameAsc
      - virtualMachineNameDesc
      - regionAsc
      - regionDesc
  ProtectedItemsFilters:
    type: object
    properties:
      SearchPattern:
        type: string
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      Sort:
        type: array
        items:
          $ref: '#/definitions/ProtectedItemsSortColumns'
        uniqueItems: false
  ProtectedItemEmbedded:
    type: object
    properties:
      virtualMachine:
        $ref: '#/definitions/Link'
      region:
        $ref: '#/definitions/Link'
  ProtectedItem:
    required:
      - id
      - name
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      status:
        $ref: '#/definitions/SessionItemsStatuses'
      region:
        type: string
      _embedded:
        $ref: '#/definitions/ProtectedItemEmbedded'
  ProtectedItemsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/ProtectedItem'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  RestoredItemsSortColumns:
    type: string
    enum:
      - nameAsc
      - nameDesc
      - regionAsc
      - regionDesc
  RestoredItemsFilters:
    type: object
    properties:
      SearchPattern:
        type: string
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      Sort:
        type: array
        items:
          $ref: '#/definitions/RestoredItemsSortColumns'
        uniqueItems: false
  RestoreItemEmbedded:
    type: object
    properties:
      virtualMachine:
        $ref: '#/definitions/Link'
      region:
        $ref: '#/definitions/Link'
  RestoredItem:
    type: object
    properties:
      name:
        type: string
      status:
        $ref: '#/definitions/SessionItemsStatuses'
      regionName:
        type: string
      _embedded:
        $ref: '#/definitions/RestoreItemEmbedded'
  RestoredItemsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/RestoredItem'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  SessionsSortColumns:
    type: string
    enum:
      - startTimeAsc
      - startTimeDesc
      - stopTimeAsc
      - stopTimeDesc
      - durationAsc
      - durationDesc
      - typeAsc
      - typeDesc
      - reasonAsc
      - reasonDesc
      - usnAsc
      - usnDesc
  SessionsFilters:
    type: object
    properties:
      Offset:
        type: integer
        format: int32
        minimum: 0
      Limit:
        type: integer
        format: int32
        minimum: -1
      PolicyId:
        type: string
        format: uuid
      Status:
        type: array
        items:
          $ref: '#/definitions/SessionStatuses'
        uniqueItems: false
      Types:
        type: array
        items:
          $ref: '#/definitions/SessionTypes'
        uniqueItems: false
      FromUtc:
        type: string
        format: date-time
      Usn:
        type: integer
        format: int64
      Sort:
        type: array
        items:
          $ref: '#/definitions/SessionsSortColumns'
        uniqueItems: false
  SessionLog:
    required:
      - sessionId
    type: object
    properties:
      sessionId:
        type: string
        format: uuid
      log:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LogItem'
  FlrOptions:
    type: object
    properties:
      reason:
        type: string
  StartFlrResponse:
    required:
      - sessionId
      - url
    type: object
    properties:
      sessionId:
        type: string
        format: uuid
      url:
        type: string
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  LogItem:
    required:
      - logTime
      - status
    type: object
    properties:
      logTime:
        format: date-time
        type: string
      status:
        enum:
          - NeverExecuted
          - Success
          - Warning
          - Error
          - Pending
          - Canceling
          - Canceled
          - Running
          - RunningWithWarning
          - RunningWithError
        type: string
      message:
        type: string
      executionStartTime:
        format: date-time
        type: string
      executionDuration:
        type: integer
        format: int64
  RetrySettings:
    required:
      - retryTimes
    type: object
    properties:
      retryTimes:
        format: int32
        type: integer
  PolicyNotificationSettings:
    type: object
    properties:
      recipient:
        type: string
      notifyOnSuccess:
        type: boolean
      notifyOnWarning:
        type: boolean
      notifyOnFailure:
        type: boolean
  RetentionSetting:
    required:
      - timeRetentionDuration
      - retentionDurationType
    type: object
    properties:
      timeRetentionDuration:
        format: int32
        type: integer
      retentionDurationType:
        enum:
          - Daily
          - Monthly
          - Points
        type: string
  RetentionSettings:
    type: object
    required:
      - lingeringSnapshotRetentionDisabled
      - keepAllSessions
      - defaultRepositoryRetention
    properties:
      lingeringSnapshotRetentionDisabled:
        type: boolean
      lingeringSnapshotRetention:
        $ref: '#/definitions/RetentionSetting'
      sessionsRetention:
        $ref: '#/definitions/RetentionSetting'
      keepAllSessions:
        type: boolean
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  AmazonConnectionSpec:
    required:
      - RegionId
    type: object
    properties:
      AmazonAccountId:
        type: string
        format: uuid
      accessKey:
        type: string
      secretKey:
        type: string
      RegionId:
        type: string
        format: uuid
  AmazonConnection:
    required:
      - id
    type: object
    properties:
      id:
        type: string
        format: uuid
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  AmazonConnectionsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/AmazonConnection'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  CloudNetworksFilters:
    type: object
    properties:
      Offset:
        type: integer
        format: int32
      Limit:
        type: integer
        format: int32
  CloudNetworksPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/CloudNetwork'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  CloudNetworkStates:
    enum:
      - Available
      - Pending
    type: string
  CloudNetwork:
    required:
      - resourceId
      - cidrBlock
      - state
      - isDefault
    type: object
    properties:
      resourceId:
        type: string
      name:
        type: string
      cidrBlock:
        type: string
      state:
        $ref: '#/definitions/CloudNetworkStates'
      isDefault:
        type: boolean
  CloudSubnetworksFilters:
    type: object
    properties:
      cloudNetworkId:
        type: string
      availabilityZone:
        type: string
        format: uuid
      Offset:
        type: integer
        format: int32
      Limit:
        type: integer
        format: int32
  CloudSubnetworksPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/CloudSubnetwork'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  CloudSubnetwork:
    required:
      - resourceId
      - name
      - cloudNetworkResourceId
      - cidrBlock
    type: object
    properties:
      resourceId:
        type: string
      name:
        type: string
      cloudNetworkResourceId:
        type: string
      cidrBlock:
        type: string
      availabilityZone:
        type: string
  CloudSecurityGroupsFilters:
    type: object
    properties:
      cloudNetworkId:
        type: string
      offset:
        type: integer
        format: int32
      limit:
        type: integer
        format: int32
  CloudSecurityGroupsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/CloudSecurityGroup'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  CloudSecurityGroup:
    required:
      - resourceId
      - cloudNetworkResourceId
      - name
    type: object
    properties:
      resourceId:
        type: string
      cloudNetworkResourceId:
        type: string
      name:
        type: string
  CloudSubnetS3EndpointValidationResult:
    required:
      - isValid
      - details
    type: object
    properties:
      isValid:
        type: boolean
      details:
        type: string
  CloudEncryptionKeysFilters:
    type: object
    properties:
      offset:
        type: integer
        format: int32
      limit:
        type: integer
        format: int32
  CloudEncryptionKeysPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/CloudEncryptionKey'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  CloudEncryptionKey:
    required:
      - arn
      - name
    type: object
    properties:
      arn:
        type: string
      name:
        type: string
  BucketFoldersFiltersOrderColumns:
    enum:
      - NameAsc
      - NameDesc
    type: string
  BucketFoldersFilters:
    type: object
    properties:
      offset:
        type: integer
        format: int32
      limit:
        type: integer
        format: int32
      sort:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/BucketFoldersFiltersOrderColumns'
  BucketFoldersPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/BucketFolder'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  BucketFolder:
    required:
      - name
      - folderId
    type: object
    properties:
      name:
        type: string
      folderId:
        format: uuid
        type: string
  ServiceAccountSettings:
    required:
      - serviceAmazonAccountId
    type: object
    properties:
      serviceAmazonAccountId:
        format: uuid
        type: string
      serviceAmazonAccountName:
        type: string
      serviceAmazonAccountRegionType:
        $ref: '#/definitions/RegionTypes'
      serviceRegion:
        type: string
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  RegionSettingsFilters:
    type: object
    properties:
      offset:
        type: integer
        format: int32
      limit:
        type: integer
        format: int32
  RegionSettingsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/RegionSettings'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  RegionSettingsSpec:
    required:
      - availableZoneId
      - cloudNetworkId
      - cloudSubnetworkId
      - cloudSecurityGroupId
    type: object
    properties:
      availableZoneId:
        format: uuid
        type: string
      cloudNetworkId:
        type: string
      cloudSubnetworkId:
        type: string
      cloudSecurityGroupId:
        type: string
  RegionSettings:
    required:
      - regionId
      - cloudNetworkId
      - cloudSubnetworkId
      - cloudSecurityGroupId
    type: object
    properties:
      regionId:
        format: uuid
        type: string
      regionName:
        type: string
      parentReiognId:
        type: string
        format: uuid
      parentRegionName:
        type: string
      cloudNetworkId:
        type: string
      cloudNetworkName:
        type: string
      cloudSubnetworkId:
        type: string
      cloudSubnetworkName:
        type: string
      cloudSecurityGroupId:
        type: string
      cloudSecurityGroupName:
        type: string
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  LicensedWorkloadsSortColumns:
    type: string
    enum:
      - nameAsc
      - nameDesc
      - lastBackupAsc
      - lastBackupDesc
  LicensedWorkloadsFilters:
    type: object
    properties:
      searchPattern:
        type: string
      offset:
        type: integer
        format: int32
        minimum: 0
      limit:
        type: integer
        format: int32
        minimum: -1
      sort:
        type: array
        items:
          $ref: '#/definitions/LicensedWorkloadsSortColumns'
        uniqueItems: false
  LicenseInfo:
    type: object
    properties:
      licenseType:
        enum:
          - Free
          - Subscription
          - Marketplace
          - Managed
        type: string
      instancesUses:
        format: double
        type: number
      instances:
        format: int32
        type: integer
      licensedTo:
        type: string
      licenseExpires:
        format: date-time
        type: string
      licenseId:
        type: string
      supportId:
        type: string
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  LicensedWorkloadsPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LicensedWorkload'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  LicensedWorkload:
    type: object
    properties:
      id:
        format: uuid
        type: string
      name:
        type: string
      lastBackupTime:
        format: date-time
        type: string
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  LicenseNotificationTypes:
    enum:
      - Expiration
      - Exceed
      - Marketplace
    type: string
  LicenseNotificationSeverities:
    enum:
      - Information
      - Warning
      - Error
    type: string
  LicenseNotificationReply:
    required:
      - replyId
      - notificationType
      - replyText
    type: object
    properties:
      replyId:
        type: string
        format: uuid
      notificationType:
        $ref: '#/definitions/LicenseNotificationTypes'
      replyText:
        type: string
  LicenseNotification:
    required:
      - notificationType
      - notificationSeverity
      - message
    type: object
    properties:
      notificationType:
        $ref: '#/definitions/LicenseNotificationTypes'
      notificationSeverity:
        $ref: '#/definitions/LicenseNotificationSeverities'
      message:
        type: string
      replies:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LicenseNotificationReply'
  LicenseNotifications:
    required:
      - results
    type: object
    properties:
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LicenseNotification'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  ResolveNotificationsSpec:
    required:
      - notificationsToResolve
    type: object
    properties:
      notificationsToResolve:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LicenseNotificationTypes'
      selectedReplies:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LicenseNotificationReply'
  EmailNotifications:
    required:
      - enabled
      - server
      - port
      - from
      - to
      - subject
    type: object
    properties:
      enabled:
        type: boolean
      server:
        type: string
      port:
        type: integer
      useSsl:
        type: boolean
      timeout:
        type: integer
      useCredentials:
        type: boolean
      credentialsId:
        format: uuid
        type: string
      from:
        type: string
      to:
        type: string
      subject:
        type: string
      onSuccess:
        type: boolean
      onWarning:
        type: boolean
      onFailure:
        type: boolean
      enableScheduledNotification:
        type: boolean
      notifyTime:
        format: date-time
        type: string
  EmailNotificationsTestResult:
    required:
      - success
    type: object
    properties:
      success:
        type: boolean
      message:
        type: string
  UsersSortColumns:
    type: string
    enum:
      - nameAsc
      - nameDesc
      - descriptionAsc
      - descriptionDesc
      - isDefaultAsc
      - isDefaultDesc
      - mfaEnabledAsc
      - mfaEnabledDesc
  UsersFilters:
    type: object
    properties:
      searchPattern:
        type: string
      offset:
        type: integer
        format: int32
        minimum: 0
      limit:
        type: integer
        format: int32
        minimum: -1
      sort:
        type: array
        items:
          $ref: '#/definitions/UsersSortColumns'
        uniqueItems: false
  UserCreateSpec:
    required:
      - name
      - description
      - password
    type: object
    properties:
      name:
        minLength: 1
        type: string
      description:
        type: string
      password:
        minLength: 1
        type: string
  UserUpdateSpec:
    type: object
    properties:
      description:
        type: string
      password:
        type: string
      oldPassword:
        type: string
  User:
    required:
      - name
      - description
      - mfaEnabled
      - isDefault
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      mfaEnabled:
        type: boolean
      isDefault:
        type: boolean
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  UsersPage:
    required:
      - totalCount
      - results
    type: object
    properties:
      totalCount:
        format: int32
        type: integer
      results:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/User'
      _links:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Link'
  UserNameValidationSpec:
    required:
      - name
    type: object
    properties:
      name:
        minLength: 1
        type: string
  UserDescriptionValidationSpec:
    required:
      - description
    type: object
    properties:
      description:
        type: string
  UserPasswordValidationSpec:
    required:
      - password
    type: object
    properties:
      password:
        minLength: 1
        type: string
  UserMfaSetup:
    type: object
    properties:
      recreate:
        type: boolean
  UserMfaData:
    type: object
    properties:
      userName:
        type: string
      qrString:
        type: string
      secretKey:
        type: string
      scratchCodes:
        uniqueItems: false
        type: array
        items:
          type: string
      token:
        type: string
  UserMfaAccept:
    required:
      - code
      - token
    type: object
    properties:
      code:
        minLength: 1
        type: string
      token:
        minLength: 1
        type: string
  IsFirstLoginResult:
    type: object
    required:
      - isFirstLogin
    properties:
      isFirstLogin:
        type: boolean
  CheckInstanceIdSpec:
    type: object
    required:
      - instanceId
    properties:
      instanceId:
        type: string
  CheckInstanceIdResult:
    type: object
    required:
      - isValid
    properties:
      isValid:
        type: boolean
  DefaultUserSpec:
    type: object
    required:
      - instance
      - userSpec
    properties:
      instance:
        $ref: '#/definitions/CheckInstanceIdSpec'
      userSpec:
        $ref: '#/definitions/UserCreateSpec'
  LogExportSpec:
    required:
      - exportType
    properties:
      exportLogsType:
        type: string
        enum:
          - LastDays
          - BetweenDates
      days:
        format: int32
        type: integer
      fromDateUtc:
        format: date-time
        type: string
      toDateUtc:
        format: date-time
        type: string
  ProductVersion:
    required:
      - about
      - version
    properties:
      about:
        type: string
      version:
        type: string
  ProductId:
    required:
      - awsid
      - supportid
    properties:
      awsid:
        type: string
      supportid:
        type: string
  CertificateRegenerateSpec:
    properties:
      validBy:
        format: date-time
        type: string
  Certificate:
    required:
      - thumbprint
      - serialNumber
      - issuedTo
      - issuedBy
      - validFrom
      - validBy
      - subject
      - keyAlgorithm
      - keySize
      - automaticallyGenerated
    type: object
    properties:
      thumbprint:
        description: certificate thumpbprint
        type: string
      serialNumber:
        type: string
      keyAlgorithm:
        description: certificate key algorithm
        type: string
      keySize:
        description: certificate key size
        type: string
      subject:
        description: certificate subject
        type: string
      issuedTo:
        description: certificate acquirer
        type: string
      issuedBy:
        description: certificate issuer
        type: string
      validFrom:
        format: date-time
        type: string
      validBy:
        format: date-time
        type: string
      automaticallyGenerated:
        type: boolean
  Certificates:
    type: object
    properties:
      data:
        type: array
        uniqueItems: false
        items:
          $ref: '#/definitions/Certificate'
  DateTimeInfo:
    required:
      - utcDateTime
    type: object
    properties:
      utcDateTime:
        format: date-time
        type: string
  SummaryChangesTrends:
    enum:
      - NotChanged
      - Increased
      - Decreased
    type: string
  SummaryStatistics:
    required:
      - alarmsCount
      - alarmsCountChangesTrend
      - instancesCount
      - instancesCountChangesTrend
      - protectedInstancesCount
      - protectedInstancesCountChangesTrend
      - policiesCount
      - policiesCountChangesTrend
      - repositoriesCount
      - repositoriesCountChangesTrend
    type: object
    properties:
      alarmsCount:
        format: int32
        type: integer
      alarmsCountChangesTrend:
        $ref: '#/definitions/SummaryChangesTrends'
      instancesCount:
        format: int32
        type: integer
      instancesCountChangesTrend:
        $ref: '#/definitions/SummaryChangesTrends'
      protectedInstancesCount:
        format: int32
        type: integer
      protectedInstancesCountChangesTrend:
        $ref: '#/definitions/SummaryChangesTrends'
      policiesCount:
        format: int32
        type: integer
      policiesCountChangesTrend:
        $ref: '#/definitions/SummaryChangesTrends'
      repositoriesCount:
        format: int32
        type: integer
      repositoriesCountChangesTrend:
        $ref: '#/definitions/SummaryChangesTrends'
  TimeZone:
    required:
      - name
      - displayName
    type: object
    properties:
      name:
        type: string
      displayName:
        type: string
  TimeZones:
    required:
      - items
    type: object
    properties:
      items:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/TimeZone'
  DateTimeSettings:
    required:
      - timezone
      - useCustomSettings
    type: object
    properties:
      timezone:
        $ref: '#/definitions/TimeZone'
      useCustomSettings:
        type: boolean
  UserStatus:
    required:
      - connectionsCount
      - repositoryCount
      - policiesCount
      - workerLocationsCount
    type: object
    properties:
      connectionsCount:
        type: integer
      repositoryCount:
        type: integer
      policiesCount:
        type: integer
      workerLocationsCount:
        type: integer
  LicenseAgreements:
    type: object
    properties:
      items:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LicenseAgreement'
  LicenseAgreementTypes:
    type: string
    enum:
      - Eula
      - ThirdPartyAgreement
  LicenseAgreement:
    required:
      - type
    type: object
    properties:
      checksum:
        type: string
      content:
        type: string
      type:
        $ref: '#/definitions/LicenseAgreementTypes'
  LicenseAgreementAcceptResult:
    required:
      - accepted
    type: object
    properties:
      accepted:
        type: boolean
  LicenseAgreementDownloadSpec:
    required:
      - licenseAgreementType
    type: object
    properties:
      licenseAgreementType:
        $ref: '#/definitions/LicenseAgreementTypes'
  LoginGrantTypes:
    enum:
      - password
      - refresh_token
      - authorization_code
      - mfa
    type: string
  LoginSpec:
    required:
      - grant_type
    type: object
    properties:
      username:
        type: string
      password:
        type: string
        format: password
      refresh_token:
        type: string
      code:
        type: string
        description: required if grant_type = authorization_code
      grant_type:
        $ref: '#/definitions/LoginGrantTypes'
      mfa_token:
        type: string
      mfa_code:
        type: string
  RESTLogin:
    type: object
    properties:
      access_token:
        type: string
      token_type:
        type: string
      refresh_token:
        type: string
      expires_in:
        format: int32
        type: integer
      .issued:
        format: date-time
        type: string
      .expires:
        format: date-time
        type: string
      username:
        type: string
      roleName:
        type: string
      mfa_enabled:
        type: boolean
      mfa_token:
        type: string
  AuthorizationCode:
    required:
      - code
    properties:
      code:
        type: string
  UploadCertificateSpec:
    type: object
    required:
      - certificateFile
      - certificatePassword
    properties:
      certificateFile:
        type: string
        format: binary
        x-veeam-type:
          type: formfile
        description: The .PFX certificate to upload.
      certificatePassword:
        type: string
        description: .PFX certificate password
  UploadLicenseSpec:
    type: object
    required:
      - licenseFile
    properties:
      licenseFile:
        type: string
        format: binary
        x-veeam-type:
          type: formfile
        description: The .lic license to upload.
securityDefinitions:
  Bearer:
    name: Authorization
    in: header
    type: apiKey
    description: Bearer \<JWT\>
security:
  - Bearer: []
