/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// EmailNotifications struct for EmailNotifications
type EmailNotifications struct {
	Enabled                     bool    `json:"enabled"`
	Server                      string  `json:"server"`
	Port                        int32   `json:"port"`
	UseSsl                      *bool   `json:"useSsl,omitempty"`
	Timeout                     *int32  `json:"timeout,omitempty"`
	UseCredentials              *bool   `json:"useCredentials,omitempty"`
	CredentialsId               *string `json:"credentialsId,omitempty"`
	From                        string  `json:"from"`
	To                          string  `json:"to"`
	Subject                     string  `json:"subject"`
	OnSuccess                   *bool   `json:"onSuccess,omitempty"`
	OnWarning                   *bool   `json:"onWarning,omitempty"`
	OnFailure                   *bool   `json:"onFailure,omitempty"`
	EnableScheduledNotification *bool   `json:"enableScheduledNotification,omitempty"`
	NotifyTime                  *Time   `json:"notifyTime,omitempty"`
}

// NewEmailNotifications instantiates a new EmailNotifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailNotifications(enabled bool, server string, port int32, from string, to string, subject string) *EmailNotifications {
	this := EmailNotifications{}
	this.Enabled = enabled
	this.Server = server
	this.Port = port
	this.From = from
	this.To = to
	this.Subject = subject
	return &this
}

// NewEmailNotificationsWithDefaults instantiates a new EmailNotifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailNotificationsWithDefaults() *EmailNotifications {
	this := EmailNotifications{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *EmailNotifications) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *EmailNotifications) SetEnabled(v bool) {
	o.Enabled = v
}

// GetServer returns the Server field value
func (o *EmailNotifications) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *EmailNotifications) SetServer(v string) {
	o.Server = v
}

// GetPort returns the Port field value
func (o *EmailNotifications) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *EmailNotifications) SetPort(v int32) {
	o.Port = v
}

// GetUseSsl returns the UseSsl field value if set, zero value otherwise.
func (o *EmailNotifications) GetUseSsl() bool {
	if o == nil || o.UseSsl == nil {
		var ret bool
		return ret
	}
	return *o.UseSsl
}

// GetUseSslOk returns a tuple with the UseSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetUseSslOk() (*bool, bool) {
	if o == nil || o.UseSsl == nil {
		return nil, false
	}
	return o.UseSsl, true
}

// HasUseSsl returns a boolean if a field has been set.
func (o *EmailNotifications) HasUseSsl() bool {
	if o != nil && o.UseSsl != nil {
		return true
	}

	return false
}

// SetUseSsl gets a reference to the given bool and assigns it to the UseSsl field.
func (o *EmailNotifications) SetUseSsl(v bool) {
	o.UseSsl = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *EmailNotifications) GetTimeout() int32 {
	if o == nil || o.Timeout == nil {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetTimeoutOk() (*int32, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *EmailNotifications) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *EmailNotifications) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetUseCredentials returns the UseCredentials field value if set, zero value otherwise.
func (o *EmailNotifications) GetUseCredentials() bool {
	if o == nil || o.UseCredentials == nil {
		var ret bool
		return ret
	}
	return *o.UseCredentials
}

// GetUseCredentialsOk returns a tuple with the UseCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetUseCredentialsOk() (*bool, bool) {
	if o == nil || o.UseCredentials == nil {
		return nil, false
	}
	return o.UseCredentials, true
}

// HasUseCredentials returns a boolean if a field has been set.
func (o *EmailNotifications) HasUseCredentials() bool {
	if o != nil && o.UseCredentials != nil {
		return true
	}

	return false
}

// SetUseCredentials gets a reference to the given bool and assigns it to the UseCredentials field.
func (o *EmailNotifications) SetUseCredentials(v bool) {
	o.UseCredentials = &v
}

// GetCredentialsId returns the CredentialsId field value if set, zero value otherwise.
func (o *EmailNotifications) GetCredentialsId() string {
	if o == nil || o.CredentialsId == nil {
		var ret string
		return ret
	}
	return *o.CredentialsId
}

// GetCredentialsIdOk returns a tuple with the CredentialsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetCredentialsIdOk() (*string, bool) {
	if o == nil || o.CredentialsId == nil {
		return nil, false
	}
	return o.CredentialsId, true
}

// HasCredentialsId returns a boolean if a field has been set.
func (o *EmailNotifications) HasCredentialsId() bool {
	if o != nil && o.CredentialsId != nil {
		return true
	}

	return false
}

// SetCredentialsId gets a reference to the given string and assigns it to the CredentialsId field.
func (o *EmailNotifications) SetCredentialsId(v string) {
	o.CredentialsId = &v
}

// GetFrom returns the From field value
func (o *EmailNotifications) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *EmailNotifications) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *EmailNotifications) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *EmailNotifications) SetTo(v string) {
	o.To = v
}

// GetSubject returns the Subject field value
func (o *EmailNotifications) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *EmailNotifications) SetSubject(v string) {
	o.Subject = v
}

// GetOnSuccess returns the OnSuccess field value if set, zero value otherwise.
func (o *EmailNotifications) GetOnSuccess() bool {
	if o == nil || o.OnSuccess == nil {
		var ret bool
		return ret
	}
	return *o.OnSuccess
}

// GetOnSuccessOk returns a tuple with the OnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetOnSuccessOk() (*bool, bool) {
	if o == nil || o.OnSuccess == nil {
		return nil, false
	}
	return o.OnSuccess, true
}

// HasOnSuccess returns a boolean if a field has been set.
func (o *EmailNotifications) HasOnSuccess() bool {
	if o != nil && o.OnSuccess != nil {
		return true
	}

	return false
}

// SetOnSuccess gets a reference to the given bool and assigns it to the OnSuccess field.
func (o *EmailNotifications) SetOnSuccess(v bool) {
	o.OnSuccess = &v
}

// GetOnWarning returns the OnWarning field value if set, zero value otherwise.
func (o *EmailNotifications) GetOnWarning() bool {
	if o == nil || o.OnWarning == nil {
		var ret bool
		return ret
	}
	return *o.OnWarning
}

// GetOnWarningOk returns a tuple with the OnWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetOnWarningOk() (*bool, bool) {
	if o == nil || o.OnWarning == nil {
		return nil, false
	}
	return o.OnWarning, true
}

// HasOnWarning returns a boolean if a field has been set.
func (o *EmailNotifications) HasOnWarning() bool {
	if o != nil && o.OnWarning != nil {
		return true
	}

	return false
}

// SetOnWarning gets a reference to the given bool and assigns it to the OnWarning field.
func (o *EmailNotifications) SetOnWarning(v bool) {
	o.OnWarning = &v
}

// GetOnFailure returns the OnFailure field value if set, zero value otherwise.
func (o *EmailNotifications) GetOnFailure() bool {
	if o == nil || o.OnFailure == nil {
		var ret bool
		return ret
	}
	return *o.OnFailure
}

// GetOnFailureOk returns a tuple with the OnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetOnFailureOk() (*bool, bool) {
	if o == nil || o.OnFailure == nil {
		return nil, false
	}
	return o.OnFailure, true
}

// HasOnFailure returns a boolean if a field has been set.
func (o *EmailNotifications) HasOnFailure() bool {
	if o != nil && o.OnFailure != nil {
		return true
	}

	return false
}

// SetOnFailure gets a reference to the given bool and assigns it to the OnFailure field.
func (o *EmailNotifications) SetOnFailure(v bool) {
	o.OnFailure = &v
}

// GetEnableScheduledNotification returns the EnableScheduledNotification field value if set, zero value otherwise.
func (o *EmailNotifications) GetEnableScheduledNotification() bool {
	if o == nil || o.EnableScheduledNotification == nil {
		var ret bool
		return ret
	}
	return *o.EnableScheduledNotification
}

// GetEnableScheduledNotificationOk returns a tuple with the EnableScheduledNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetEnableScheduledNotificationOk() (*bool, bool) {
	if o == nil || o.EnableScheduledNotification == nil {
		return nil, false
	}
	return o.EnableScheduledNotification, true
}

// HasEnableScheduledNotification returns a boolean if a field has been set.
func (o *EmailNotifications) HasEnableScheduledNotification() bool {
	if o != nil && o.EnableScheduledNotification != nil {
		return true
	}

	return false
}

// SetEnableScheduledNotification gets a reference to the given bool and assigns it to the EnableScheduledNotification field.
func (o *EmailNotifications) SetEnableScheduledNotification(v bool) {
	o.EnableScheduledNotification = &v
}

// GetNotifyTime returns the NotifyTime field value if set, zero value otherwise.
func (o *EmailNotifications) GetNotifyTime() Time {
	if o == nil || o.NotifyTime == nil {
		var ret Time
		return ret
	}
	return *o.NotifyTime
}

// GetNotifyTimeOk returns a tuple with the NotifyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetNotifyTimeOk() (*Time, bool) {
	if o == nil || o.NotifyTime == nil {
		return nil, false
	}
	return o.NotifyTime, true
}

// HasNotifyTime returns a boolean if a field has been set.
func (o *EmailNotifications) HasNotifyTime() bool {
	if o != nil && o.NotifyTime != nil {
		return true
	}

	return false
}

// SetNotifyTime gets a reference to the given Time and assigns it to the NotifyTime field.
func (o *EmailNotifications) SetNotifyTime(v Time) {
	o.NotifyTime = &v
}

func (o EmailNotifications) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["server"] = o.Server
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if o.UseSsl != nil {
		toSerialize["useSsl"] = o.UseSsl
	}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	if o.UseCredentials != nil {
		toSerialize["useCredentials"] = o.UseCredentials
	}
	if o.CredentialsId != nil {
		toSerialize["credentialsId"] = o.CredentialsId
	}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["to"] = o.To
	}
	if true {
		toSerialize["subject"] = o.Subject
	}
	if o.OnSuccess != nil {
		toSerialize["onSuccess"] = o.OnSuccess
	}
	if o.OnWarning != nil {
		toSerialize["onWarning"] = o.OnWarning
	}
	if o.OnFailure != nil {
		toSerialize["onFailure"] = o.OnFailure
	}
	if o.EnableScheduledNotification != nil {
		toSerialize["enableScheduledNotification"] = o.EnableScheduledNotification
	}
	if o.NotifyTime != nil {
		toSerialize["notifyTime"] = o.NotifyTime
	}
	return json.Marshal(toSerialize)
}

type NullableEmailNotifications struct {
	value *EmailNotifications
	isSet bool
}

func (v NullableEmailNotifications) Get() *EmailNotifications {
	return v.value
}

func (v *NullableEmailNotifications) Set(val *EmailNotifications) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailNotifications(val *EmailNotifications) *NullableEmailNotifications {
	return &NullableEmailNotifications{value: val, isSet: true}
}

func (v NullableEmailNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
