/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// DateTimeSettings struct for DateTimeSettings
type DateTimeSettings struct {
	Timezone TimeZone `json:"timezone"`
	UseCustomSettings bool `json:"useCustomSettings"`
}

// NewDateTimeSettings instantiates a new DateTimeSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateTimeSettings(timezone TimeZone, useCustomSettings bool) *DateTimeSettings {
	this := DateTimeSettings{}
	this.Timezone = timezone
	this.UseCustomSettings = useCustomSettings
	return &this
}

// NewDateTimeSettingsWithDefaults instantiates a new DateTimeSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateTimeSettingsWithDefaults() *DateTimeSettings {
	this := DateTimeSettings{}
	return &this
}

// GetTimezone returns the Timezone field value
func (o *DateTimeSettings) GetTimezone() TimeZone {
	if o == nil {
		var ret TimeZone
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *DateTimeSettings) GetTimezoneOk() (*TimeZone, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *DateTimeSettings) SetTimezone(v TimeZone) {
	o.Timezone = v
}

// GetUseCustomSettings returns the UseCustomSettings field value
func (o *DateTimeSettings) GetUseCustomSettings() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseCustomSettings
}

// GetUseCustomSettingsOk returns a tuple with the UseCustomSettings field value
// and a boolean to check if the value has been set.
func (o *DateTimeSettings) GetUseCustomSettingsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UseCustomSettings, true
}

// SetUseCustomSettings sets field value
func (o *DateTimeSettings) SetUseCustomSettings(v bool) {
	o.UseCustomSettings = v
}

func (o DateTimeSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timezone"] = o.Timezone
	}
	if true {
		toSerialize["useCustomSettings"] = o.UseCustomSettings
	}
	return json.Marshal(toSerialize)
}

type NullableDateTimeSettings struct {
	value *DateTimeSettings
	isSet bool
}

func (v NullableDateTimeSettings) Get() *DateTimeSettings {
	return v.value
}

func (v *NullableDateTimeSettings) Set(val *DateTimeSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTimeSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTimeSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTimeSettings(val *DateTimeSettings) *NullableDateTimeSettings {
	return &NullableDateTimeSettings{value: val, isSet: true}
}

func (v NullableDateTimeSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTimeSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


