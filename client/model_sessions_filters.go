/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SessionsFilters struct for SessionsFilters
type SessionsFilters struct {
	Offset   *int32                 `json:"Offset,omitempty"`
	Limit    *int32                 `json:"Limit,omitempty"`
	PolicyId *string                `json:"PolicyId,omitempty"`
	Status   *[]SessionStatuses     `json:"Status,omitempty"`
	Types    *[]SessionTypes        `json:"Types,omitempty"`
	FromUtc  *Time                  `json:"FromUtc,omitempty"`
	Usn      *int64                 `json:"Usn,omitempty"`
	Sort     *[]SessionsSortColumns `json:"Sort,omitempty"`
}

// NewSessionsFilters instantiates a new SessionsFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionsFilters() *SessionsFilters {
	this := SessionsFilters{}
	return &this
}

// NewSessionsFiltersWithDefaults instantiates a new SessionsFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionsFiltersWithDefaults() *SessionsFilters {
	this := SessionsFilters{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *SessionsFilters) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionsFilters) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *SessionsFilters) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *SessionsFilters) SetOffset(v int32) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SessionsFilters) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionsFilters) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SessionsFilters) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *SessionsFilters) SetLimit(v int32) {
	o.Limit = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *SessionsFilters) GetPolicyId() string {
	if o == nil || o.PolicyId == nil {
		var ret string
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionsFilters) GetPolicyIdOk() (*string, bool) {
	if o == nil || o.PolicyId == nil {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *SessionsFilters) HasPolicyId() bool {
	if o != nil && o.PolicyId != nil {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given string and assigns it to the PolicyId field.
func (o *SessionsFilters) SetPolicyId(v string) {
	o.PolicyId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SessionsFilters) GetStatus() []SessionStatuses {
	if o == nil || o.Status == nil {
		var ret []SessionStatuses
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionsFilters) GetStatusOk() (*[]SessionStatuses, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SessionsFilters) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []SessionStatuses and assigns it to the Status field.
func (o *SessionsFilters) SetStatus(v []SessionStatuses) {
	o.Status = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *SessionsFilters) GetTypes() []SessionTypes {
	if o == nil || o.Types == nil {
		var ret []SessionTypes
		return ret
	}
	return *o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionsFilters) GetTypesOk() (*[]SessionTypes, bool) {
	if o == nil || o.Types == nil {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *SessionsFilters) HasTypes() bool {
	if o != nil && o.Types != nil {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []SessionTypes and assigns it to the Types field.
func (o *SessionsFilters) SetTypes(v []SessionTypes) {
	o.Types = &v
}

// GetFromUtc returns the FromUtc field value if set, zero value otherwise.
func (o *SessionsFilters) GetFromUtc() Time {
	if o == nil || o.FromUtc == nil {
		var ret Time
		return ret
	}
	return *o.FromUtc
}

// GetFromUtcOk returns a tuple with the FromUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionsFilters) GetFromUtcOk() (*Time, bool) {
	if o == nil || o.FromUtc == nil {
		return nil, false
	}
	return o.FromUtc, true
}

// HasFromUtc returns a boolean if a field has been set.
func (o *SessionsFilters) HasFromUtc() bool {
	if o != nil && o.FromUtc != nil {
		return true
	}

	return false
}

// SetFromUtc gets a reference to the given Time and assigns it to the FromUtc field.
func (o *SessionsFilters) SetFromUtc(v Time) {
	o.FromUtc = &v
}

// GetUsn returns the Usn field value if set, zero value otherwise.
func (o *SessionsFilters) GetUsn() int64 {
	if o == nil || o.Usn == nil {
		var ret int64
		return ret
	}
	return *o.Usn
}

// GetUsnOk returns a tuple with the Usn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionsFilters) GetUsnOk() (*int64, bool) {
	if o == nil || o.Usn == nil {
		return nil, false
	}
	return o.Usn, true
}

// HasUsn returns a boolean if a field has been set.
func (o *SessionsFilters) HasUsn() bool {
	if o != nil && o.Usn != nil {
		return true
	}

	return false
}

// SetUsn gets a reference to the given int64 and assigns it to the Usn field.
func (o *SessionsFilters) SetUsn(v int64) {
	o.Usn = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *SessionsFilters) GetSort() []SessionsSortColumns {
	if o == nil || o.Sort == nil {
		var ret []SessionsSortColumns
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionsFilters) GetSortOk() (*[]SessionsSortColumns, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *SessionsFilters) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given []SessionsSortColumns and assigns it to the Sort field.
func (o *SessionsFilters) SetSort(v []SessionsSortColumns) {
	o.Sort = &v
}

func (o SessionsFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Offset != nil {
		toSerialize["Offset"] = o.Offset
	}
	if o.Limit != nil {
		toSerialize["Limit"] = o.Limit
	}
	if o.PolicyId != nil {
		toSerialize["PolicyId"] = o.PolicyId
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.Types != nil {
		toSerialize["Types"] = o.Types
	}
	if o.FromUtc != nil {
		toSerialize["FromUtc"] = o.FromUtc
	}
	if o.Usn != nil {
		toSerialize["Usn"] = o.Usn
	}
	if o.Sort != nil {
		toSerialize["Sort"] = o.Sort
	}
	return json.Marshal(toSerialize)
}

type NullableSessionsFilters struct {
	value *SessionsFilters
	isSet bool
}

func (v NullableSessionsFilters) Get() *SessionsFilters {
	return v.value
}

func (v *NullableSessionsFilters) Set(val *SessionsFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionsFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionsFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionsFilters(val *SessionsFilters) *NullableSessionsFilters {
	return &NullableSessionsFilters{value: val, isSet: true}
}

func (v NullableSessionsFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionsFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
