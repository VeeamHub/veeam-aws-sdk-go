/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SummaryChangesTrends the model 'SummaryChangesTrends'
type SummaryChangesTrends string

// List of SummaryChangesTrends
const (
	SUMMARYCHANGESTRENDS_NOT_CHANGED SummaryChangesTrends = "NotChanged"
	SUMMARYCHANGESTRENDS_INCREASED SummaryChangesTrends = "Increased"
	SUMMARYCHANGESTRENDS_DECREASED SummaryChangesTrends = "Decreased"
)

func (v *SummaryChangesTrends) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SummaryChangesTrends(value)
	for _, existing := range []SummaryChangesTrends{ "NotChanged", "Increased", "Decreased",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SummaryChangesTrends", value)
}

// Ptr returns reference to SummaryChangesTrends value
func (v SummaryChangesTrends) Ptr() *SummaryChangesTrends {
	return &v
}

type NullableSummaryChangesTrends struct {
	value *SummaryChangesTrends
	isSet bool
}

func (v NullableSummaryChangesTrends) Get() *SummaryChangesTrends {
	return v.value
}

func (v *NullableSummaryChangesTrends) Set(val *SummaryChangesTrends) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryChangesTrends) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryChangesTrends) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryChangesTrends(val *SummaryChangesTrends) *NullableSummaryChangesTrends {
	return &NullableSummaryChangesTrends{value: val, isSet: true}
}

func (v NullableSummaryChangesTrends) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryChangesTrends) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

