/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// LicenseInfo struct for LicenseInfo
type LicenseInfo struct {
	LicenseType    *string  `json:"licenseType,omitempty"`
	InstancesUses  *float64 `json:"instancesUses,omitempty"`
	Instances      *int32   `json:"instances,omitempty"`
	LicensedTo     *string  `json:"licensedTo,omitempty"`
	LicenseExpires *Time    `json:"licenseExpires,omitempty"`
	LicenseId      *string  `json:"licenseId,omitempty"`
	SupportId      *string  `json:"supportId,omitempty"`
	Links          *[]Link  `json:"_links,omitempty"`
}

// NewLicenseInfo instantiates a new LicenseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseInfo() *LicenseInfo {
	this := LicenseInfo{}
	return &this
}

// NewLicenseInfoWithDefaults instantiates a new LicenseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseInfoWithDefaults() *LicenseInfo {
	this := LicenseInfo{}
	return &this
}

// GetLicenseType returns the LicenseType field value if set, zero value otherwise.
func (o *LicenseInfo) GetLicenseType() string {
	if o == nil || o.LicenseType == nil {
		var ret string
		return ret
	}
	return *o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetLicenseTypeOk() (*string, bool) {
	if o == nil || o.LicenseType == nil {
		return nil, false
	}
	return o.LicenseType, true
}

// HasLicenseType returns a boolean if a field has been set.
func (o *LicenseInfo) HasLicenseType() bool {
	if o != nil && o.LicenseType != nil {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given string and assigns it to the LicenseType field.
func (o *LicenseInfo) SetLicenseType(v string) {
	o.LicenseType = &v
}

// GetInstancesUses returns the InstancesUses field value if set, zero value otherwise.
func (o *LicenseInfo) GetInstancesUses() float64 {
	if o == nil || o.InstancesUses == nil {
		var ret float64
		return ret
	}
	return *o.InstancesUses
}

// GetInstancesUsesOk returns a tuple with the InstancesUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetInstancesUsesOk() (*float64, bool) {
	if o == nil || o.InstancesUses == nil {
		return nil, false
	}
	return o.InstancesUses, true
}

// HasInstancesUses returns a boolean if a field has been set.
func (o *LicenseInfo) HasInstancesUses() bool {
	if o != nil && o.InstancesUses != nil {
		return true
	}

	return false
}

// SetInstancesUses gets a reference to the given float64 and assigns it to the InstancesUses field.
func (o *LicenseInfo) SetInstancesUses(v float64) {
	o.InstancesUses = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *LicenseInfo) GetInstances() int32 {
	if o == nil || o.Instances == nil {
		var ret int32
		return ret
	}
	return *o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetInstancesOk() (*int32, bool) {
	if o == nil || o.Instances == nil {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *LicenseInfo) HasInstances() bool {
	if o != nil && o.Instances != nil {
		return true
	}

	return false
}

// SetInstances gets a reference to the given int32 and assigns it to the Instances field.
func (o *LicenseInfo) SetInstances(v int32) {
	o.Instances = &v
}

// GetLicensedTo returns the LicensedTo field value if set, zero value otherwise.
func (o *LicenseInfo) GetLicensedTo() string {
	if o == nil || o.LicensedTo == nil {
		var ret string
		return ret
	}
	return *o.LicensedTo
}

// GetLicensedToOk returns a tuple with the LicensedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetLicensedToOk() (*string, bool) {
	if o == nil || o.LicensedTo == nil {
		return nil, false
	}
	return o.LicensedTo, true
}

// HasLicensedTo returns a boolean if a field has been set.
func (o *LicenseInfo) HasLicensedTo() bool {
	if o != nil && o.LicensedTo != nil {
		return true
	}

	return false
}

// SetLicensedTo gets a reference to the given string and assigns it to the LicensedTo field.
func (o *LicenseInfo) SetLicensedTo(v string) {
	o.LicensedTo = &v
}

// GetLicenseExpires returns the LicenseExpires field value if set, zero value otherwise.
func (o *LicenseInfo) GetLicenseExpires() Time {
	if o == nil || o.LicenseExpires == nil {
		var ret Time
		return ret
	}
	return *o.LicenseExpires
}

// GetLicenseExpiresOk returns a tuple with the LicenseExpires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetLicenseExpiresOk() (*Time, bool) {
	if o == nil || o.LicenseExpires == nil {
		return nil, false
	}
	return o.LicenseExpires, true
}

// HasLicenseExpires returns a boolean if a field has been set.
func (o *LicenseInfo) HasLicenseExpires() bool {
	if o != nil && o.LicenseExpires != nil {
		return true
	}

	return false
}

// SetLicenseExpires gets a reference to the given Time and assigns it to the LicenseExpires field.
func (o *LicenseInfo) SetLicenseExpires(v Time) {
	o.LicenseExpires = &v
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise.
func (o *LicenseInfo) GetLicenseId() string {
	if o == nil || o.LicenseId == nil {
		var ret string
		return ret
	}
	return *o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetLicenseIdOk() (*string, bool) {
	if o == nil || o.LicenseId == nil {
		return nil, false
	}
	return o.LicenseId, true
}

// HasLicenseId returns a boolean if a field has been set.
func (o *LicenseInfo) HasLicenseId() bool {
	if o != nil && o.LicenseId != nil {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given string and assigns it to the LicenseId field.
func (o *LicenseInfo) SetLicenseId(v string) {
	o.LicenseId = &v
}

// GetSupportId returns the SupportId field value if set, zero value otherwise.
func (o *LicenseInfo) GetSupportId() string {
	if o == nil || o.SupportId == nil {
		var ret string
		return ret
	}
	return *o.SupportId
}

// GetSupportIdOk returns a tuple with the SupportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetSupportIdOk() (*string, bool) {
	if o == nil || o.SupportId == nil {
		return nil, false
	}
	return o.SupportId, true
}

// HasSupportId returns a boolean if a field has been set.
func (o *LicenseInfo) HasSupportId() bool {
	if o != nil && o.SupportId != nil {
		return true
	}

	return false
}

// SetSupportId gets a reference to the given string and assigns it to the SupportId field.
func (o *LicenseInfo) SetSupportId(v string) {
	o.SupportId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *LicenseInfo) GetLinks() []Link {
	if o == nil || o.Links == nil {
		var ret []Link
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetLinksOk() (*[]Link, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *LicenseInfo) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *LicenseInfo) SetLinks(v []Link) {
	o.Links = &v
}

func (o LicenseInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LicenseType != nil {
		toSerialize["licenseType"] = o.LicenseType
	}
	if o.InstancesUses != nil {
		toSerialize["instancesUses"] = o.InstancesUses
	}
	if o.Instances != nil {
		toSerialize["instances"] = o.Instances
	}
	if o.LicensedTo != nil {
		toSerialize["licensedTo"] = o.LicensedTo
	}
	if o.LicenseExpires != nil {
		toSerialize["licenseExpires"] = o.LicenseExpires
	}
	if o.LicenseId != nil {
		toSerialize["licenseId"] = o.LicenseId
	}
	if o.SupportId != nil {
		toSerialize["supportId"] = o.SupportId
	}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseInfo struct {
	value *LicenseInfo
	isSet bool
}

func (v NullableLicenseInfo) Get() *LicenseInfo {
	return v.value
}

func (v *NullableLicenseInfo) Set(val *LicenseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseInfo(val *LicenseInfo) *NullableLicenseInfo {
	return &NullableLicenseInfo{value: val, isSet: true}
}

func (v NullableLicenseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
