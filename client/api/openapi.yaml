openapi: 3.0.1
info:
  title: Veeam Backup for AWS public API 1.0
  version: 1.0-rev0
servers:
- url: /
security:
- Bearer: []
paths:
  /api/v1/test:
    post:
      operationId: Test
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Test
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/accounts/standard:
    get:
      operationId: StandardAccountsGetAll
      parameters:
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/StandardAccountsFilters'
        x-veeam-spec:
          $ref: '#/definitions/StandardAccountsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/StandardAccountsFilters'
        x-veeam-spec:
          $ref: '#/definitions/StandardAccountsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/StandardAccountsFilters'
        x-veeam-spec:
          $ref: '#/definitions/StandardAccountsFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            type: string
          type: array
          x-veeam-spec:
            $ref: '#/definitions/StandardAccountsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/StandardAccountsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardAccountsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/StandardAccountsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - SMTPServerCredentialsRecords
      x-veeam-authorize:
        roles:
        - Portal Administrator
    post:
      operationId: AddStandardAccount
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/StandardAccountCreateSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/StandardAccountCreateSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/StandardAccountCreateSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/StandardAccountCreateSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/StandardAccountCreateSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardAccount'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/StandardAccount'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - SMTPServerCredentialsRecords
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: standardAccount
  /api/v1/accounts/standard/{standardAccountId}:
    delete:
      operationId: DeleteStandardAccount
      parameters:
      - in: path
        name: standardAccountId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - SMTPServerCredentialsRecords
      x-veeam-authorize:
        roles:
        - Portal Administrator
    get:
      operationId: StandardAccountsGetOneById
      parameters:
      - in: path
        name: standardAccountId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardAccount'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/StandardAccount'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - SMTPServerCredentialsRecords
      x-veeam-authorize:
        roles:
        - Portal Administrator
    put:
      operationId: UpdateStandardAccount
      parameters:
      - in: path
        name: standardAccountId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/StandardAccountUpdateSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/StandardAccountUpdateSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/StandardAccountUpdateSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/StandardAccountUpdateSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/StandardAccountUpdateSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardAccount'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/StandardAccount'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - SMTPServerCredentialsRecords
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: standardAccount
  /api/v1/accounts/standard/validateName:
    post:
      operationId: ValidateStandardAccountName
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandardAccountNameValidationSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/problem+json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - SMTPServerCredentialsRecords
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: validationSpec
  /api/v1/accounts/standard/export:
    post:
      operationId: ExportStandardAccounts
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
            application/xml:
              schema:
                format: binary
                type: string
          description: Success
        "401":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - SMTPServerCredentialsRecords
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/accounts/amazon:
    get:
      operationId: AmazonAccountsGetAll
      parameters:
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/AmazonAccountsFilters'
        x-veeam-spec:
          $ref: '#/definitions/AmazonAccountsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/AmazonAccountsFilters'
        x-veeam-spec:
          $ref: '#/definitions/AmazonAccountsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/AmazonAccountsFilters'
        x-veeam-spec:
          $ref: '#/definitions/AmazonAccountsFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            type: string
          type: array
          x-veeam-spec:
            $ref: '#/definitions/AmazonAccountsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/AmazonAccountsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmazonAccountsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AmazonAccountsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - IAMRoles
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
    post:
      operationId: AddAmazonAccount
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AmazonAccountCreateSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/AmazonAccountCreateSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/AmazonAccountCreateSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AmazonAccountCreateSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/AmazonAccountCreateSpec'
          application/problem+json:
            schema:
              $ref: '#/components/schemas/AmazonAccountCreateSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmazonAccount'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AmazonAccount'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - IAMRoles
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: amazonAccount
  /api/v1/accounts/amazon/validateName:
    post:
      operationId: ValidateAmazonAccountName
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmazonAccountNameValidationSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/problem+json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - IAMRoles
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: validationSpec
  /api/v1/accounts/amazon/{amazonAccountId}/validateDelete:
    post:
      operationId: ValidateDeleteAmazonAccount
      parameters:
      - in: path
        name: amazonAccountId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/problem+json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - IAMRoles
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/accounts/amazon/{amazonAccountId}:
    delete:
      operationId: DeleteAmazonAccount
      parameters:
      - in: path
        name: amazonAccountId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - IAMRoles
    get:
      operationId: AmazonAccountsGetOneById
      parameters:
      - in: path
        name: amazonAccountId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmazonAccount'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AmazonAccount'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - IAMRoles
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
    put:
      operationId: UpdateAmazonAccount
      parameters:
      - in: path
        name: amazonAccountId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AmazonAccountUpdateSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/AmazonAccountUpdateSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/AmazonAccountUpdateSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AmazonAccountUpdateSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/AmazonAccountUpdateSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmazonAccount'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AmazonAccount'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - IAMRoles
      x-codegen-request-body-name: amazonAccount
  /api/v1/accounts/amazon/{amazonAccountId}/rescan:
    post:
      operationId: RescanAmazonAccount
      parameters:
      - in: path
        name: amazonAccountId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RescanCloudAccountSpec'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLink'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLink'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - IAMRoles
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: rescanCloudAccountSpec
  /api/v1/accounts/amazon/export:
    post:
      operationId: ExportAmazonAccounts
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
            application/xml:
              schema:
                format: binary
                type: string
          description: Success
        "401":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - IAMRoles
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/cloudInfrastructure/tags:
    get:
      operationId: Tags
      parameters:
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/TagsFilters'
        x-veeam-spec:
          $ref: '#/definitions/TagsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/TagsFilters'
        x-veeam-spec:
          $ref: '#/definitions/TagsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/TagsFilters'
        x-veeam-spec:
          $ref: '#/definitions/TagsFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - keyAsc
            - keyDesc
            type: string
          type: array
          x-veeam-spec:
            $ref: '#/definitions/TagsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/TagsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TagsPage'
            application/json:
              schema:
                $ref: '#/components/schemas/TagsPage'
            text/json:
              schema:
                $ref: '#/components/schemas/TagsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/TagsPage'
          description: Success
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Tags
  /api/v1/cloudInfrastructure/tags/{tagId}:
    get:
      operationId: Tag
      parameters:
      - in: path
        name: tagId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Tag'
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
            text/json:
              schema:
                $ref: '#/components/schemas/Tag'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: Success
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Tags
  /api/v1/virtualMachines:
    get:
      operationId: VirtualMachines
      parameters:
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        x-veeam-spec:
          $ref: '#/definitions/VirtualMachinesFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        x-veeam-spec:
          $ref: '#/definitions/VirtualMachinesFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        x-veeam-spec:
          $ref: '#/definitions/VirtualMachinesFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            - locationAsc
            - locationDesc
            type: string
          type: array
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/VirtualMachinesFilters'
      - explode: true
        in: query
        name: ProtectionStatus
        schema:
          items:
            enum:
            - Protected
            - Unprotected
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/VirtualMachinesFilters'
      - explode: true
        in: query
        name: BuckupDestination
        schema:
          items:
            enum:
            - Snapshot
            - AwsBlob
            - ManualSnapshot
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/VirtualMachinesFilters'
      - in: query
        name: BackupState
        schema:
          enum:
          - OnlyBackedUp
          - OnlyNotBackedUp
          - All
          type: string
          x-veeam-spec:
            $ref: '#/definitions/VirtualMachinesFilters'
        x-veeam-spec:
          $ref: '#/definitions/VirtualMachinesFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachinesPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/VirtualMachinesPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Instances
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/virtualMachines/{virtualMachineId}:
    get:
      operationId: VirtualMachineById
      parameters:
      - in: path
        name: virtualMachineId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachine'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/VirtualMachine'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Instances
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/virtualMachines/{virtualMachineId}/takeSnapshot:
    post:
      operationId: TakeSnapshot
      parameters:
      - in: path
        name: virtualMachineId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VirtualMachineSnapshotSpec'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLink'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLink'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Instances
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: snapshotSpec
  /api/v1/virtualMachines/{virtualMachineId}/deleteSnapshots:
    post:
      operationId: DeleteVirtualMachineSnapshots
      parameters:
      - in: path
        name: virtualMachineId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLink'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLink'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Instances
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/virtualMachines/{virtualMachineId}/deleteBackups:
    post:
      operationId: DeleteVirtualMachineBackups
      parameters:
      - in: path
        name: virtualMachineId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLink'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLink'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Instances
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/virtualMachines/export:
    post:
      operationId: ExportVirtualMachines
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
            application/xml:
              schema:
                format: binary
                type: string
          description: Success
        "401":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Instances
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/cloudInfrastructure/buckets:
    get:
      operationId: Buckets
      parameters:
      - in: query
        name: AmazonAccountId
        schema:
          format: uuid
          type: string
          x-veeam-spec:
            $ref: '#/definitions/BucketsFilters'
        x-veeam-spec:
          $ref: '#/definitions/BucketsFilters'
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/BucketsFilters'
        x-veeam-spec:
          $ref: '#/definitions/BucketsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/BucketsFilters'
        x-veeam-spec:
          $ref: '#/definitions/BucketsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/BucketsFilters'
        x-veeam-spec:
          $ref: '#/definitions/BucketsFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/BucketsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/BucketsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BucketsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Buckets
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/cloudInfrastructure/buckets/{bucketId}:
    get:
      operationId: BucketById
      parameters:
      - in: path
        name: bucketId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Bucket'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Buckets
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/cloudInfrastructure/buckets/rescan/{amazonAccountId}:
    post:
      operationId: RescanBucket
      parameters:
      - in: path
        name: amazonAccountId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLink'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLink'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Buckets
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/cloudInfrastructure/buckets/{bucketId}/folders:
    get:
      operationId: GetBucketFolders
      parameters:
      - in: path
        name: bucketId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        x-veeam-spec:
          $ref: '#/definitions/BucketFoldersFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        x-veeam-spec:
          $ref: '#/definitions/BucketFoldersFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - NameAsc
            - NameDesc
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/BucketFoldersFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketFoldersPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BucketFoldersPage'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Buckets
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/cloudInfrastructure/buckets/{bucketId}/folders/{folderName}:
    get:
      operationId: GetBucketFolder
      parameters:
      - in: path
        name: bucketId
        required: true
        schema:
          format: uuid
          type: string
      - in: path
        name: folderName
        required: true
        schema:
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketFolder'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BucketFolder'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Buckets
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/cloudInfrastructure/regions:
    get:
      operationId: GetAllRegions
      parameters:
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesk
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RegionsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Regions
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/cloudInfrastructure/regions/{regionId}:
    get:
      operationId: GetRegionById
      parameters:
      - in: path
        name: regionId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Region'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Regions
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/cloudInfrastructure/regions/{regionId}/zones:
    get:
      operationId: GetInnerRegions
      parameters:
      - in: path
        name: regionId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesk
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RegionsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Regions
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/cloudInfrastructure/regions/{regionId}/instancesTypes:
    get:
      operationId: GetInstancesTypesByRegion
      parameters:
      - in: path
        name: regionId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
        x-veeam-spec:
          $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
      - in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
        x-veeam-spec:
          $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
      - in: query
        name: isArm64
        schema:
          type: boolean
          x-veeam-spec:
            $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
        x-veeam-spec:
          $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
      - explode: false
        in: query
        name: virtualizationTypes
        schema:
          items:
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/AmazonInstancesTypesByRegionFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AmazonInstanceTypesByRegionPage'
            application/json:
              schema:
                $ref: '#/components/schemas/AmazonInstanceTypesByRegionPage'
            text/json:
              schema:
                $ref: '#/components/schemas/AmazonInstanceTypesByRegionPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AmazonInstanceTypesByRegionPage'
          description: Success
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Regions
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/repositories:
    get:
      operationId: RepositoriesGetAll
      parameters:
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RepositoriesFilters'
        x-veeam-spec:
          $ref: '#/definitions/RepositoriesFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RepositoriesFilters'
        x-veeam-spec:
          $ref: '#/definitions/RepositoriesFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            - descriptionAsc
            - descriptionDesc
            - amazonAccountNameAsc
            - amazonAccountNameDesc
            - amazonBucketAsc
            - amazonBucketDesc
            - amazonStorageFolderAsc
            - amazonStorageFolderDesc
            - regionAsc
            - regionDesc
            - encryptionAsc
            - encryptionDesc
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/RepositoriesFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/RepositoriesFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RepositoriesFilters'
        x-veeam-spec:
          $ref: '#/definitions/RepositoriesFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoriesPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RepositoriesPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Repositories
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
    post:
      operationId: CreateRepository
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RepositoryCreateSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryCreateSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/RepositoryCreateSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RepositoryCreateSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/RepositoryCreateSpec'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Repositories
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: repository
  /api/v1/repositories/{repositoryId}:
    delete:
      operationId: DeleteRepository
      parameters:
      - in: path
        name: repositoryId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The repository is in use by one or more policies.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Repositories
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
    get:
      operationId: RepositoriesGetOneById
      parameters:
      - in: path
        name: repositoryId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Repositories
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
    put:
      operationId: UpdateRepository
      parameters:
      - in: path
        name: repositoryId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RepositoryUpdateSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryUpdateSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/RepositoryUpdateSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RepositoryUpdateSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/RepositoryUpdateSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Repositories
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: repository
  /api/v1/repositories/{repositoryId}/rescan:
    post:
      operationId: RescanRepository
      parameters:
      - in: path
        name: repositoryId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLink'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLink'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Repositories
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/repositories/settings/validate:
    post:
      operationId: RepositoryValidateSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryCreateSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/problem+json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Repositories
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: repository
  /api/v1/repositories/{repositoryId}/checkPassword:
    post:
      operationId: RepositoryPasswordIsCorrect
      parameters:
      - in: path
        name: repositoryId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryPasswordValidationSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryPasswordValidationResult'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RepositoryPasswordValidationResult'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Repositories
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: repositoryPassword
  /api/v1/repositories/export:
    post:
      operationId: ExportRepositories
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
            application/xml:
              schema:
                format: binary
                type: string
          description: Success
        "401":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Repositories
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/policies:
    get:
      operationId: PoliciesGetAll
      parameters:
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        x-veeam-spec:
          $ref: '#/definitions/PoliciesFilters'
      - in: query
        name: VirtualMachineId
        schema:
          format: uuid
          type: string
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        x-veeam-spec:
          $ref: '#/definitions/PoliciesFilters'
      - explode: true
        in: query
        name: LastPolicySessionStatus
        schema:
          items:
            enum:
            - Running
            - NeverExecuted
            - Succeeded
            - Warning
            - Failed
            - Canceled
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/PoliciesFilters'
      - explode: true
        in: query
        name: PolicyStatus
        schema:
          items:
            enum:
            - Enabled
            - Disabled
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/PoliciesFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - priorityAsc
            - priorityDesc
            - nameAsc
            - nameDesc
            - usnAsc
            - usnDesc
            type: string
          type: array
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/PoliciesFilters'
      - in: query
        name: Usn
        schema:
          format: int64
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        x-veeam-spec:
          $ref: '#/definitions/PoliciesFilters'
      - in: query
        name: RepositoryId
        schema:
          format: uuid
          type: string
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        x-veeam-spec:
          $ref: '#/definitions/PoliciesFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        x-veeam-spec:
          $ref: '#/definitions/PoliciesFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/PoliciesFilters'
        x-veeam-spec:
          $ref: '#/definitions/PoliciesFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoliciesPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/PoliciesPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
    post:
      operationId: CreatePolicy
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PolicySpec'
          application/json:
            schema:
              $ref: '#/components/schemas/PolicySpec'
          text/json:
            schema:
              $ref: '#/components/schemas/PolicySpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PolicySpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/PolicySpec'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: policy
  /api/v1/policies/{policyId}:
    delete:
      operationId: DeletePolicy
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Failed to delete policy, verify it is not in use and try again.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
    get:
      operationId: PoliciesGetOneById
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
    put:
      operationId: UpdatePolicy
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Policy'
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
          text/json:
            schema:
              $ref: '#/components/schemas/Policy'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Policy'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/Policy'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: policy
  /api/v1/policies/{policyId}/selectedItems:
    get:
      operationId: PoliciesGetSelectedItemsById
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/PolicyItemsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/PolicyItemsFilters'
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/PolicyItemsFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            type: string
          type: array
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/PolicyItemsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyItemsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/PolicyItemsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
  /api/v1/policies/{policyId}/regions:
    get:
      operationId: PoliciesGetRegionsById
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesk
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/RegionsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/RegionsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RegionsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
  /api/v1/policies/{policyId}/excludedItems:
    get:
      operationId: PoliciesGetExcludedItemsById
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/PolicyItemsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/PolicyItemsFilters'
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/PolicyItemsFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            type: string
          type: array
          x-veeam-spec:
            $ref: '#/definitions/PolicyItemsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/PolicyItemsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyItemsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/PolicyItemsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
  /api/v1/policies/{policyId}/enable:
    post:
      operationId: EnablePolicy
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/policies/{policyId}/disable:
    post:
      operationId: DisablePolicy
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/policies/{policyId}/start:
    post:
      operationId: StartPolicy
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLink'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLink'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The policy has already started.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/policies/{policyId}/stop:
    post:
      operationId: StopPolicy
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "202":
          content: {}
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/policies/{policyId}/export:
    get:
      operationId: ExportPolicy
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyExportModel'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/PolicyExportModel'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
  /api/v1/policies/import:
    post:
      operationId: ImportPolicy
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyExportModel'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLink'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLink'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: policySpec
  /api/v1/policies/validate:
    post:
      operationId: Validate
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PolicySpec'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/problem+json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
          description: Success
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: validationSpec
  /api/v1/policies/orderPriorities:
    post:
      operationId: PolicyOrderPriorityOfPolicies
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoliciesPrioritySpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: policiesPrioritySpec
  /api/v1/policies/export:
    post:
      operationId: ExportPolicies
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
            application/xml:
              schema:
                format: binary
                type: string
          description: Success
        "401":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/policies/{policyId}/cost:
    get:
      operationId: GetPolicyCost
      parameters:
      - in: path
        name: policyId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostEstimationsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CostEstimationsPage'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Policies
  /api/v1/costEstimation:
    post:
      operationId: GetCostEstimation
      parameters:
      - in: query
        name: VirtualMachineNameFilter
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/CostEstimationFilters'
        x-veeam-spec:
          $ref: '#/definitions/CostEstimationFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/CostEstimationFilters'
        x-veeam-spec:
          $ref: '#/definitions/CostEstimationFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/CostEstimationFilters'
        x-veeam-spec:
          $ref: '#/definitions/CostEstimationFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - virtualMachineNameAsc
            - virtualMachineNameDesc
            - snapshotCostAsc
            - snapshotCostDesc
            - replicaCostAsc
            - replicaCostDesc
            - backupCostAsc
            - backupCostDesc
            - trafficAsc
            - trafficDesc
            - transactionAsc
            - transactionDesc
            - totalAsc
            - totalDesc
            type: string
          type: array
          x-veeam-spec:
            $ref: '#/definitions/CostEstimationFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/CostEstimationFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PolicySpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostEstimationsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CostEstimationsPage'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - CostEstimation
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: policySpec
  /api/v1/costEstimation/export:
    post:
      operationId: ExportCostEstimation
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PolicySpec'
        required: true
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
            application/xml:
              schema:
                format: binary
                type: string
          description: Success
        "401":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - CostEstimation
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
      x-codegen-request-body-name: policySpec
  /api/v1/sessions:
    get:
      operationId: GetSessions
      parameters:
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/SessionsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/SessionsFilters'
      - in: query
        name: PolicyId
        schema:
          format: uuid
          type: string
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/SessionsFilters'
      - explode: true
        in: query
        name: Status
        schema:
          items:
            enum:
            - Running
            - NeverExecuted
            - Succeeded
            - Warning
            - Failed
            - Canceled
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/SessionsFilters'
      - explode: true
        in: query
        name: Types
        schema:
          items:
            enum:
            - Policy
            - Job
            - Task
            - UserPolicy
            - RetentionActivity
            - RestoreTask
            - FLRTask
            - SelfBackupActivity
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/SessionsFilters'
      - in: query
        name: FromUtc
        schema:
          format: date-time
          type: string
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/SessionsFilters'
      - in: query
        name: ToUtc
        schema:
          format: date-time
          type: string
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/SessionsFilters'
      - in: query
        name: Usn
        schema:
          format: int64
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/SessionsFilters'
      - explode: true
        in: query
        name: Sort
        schema:
          items:
            enum:
            - startTimeAsc
            - startTimeDesc
            - stopTimeAsc
            - stopTimeDesc
            - durationAsc
            - durationDesc
            - typeAsc
            - typeDesc
            - reasonAsc
            - reasonDesc
            - usnAsc
            - usnDesc
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/SessionsFilters'
      - in: query
        name: VmId
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/SessionsFilters'
        x-veeam-spec:
          $ref: '#/definitions/SessionsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Sessions
  /api/v1/sessions/{retentionSessionId}/deletedItems:
    get:
      operationId: GetRetentionSessionDeletedRestorePoints
      parameters:
      - in: path
        name: retentionSessionId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
      - explode: true
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            - statusAsc
            - statusDesc
            - regionAsc
            - regionDesc
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RetentionJobDeletedRestorePointsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionJobDeletedRestorePointsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RetentionJobDeletedRestorePointsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Sessions
  /api/v1/sessions/{backupSessionId}/protectedItems:
    get:
      operationId: GetBackupSessionProtectedItems
      parameters:
      - in: path
        name: backupSessionId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/ProtectedItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/ProtectedItemsFilters'
      - explode: true
        in: query
        name: Sort
        schema:
          items:
            enum:
            - virtualMachineNameAsc
            - virtualMachineNameDesc
            - regionAsc
            - regionDesc
            - succeededAsc
            - succeededDesc
            - failedAsc
            - failedDesc
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/ProtectedItemsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/ProtectedItemsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/ProtectedItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/ProtectedItemsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/ProtectedItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/ProtectedItemsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtectedItemsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProtectedItemsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Sessions
  /api/v1/sessions/{restoreSessionId}/restoredItems:
    get:
      operationId: GetRestoreSessionRestoredItems
      parameters:
      - in: path
        name: restoreSessionId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/RestoredItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RestoredItemsFilters'
      - explode: true
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            - regionAsc
            - regionDesc
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/RestoredItemsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/RestoredItemsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RestoredItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RestoredItemsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RestoredItemsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RestoredItemsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoredItemsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RestoredItemsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Sessions
  /api/v1/sessions/{sessionId}:
    get:
      operationId: GetSessionById
      parameters:
      - in: path
        name: sessionId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Sessions
  /api/v1/sessions/{sessionId}/log:
    get:
      operationId: GetSessionLog
      parameters:
      - in: path
        name: sessionId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLog'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLog'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Sessions
  /api/v1/sessions/{sessionId}/stop:
    post:
      operationId: StopJob
      parameters:
      - in: path
        name: sessionId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "202":
          content: {}
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Sessions
  /api/v1/sessions/export:
    post:
      operationId: ExportSessions
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
            application/xml:
              schema:
                format: binary
                type: string
          description: Success
        "401":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Sessions
  /api/v1/amazonConnections:
    get:
      operationId: GetAllAmazonConnections
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmazonConnectionsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AmazonConnectionsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
    post:
      operationId: CreateAmazonConnection
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AmazonConnectionSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmazonConnection'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AmazonConnection'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: amazonConnectionSpec
  /api/v1/amazonConnections/{amazonConnectionId}:
    delete:
      operationId: DeleteAmazonConnection
      parameters:
      - in: path
        name: amazonConnectionId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "204":
          content: {}
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
    get:
      operationId: GetAmazonConnectionById
      parameters:
      - in: path
        name: amazonConnectionId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmazonConnection'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AmazonConnection'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/amazonConnections/{amazonConnectionId}/cloudNetworks:
    get:
      operationId: BrowseCloudNetworks
      parameters:
      - in: path
        name: amazonConnectionId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/CloudNetworksFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudNetworksFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/CloudNetworksFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudNetworksFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudNetworksPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CloudNetworksPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/amazonConnections/{amazonConnectionId}/cloudSubnetworks:
    get:
      operationId: BrowseCloudSubnetworks
      parameters:
      - in: path
        name: amazonConnectionId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: cloudNetworkId
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/CloudSubnetworksFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudSubnetworksFilters'
      - in: query
        name: availabilityZone
        schema:
          format: uuid
          type: string
          x-veeam-spec:
            $ref: '#/definitions/CloudSubnetworksFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudSubnetworksFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/CloudSubnetworksFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudSubnetworksFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/CloudSubnetworksFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudSubnetworksFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudSubnetworksPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CloudSubnetworksPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/amazonConnections/{amazonConnectionId}/cloudSecurityGroups:
    get:
      operationId: BrowseCloudSecurityGroups
      parameters:
      - in: path
        name: amazonConnectionId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: cloudNetworkId
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/CloudSecurityGroupsFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudSecurityGroupsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/CloudSecurityGroupsFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudSecurityGroupsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/CloudSecurityGroupsFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudSecurityGroupsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudSecurityGroupsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CloudSecurityGroupsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/amazonConnections/{amazonConnectionId}/availabilityZones:
    get:
      operationId: BrowseAvailabilityZones
      parameters:
      - in: path
        name: amazonConnectionId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RegionsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/amazonConnections/{amazonConnectionId}/validateS3endpoint:
    get:
      operationId: ValidateS3Endpoint
      parameters:
      - in: path
        name: amazonConnectionId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: subnetId
        required: true
        schema:
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudSubnetS3EndpointValidationResult'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CloudSubnetS3EndpointValidationResult'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/amazonConnections/{amazonConnectionId}/cloudEncryptionKeys:
    get:
      operationId: BrowseEncryptionKeys
      parameters:
      - in: path
        name: amazonConnectionId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/CloudEncryptionKeysFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudEncryptionKeysFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/CloudEncryptionKeysFilters'
        x-veeam-spec:
          $ref: '#/definitions/CloudEncryptionKeysFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudEncryptionKeysPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CloudEncryptionKeysPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/amazonConnections/{amazonConnectionId}/browseBucketFolders/{bucketId}:
    get:
      operationId: BrowseBucketFolders
      parameters:
      - in: path
        name: amazonConnectionId
        required: true
        schema:
          format: uuid
          type: string
      - in: path
        name: bucketId
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: Offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        x-veeam-spec:
          $ref: '#/definitions/BucketFoldersFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        x-veeam-spec:
          $ref: '#/definitions/BucketFoldersFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - NameAsc
            - NameDesc
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/BucketFoldersFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/BucketFoldersFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketFoldersPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BucketFoldersPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - AmazonConnections
      x-veeam-authorize:
        roles:
        - Portal Administrator
        - Portal Operator
  /api/v1/vmRestorePoints:
    get:
      operationId: RestorePointsGetAll
      parameters:
      - in: query
        name: VirtualMachineId
        schema:
          format: uuid
          type: string
          x-veeam-spec:
            $ref: '#/definitions/VmRestorePointsFilters'
        x-veeam-spec:
          $ref: '#/definitions/VmRestorePointsFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/VmRestorePointsFilters'
        x-veeam-spec:
          $ref: '#/definitions/VmRestorePointsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/VmRestorePointsFilters'
        x-veeam-spec:
          $ref: '#/definitions/VmRestorePointsFilters'
      - explode: false
        in: query
        name: Sort
        schema:
          items:
            enum:
            - pointInTimeAsc
            - pointInTimeDesc
            - backupSizeBytesAsc
            - backupSizeBytesDesc
            - jobTypeAsc
            - jobTypeDesc
            type: string
          type: array
          x-veeam-spec:
            $ref: '#/definitions/VmRestorePointsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/VmRestorePointsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmRestorePointsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/VmRestorePointsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - VmRestorePoints
  /api/v1/vmRestorePoints/{vmRestorePointId}:
    get:
      operationId: RestorePointsGetOneById
      parameters:
      - in: path
        name: vmRestorePointId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmRestorePoint'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/VmRestorePoint'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - VmRestorePoints
  /api/v1/vmRestorePoints/{vmRestorePointId}/restoreDisk:
    post:
      operationId: RestoreDisk
      parameters:
      - in: path
        name: vmRestorePointId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DiskBulkRestoreOptions'
          application/json:
            schema:
              $ref: '#/components/schemas/DiskBulkRestoreOptions'
          text/json:
            schema:
              $ref: '#/components/schemas/DiskBulkRestoreOptions'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DiskBulkRestoreOptions'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/DiskBulkRestoreOptions'
        required: false
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLink'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLink'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - VmRestorePoints
      x-codegen-request-body-name: options
  /api/v1/vmRestorePoints/{vmRestorePointId}/validateRestoreDisk:
    post:
      operationId: ValidateRestoreDisk
      parameters:
      - in: path
        name: vmRestorePointId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DiskBulkRestoreOptions'
          application/json:
            schema:
              $ref: '#/components/schemas/DiskBulkRestoreOptions'
          text/json:
            schema:
              $ref: '#/components/schemas/DiskBulkRestoreOptions'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DiskBulkRestoreOptions'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/DiskBulkRestoreOptions'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/problem+json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - VmRestorePoints
      x-codegen-request-body-name: validationConfig
  /api/v1/vmRestorePoints/{vmRestorePointId}/restoreVm:
    post:
      operationId: RestoreVm
      parameters:
      - in: path
        name: vmRestorePointId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/VirtualMachineRestoreOptions'
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualMachineRestoreOptions'
          text/json:
            schema:
              $ref: '#/components/schemas/VirtualMachineRestoreOptions'
          application/*+json:
            schema:
              $ref: '#/components/schemas/VirtualMachineRestoreOptions'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/VirtualMachineRestoreOptions'
        required: false
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLink'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SessionLink'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - VmRestorePoints
      x-codegen-request-body-name: vmRestoreOptions
  /api/v1/vmRestorePoints/{vmRestorePointId}/validateRestoreVm:
    post:
      operationId: ValidateRestoreVm
      parameters:
      - in: path
        name: vmRestorePointId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/VirtualMachineRestoreOptions'
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualMachineRestoreOptions'
          text/json:
            schema:
              $ref: '#/components/schemas/VirtualMachineRestoreOptions'
          application/*+json:
            schema:
              $ref: '#/components/schemas/VirtualMachineRestoreOptions'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/VirtualMachineRestoreOptions'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/problem+json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - VmRestorePoints
      x-codegen-request-body-name: validationConfig
  /api/v1/vmRestorePoints/{vmRestorePointId}/restoreFile:
    post:
      operationId: startFlr
      parameters:
      - in: path
        name: vmRestorePointId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FlrOptions'
        required: false
      responses:
        "202":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StartFlrResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/StartFlrResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/StartFlrResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/StartFlrResponse'
          description: Success
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - VmRestorePoints
      x-codegen-request-body-name: flrSpec
  /api/v1/vmRestorePoints/{vmRestorePointId}/defaultNetworkSettings:
    get:
      operationId: VmRestorePointsGetDefaultNetworkSettings
      parameters:
      - in: path
        name: vmRestorePointId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmRestorePointDefaultNetworkSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/VmRestorePointDefaultNetworkSettings'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - VmRestorePoints
  /api/v1/users:
    get:
      operationId: UsersGetAll
      parameters:
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/UsersFilters'
        x-veeam-spec:
          $ref: '#/definitions/UsersFilters'
      - explode: true
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            - descriptionAsc
            - descriptionDesc
            - isDefaultAsc
            - isDefaultDesc
            - mfaEnabledAsc
            - mfaEnabledDesc
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/UsersFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/UsersFilters'
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/UsersFilters'
        x-veeam-spec:
          $ref: '#/definitions/UsersFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/UsersFilters'
        x-veeam-spec:
          $ref: '#/definitions/UsersFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UsersPage'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
    post:
      operationId: CreateUser
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserCreateSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/UserCreateSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserCreateSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/UserCreateSpec'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: user
  /api/v1/users/{userId}:
    delete:
      operationId: DeleteUser
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "204":
          content: {}
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
    get:
      operationId: UsersGetByName
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
    put:
      operationId: UpdateUser
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserUpdateSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/UserUpdateSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserUpdateSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/UserUpdateSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: user
  /api/v1/users/validateName:
    post:
      operationId: ValidateName
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserNameValidationSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/UserNameValidationSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/UserNameValidationSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserNameValidationSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/UserNameValidationSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/problem+json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: user
  /api/v1/users/validateDescription:
    post:
      operationId: ValidateDescription
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserDescriptionValidationSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/UserDescriptionValidationSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/UserDescriptionValidationSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserDescriptionValidationSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/UserDescriptionValidationSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/problem+json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: user
  /api/v1/users/validatePassword:
    post:
      operationId: ValidatePassword
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserPasswordValidationSpec'
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordValidationSpec'
          text/json:
            schema:
              $ref: '#/components/schemas/UserPasswordValidationSpec'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserPasswordValidationSpec'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/UserPasswordValidationSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
            application/problem+json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationMessage'
                type: array
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: user
  /api/v1/users/{userId}/enableMfa:
    post:
      operationId: EnableMfa
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserMfaSetup'
          application/json:
            schema:
              $ref: '#/components/schemas/UserMfaSetup'
          text/json:
            schema:
              $ref: '#/components/schemas/UserMfaSetup'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserMfaSetup'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/UserMfaSetup'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMfaData'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UserMfaData'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-codegen-request-body-name: userMfaSetup
  /api/v1/users/{userId}/disableMfa:
    post:
      operationId: DisableMfa
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
  /api/v1/users/{userId}/acceptMfa:
    post:
      operationId: AcceptMfa
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserMfaAccept'
          application/json:
            schema:
              $ref: '#/components/schemas/UserMfaAccept'
          text/json:
            schema:
              $ref: '#/components/schemas/UserMfaAccept'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserMfaAccept'
          application/csp-report:
            schema:
              $ref: '#/components/schemas/UserMfaAccept'
        required: false
      responses:
        "201":
          content: {}
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-codegen-request-body-name: userMfaAccept
  /api/v1/users/isFirstLogin:
    get:
      operationId: IsFirstLogin
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsFirstLoginResult'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/IsFirstLoginResult'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/users/checkInstanceId:
    post:
      operationId: CheckInstance
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckInstanceIdSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckInstanceIdResult'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CheckInstanceIdResult'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: instance
  /api/v1/users/createDefaultUser:
    post:
      operationId: CreateDefaultUser
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultUserSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The license agreement has not been accepted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: defaultUserSpec
  /api/v1/users/export:
    post:
      operationId: ExportUsers
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
            application/xml:
              schema:
                format: binary
                type: string
          description: Success
        "401":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Users
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/settings/serviceAccount:
    get:
      operationId: GetServiceAccountSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceAccountSettings'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Workers
      x-veeam-authorize:
        roles:
        - Portal Administrator
    put:
      operationId: UpdateServiceAccountSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccountSettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceAccountSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Workers
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: configurationSpec
  /api/v1/settings/regions:
    get:
      operationId: GetAllRegionSettings
      parameters:
      - in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RegionSettingsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionSettingsFilters'
      - in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/RegionSettingsFilters'
        x-veeam-spec:
          $ref: '#/definitions/RegionSettingsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionSettingsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RegionSettingsPage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Workers
      x-veeam-authorize:
        roles:
        - Portal Administrator
    post:
      operationId: CreateRegionSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionSettingsSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RegionSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Workers
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: regionConfigurationSpec
  /api/v1/settings/regions/{regionId}:
    delete:
      operationId: DeleteRegionSettings
      parameters:
      - in: path
        name: regionId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Workers
      x-veeam-authorize:
        roles:
        - Portal Administrator
    get:
      operationId: GetRegionSettings
      parameters:
      - in: path
        name: regionId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RegionSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Workers
      x-veeam-authorize:
        roles:
        - Portal Administrator
    put:
      operationId: UpdateRegionSettings
      parameters:
      - in: path
        name: regionId
        required: true
        schema:
          format: uuid
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionSettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RegionSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Workers
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: locationConfigurationSpec
  /api/v1/settings/emailNotifications:
    get:
      operationId: GetEmailNotifications
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailNotifications'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/EmailNotifications'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - EmailNotifications
      x-veeam-authorize:
        roles:
        - Portal Administrator
    post:
      operationId: SaveEmailNotifications
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailNotifications'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailNotifications'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/EmailNotifications'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - EmailNotifications
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: smtpSpec
  /api/v1/settings/emailNotifications/sendTestMessage:
    post:
      operationId: SendTestMessage
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailNotifications'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailNotificationsTestResult'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/EmailNotificationsTestResult'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - EmailNotifications
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: EmailNotifications
  /api/v1/settings/certificates:
    get:
      operationId: GetCertificates
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificates'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Certificates'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Certificates
  /api/v1/settings/certificates/regenerate:
    post:
      operationId: RecreateCertificate
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateRegenerateSpec'
        required: true
      responses:
        "202":
          content: {}
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Certificates
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: recreateCertificateSpec
  /api/v1/settings/certificates/upload:
    post:
      operationId: UploadCertificate
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                certificateFile:
                  description: The .PFX certificate to upload.
                  format: binary
                  type: string
                  x-veeam-spec:
                    $ref: '#/definitions/UploadCertificateSpec'
                certificatePassword:
                  description: .PFX certificate password
                  type: string
                  x-veeam-spec:
                    $ref: '#/definitions/UploadCertificateSpec'
              required:
              - certificateFile
              - certificatePassword
        required: true
      responses:
        "202":
          content: {}
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Certificates
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/settings/retentionSettings:
    get:
      operationId: GetRetentionSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RetentionSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - RetentionSettings
      x-veeam-authorize:
        roles:
        - Portal Administrator
    post:
      operationId: UpdateRetentionSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetentionSettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RetentionSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - RetentionSettings
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: retentionSpec
  /api/v1/settings/retentionSettings/reset:
    post:
      operationId: SetDefaultRetentionSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RetentionSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - RetentionSettings
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/settings/dateTime:
    get:
      operationId: GetDateTimeSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateTimeSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/DateTimeSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Timezone
      x-veeam-authorize:
        roles:
        - Portal Administrator
    post:
      operationId: SetDateTimeSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DateTimeSettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateTimeSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/DateTimeSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Timezone
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: datetimeSettingsSpec
  /api/v1/settings/dateTime/timeZones:
    get:
      operationId: GetTimeZones
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeZones'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/TimeZones'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Timezone
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/settings/dateTime/setDefault:
    post:
      operationId: SetDefaultDateTimeSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateTimeSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/DateTimeSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Timezone
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/settings/dateTime/getDefault:
    get:
      operationId: GetDefaultDateTimeSettings
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateTimeSettings'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/DateTimeSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Timezone
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/userStatus:
    get:
      operationId: UserStatus
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UserStatus'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Overview
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/system/version:
    get:
      operationId: GetProductVersion
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVersion'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProductVersion'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Version
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/system/version/productId:
    get:
      operationId: GetProductId
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductId'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProductId'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Version
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/licensing/license:
    delete:
      operationId: RemoveLicense
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Licensing
      x-veeam-authorize:
        roles:
        - Portal Administrator
    get:
      operationId: GetLicense
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseInfo'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/LicenseInfo'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Licensing
      x-veeam-authorize:
        roles:
        - Portal Administrator
    post:
      operationId: InstallLicense
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                licenseFile:
                  description: The .lic license to upload.
                  format: binary
                  type: string
                  x-veeam-spec:
                    $ref: '#/definitions/UploadLicenseSpec'
              required:
              - licenseFile
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseInfo'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/LicenseInfo'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Licensing
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/licensing/license/export:
    post:
      operationId: ExportLicense
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
            application/xml:
              schema:
                format: binary
                type: string
          description: Success
        "401":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Licensing
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/licensing/licensedWorkloads:
    get:
      operationId: GetLicensedWorkloads
      parameters:
      - in: query
        name: Offset
        schema:
          format: int32
          minimum: 0
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/LicensedWorkloadsFilters'
        x-veeam-spec:
          $ref: '#/definitions/LicensedWorkloadsFilters'
      - in: query
        name: Limit
        schema:
          format: int32
          minimum: -1
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/LicensedWorkloadsFilters'
        x-veeam-spec:
          $ref: '#/definitions/LicensedWorkloadsFilters'
      - explode: true
        in: query
        name: Sort
        schema:
          items:
            enum:
            - nameAsc
            - nameDesc
            - lastBackupAsc
            - lastBackupDesc
            type: string
          type: array
          uniqueItems: false
          x-veeam-spec:
            $ref: '#/definitions/LicensedWorkloadsFilters'
        style: form
        x-veeam-spec:
          $ref: '#/definitions/LicensedWorkloadsFilters'
      - in: query
        name: SearchPattern
        schema:
          type: string
          x-veeam-spec:
            $ref: '#/definitions/LicensedWorkloadsFilters'
        x-veeam-spec:
          $ref: '#/definitions/LicensedWorkloadsFilters'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicensedWorkloadsPage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/LicensedWorkloadsPage'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. One or more resources specified in the request could
            not be found in the specified resource collection.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Licensing
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/licensing/alerts:
    get:
      operationId: GetAllLicenseNotifications
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseNotifications'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/LicenseNotifications'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Licensing
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/licensing/alerts/resolve:
    post:
      operationId: ResolveLicenseNotifications
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveNotificationsSpec'
        required: true
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Licensing
      x-veeam-authorize:
        roles:
        - Portal Administrator
      x-codegen-request-body-name: resolveNotificationsModel
  /api/v1/system/logs:
    get:
      operationId: GetSystemLogs
      parameters:
      - in: query
        name: ExportLogsType
        schema:
          enum:
          - LastDays
          - BetweenDates
          type: string
          x-veeam-spec:
            $ref: '#/definitions/LogExportSpec'
        x-veeam-spec:
          $ref: '#/definitions/LogExportSpec'
      - in: query
        name: Days
        schema:
          format: int32
          type: integer
          x-veeam-spec:
            $ref: '#/definitions/LogExportSpec'
        x-veeam-spec:
          $ref: '#/definitions/LogExportSpec'
      - in: query
        name: FromDateUtc
        schema:
          format: date-time
          type: string
          x-veeam-spec:
            $ref: '#/definitions/LogExportSpec'
        x-veeam-spec:
          $ref: '#/definitions/LogExportSpec'
      - in: query
        name: ToDateUtc
        schema:
          format: date-time
          type: string
          x-veeam-spec:
            $ref: '#/definitions/LogExportSpec'
        x-veeam-spec:
          $ref: '#/definitions/LogExportSpec'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
            application/problem+json:
              schema:
                format: binary
                type: string
          description: Success
        "400":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - System
  /api/v1/system/time:
    get:
      operationId: GetSystemDateTimeInfo
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateTimeInfo'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/DateTimeInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - System
  /api/v1/statistics/summary:
    get:
      operationId: GetSummary
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummaryStatistics'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/SummaryStatistics'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Statistics
  /api/v1/licenseAgreement:
    get:
      operationId: GetLicenseAgreement
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAgreements'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/LicenseAgreements'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - LicenseAgreement
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/licenseAgreement/accepted:
    get:
      operationId: GetCurrentLicenseAgreementAccepted
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAgreementAcceptResult'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/LicenseAgreementAcceptResult'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - LicenseAgreement
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/licenseAgreement/accept:
    post:
      operationId: AcceptLicenseAgreement
      parameters:
      - in: query
        name: eulaChecksum
        required: true
        schema:
          type: string
      - in: query
        name: thirdPartyLicenseAgreementChecksum
        required: true
        schema:
          type: string
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "204":
          content: {}
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - LicenseAgreement
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/licenseAgreement/download:
    get:
      operationId: DownloadLicenseAgreementFile
      parameters:
      - in: query
        name: licenseAgreementType
        required: true
        schema:
          enum:
          - Eula
          - ThirdPartyAgreement
          type: string
          x-veeam-spec:
            $ref: '#/definitions/LicenseAgreementDownloadSpec'
        x-veeam-spec:
          $ref: '#/definitions/LicenseAgreementDownloadSpec'
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
            application/problem+json:
              schema:
                format: binary
                type: string
          description: Success
        "400":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "500":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - LicenseAgreement
      x-veeam-authorize:
        roles:
        - Portal Administrator
  /api/v1/token:
    delete:
      operationId: SignOut
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "204":
          content: {}
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Token
    post:
      operationId: Authenticate
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                grant_type:
                  description: Authentication grant type
                  enum:
                  - password
                  - refresh_token
                  - authorization_code
                  - mfa
                  type: string
                  x-veeam-spec:
                    $ref: '#/definitions/LoginSpec'
                username:
                  description: User name (required for the 'password' grant type)
                  type: string
                  x-veeam-spec:
                    $ref: '#/definitions/LoginSpec'
                password:
                  description: Password (required for the 'password' grant type)
                  format: password
                  type: string
                  x-veeam-spec:
                    $ref: '#/definitions/LoginSpec'
                refresh_token:
                  description: Refresh token (required for the 'refresh_token' grant
                    type)
                  type: string
                  x-veeam-spec:
                    $ref: '#/definitions/LoginSpec'
                code:
                  description: Authorization code (required for the 'authorization_code'
                    grant type)
                  type: string
                  x-veeam-spec:
                    $ref: '#/definitions/LoginSpec'
                mfa_token:
                  description: MFA token (required for the 'mfa' grant type)
                  type: string
                  x-veeam-spec:
                    $ref: '#/definitions/LoginSpec'
                mfa_code:
                  description: Verification code (required for the 'mfa' grant type)
                  type: string
                  x-veeam-spec:
                    $ref: '#/definitions/LoginSpec'
              required:
              - grant_type
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESTLogin'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RESTLogin'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Token
  /api/v1/token/authorizationCode:
    post:
      operationId: CreateAuthorizationCode
      parameters:
      - in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev0
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationCode'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AuthorizationCode'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. The request body is malformed, incomplete or otherwise
            invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending a request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error. The request has been received but could
            not be completed because of an internal error at the server side.
      tags:
      - Token
  /api/v1/problems/accessDenied:
    get:
      operationId: AccessDenied
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/noAccessToken:
    get:
      operationId: NoAccessToken
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/invalidAccessToken:
    get:
      operationId: InvalidAccessToken
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/expiredAccessToken:
    get:
      operationId: ExpiredAccessToken
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/resourceNotFound:
    get:
      operationId: ResourceNotFound
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/validationError:
    get:
      operationId: ValidationError
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/serviceUnavailable:
    get:
      operationId: ServiceUnavailable
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/notImplemented:
    get:
      operationId: ActionNotImplemented
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/unknownError:
    get:
      operationId: UnknownError
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/repositoryUsedByPolicy:
    get:
      operationId: RepositoryUsedByPolicy
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/unsupportedApiVersion:
    get:
      operationId: UnsupportedApiVersion
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/apiVersionUnspecified:
    get:
      operationId: ApiVersionUnspecified
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/invalidApiVersion:
    get:
      operationId: InvalidApiVersion
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/ambiguousApiVersion:
    get:
      operationId: AmbiguousApiVersion
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/failedToRemoveUserPolicy:
    get:
      operationId: FailedToRemoveUserPolicy
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/policyAlreadyStarted:
    get:
      operationId: PolicyAlreadyStarted
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
  /api/v1/problems/licenseAgreementsIsNotAccepted:
    get:
      operationId: LicenseAgreementsIsNotAccepted
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - Problems
components:
  parameters:
    apiVersionParam:
      in: header
      name: x-api-version
      required: true
      schema:
        default: 1.0-rev0
        type: string
  schemas:
    Error:
      description: ""
      properties:
        type:
          description: An URI reference that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type (e.g.
            using HTML).
          format: uri
          type: string
        title:
          description: A short, summary of the problem type. Written in English and
            readable for engineers (usually not suited for non technical stakeholders
            and not localized)
          type: string
        status:
          description: The HTTP status code generated by the origin server for this
            occurrence of the problem.
          exclusiveMaximum: true
          format: int32
          maximum: 6E+2
          minimum: 4E+2
          type: integer
        errorCode:
          description: The error code is a string that uniquely identifies an error
            condition and should be understood by programs that detect and handle
            errors by type
          enum:
          - AccessDenied
          - ExpiredToken
          - InvalidToken
          - InvalidURI
          - MethodNotAllowed
          - NotFound
          - NotImplemented
          - ServiceUnavailable
          - UnexpectedContent
          - UnknownError
          type: string
        details:
          description: The error message contains a generic description of the error
            condition in English. It is intended for a human audience
          type: string
        instance:
          description: ID of the object that is involved in the error (or empty)
          format: uri
          type: string
        data:
          additionalProperties:
            properties: {}
            type: object
          description: Error payload
          type: object
      required:
      - errorCode
      - status
      - title
      - type
      type: object
    EmptySuccessResponse:
      description: Empty succes response ( 200, 201, 204 )
      type: object
    Link:
      example:
        method: GET
        rel: rel
        href: href
      properties:
        rel:
          type: string
        href:
          type: string
        method:
          enum:
          - GET
          - POST
          - PUT
          - DELETE
          type: string
      required:
      - href
      - method
      - rel
      type: object
    StandardAccount:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        username: username
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        username:
          type: string
        description:
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - description
      - id
      - name
      - username
      type: object
    StandardAccountCreateSpec:
      example:
        password: password
        name: name
        description: description
        username: username
      properties:
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          maxLength: 512
          minLength: 0
          type: string
        username:
          maxLength: 255
          minLength: 0
          type: string
        password:
          maxLength: 255
          minLength: 0
          type: string
      required:
      - name
      - username
      type: object
    StandardAccountUpdateSpec:
      example:
        password: password
        name: name
        description: description
        username: username
      properties:
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          maxLength: 512
          minLength: 0
          type: string
        username:
          maxLength: 255
          minLength: 0
          type: string
        password:
          maxLength: 255
          minLength: 0
          type: string
      required:
      - name
      type: object
    StandardAccountsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          username: username
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          username: username
      properties:
        results:
          items:
            $ref: '#/components/schemas/StandardAccount'
          type: array
        totalCount:
          format: int32
          type: integer
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - totalCount
      type: object
    StandardAccountsSortColumns:
      enum:
      - nameAsc
      - nameDesc
      type: string
    StandardAccountsFilters:
      properties:
        searchPattern:
          type: string
        offset:
          format: int32
          minimum: 0
          type: integer
        limit:
          format: int32
          minimum: -1
          type: integer
        sort:
          items:
            $ref: '#/components/schemas/StandardAccountsSortColumns'
          type: array
      type: object
    RegionTypes:
      enum:
      - Global
      - Emulator
      - Government
      - China
      type: string
    AmazonAccount:
      example:
        IAMRoleFromAnotherAccount:
          accountId: accountId
          parentAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          roleName: roleName
        accessKeys:
          accessKey: accessKey
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        awsid: awsid
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        IAMRole:
          parentAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isDefault: true
          roleName: roleName
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        description:
          type: string
        awsid:
          type: string
        regionType:
          $ref: '#/components/schemas/RegionTypes'
        accessKeys:
          $ref: '#/components/schemas/AmazonAccountAccessKeys'
        IAMRole:
          $ref: '#/components/schemas/AmazonAccountIAMRole'
        IAMRoleFromAnotherAccount:
          $ref: '#/components/schemas/AmazonAccountIAMRoleFromAnotherAccount'
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - awsid
      - description
      - id
      - name
      type: object
    AmazonAccountCreateSpec:
      example:
        IAMRoleFromAnotherAccount:
          accountId: accountId
          roleName: roleName
          externalId: externalId
        accessKeys:
          secretKey: secretKey
          accessKey: accessKey
        name: name
        description: description
        IAMRole:
          roleName: roleName
      properties:
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          maxLength: 512
          minLength: 0
          type: string
        accessKeys:
          $ref: '#/components/schemas/AmazonAccountAccessKeysCreateSpec'
        IAMRole:
          $ref: '#/components/schemas/AmazonAccountIAMRoleCreateSpec'
        IAMRoleFromAnotherAccount:
          $ref: '#/components/schemas/AmazonAccountIAMRoleFromAnotherAccountCreateSpec'
      required:
      - name
      type: object
    AmazonAccountUpdateSpec:
      example:
        IAMRoleFromAnotherAccount:
          accountId: accountId
          roleName: roleName
          externalId: externalId
        accessKeys:
          secretKey: secretKey
          accessKey: accessKey
        name: name
        description: description
        IAMRole:
          roleName: roleName
      properties:
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          maxLength: 512
          minLength: 0
          type: string
        accessKeys:
          $ref: '#/components/schemas/AmazonAccountAccessKeysUpdateSpec'
        IAMRole:
          $ref: '#/components/schemas/AmazonAccountIAMRoleUpdateSpec'
        IAMRoleFromAnotherAccount:
          $ref: '#/components/schemas/AmazonAccountIAMRoleFromAnotherAccountUpdateSpec'
      required:
      - name
      type: object
    AmazonAccountsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - IAMRoleFromAnotherAccount:
            accountId: accountId
            parentAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            roleName: roleName
          accessKeys:
            accessKey: accessKey
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          awsid: awsid
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          IAMRole:
            parentAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            isDefault: true
            roleName: roleName
        - IAMRoleFromAnotherAccount:
            accountId: accountId
            parentAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            roleName: roleName
          accessKeys:
            accessKey: accessKey
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          awsid: awsid
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          IAMRole:
            parentAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            isDefault: true
            roleName: roleName
      properties:
        results:
          items:
            $ref: '#/components/schemas/AmazonAccount'
          type: array
        totalCount:
          format: int32
          type: integer
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    AmazonAccountsSortColumns:
      enum:
      - nameAsc
      - nameDesc
      type: string
    AmazonAccountsFilters:
      properties:
        searchPattern:
          type: string
        offset:
          format: int32
          minimum: 0
          type: integer
        limit:
          format: int32
          minimum: -1
          type: integer
        sort:
          items:
            $ref: '#/components/schemas/AmazonAccountsSortColumns'
          type: array
      type: object
    AmazonAccountAccessKeys:
      example:
        accessKey: accessKey
      properties:
        accessKey:
          type: string
        defaultRegion:
          $ref: '#/components/schemas/RegionTypes'
      required:
      - accessKey
      type: object
    AmazonAccountIAMRole:
      example:
        parentAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        isDefault: true
        roleName: roleName
      properties:
        parentAmazonAccountId:
          format: uuid
          type: string
        roleName:
          type: string
        isDefault:
          type: boolean
      required:
      - isDefault
      - roleName
      type: object
    AmazonAccountIAMRoleFromAnotherAccount:
      example:
        accountId: accountId
        parentAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        roleName: roleName
      properties:
        parentAmazonAccountId:
          format: uuid
          type: string
        accountId:
          type: string
        roleName:
          type: string
      required:
      - accountId
      - parentAmazonAccountId
      - roleName
      type: object
    AmazonAccountAccessKeysCreateSpec:
      example:
        secretKey: secretKey
        accessKey: accessKey
      properties:
        accessKey:
          type: string
        secretKey:
          type: string
        defaultRegionType:
          $ref: '#/components/schemas/RegionTypes'
      required:
      - accessKey
      - defaultRegionType
      - secretKey
      type: object
    AmazonAccountIAMRoleCreateSpec:
      example:
        roleName: roleName
      properties:
        roleName:
          type: string
      required:
      - roleName
      type: object
    AmazonAccountIAMRoleFromAnotherAccountCreateSpec:
      example:
        accountId: accountId
        roleName: roleName
        externalId: externalId
      properties:
        accountId:
          type: string
        roleName:
          type: string
        externalId:
          type: string
      required:
      - accountId
      - roleName
      type: object
    AmazonAccountAccessKeysUpdateSpec:
      example:
        secretKey: secretKey
        accessKey: accessKey
      properties:
        accessKey:
          type: string
        secretKey:
          type: string
        defaultRegionType:
          $ref: '#/components/schemas/RegionTypes'
      required:
      - accessKey
      - defaultRegionType
      - secretKey
      type: object
    AmazonAccountIAMRoleUpdateSpec:
      example:
        roleName: roleName
      properties:
        roleName:
          type: string
      required:
      - roleName
      type: object
    AmazonAccountIAMRoleFromAnotherAccountUpdateSpec:
      example:
        accountId: accountId
        roleName: roleName
        externalId: externalId
      properties:
        accountId:
          type: string
        roleName:
          type: string
        externalId:
          type: string
      required:
      - accountId
      - roleName
      type: object
    AmazonAccountNameValidationSpec:
      example:
        name: name
      properties:
        name:
          minLength: 1
          type: string
      required:
      - name
      type: object
    StandardAccountNameValidationSpec:
      example:
        name: name
      properties:
        name:
          minLength: 1
          type: string
      required:
      - name
      type: object
    RescanCloudAccountSpec:
      example:
        regionIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        regionIds:
          items:
            format: uuid
            type: string
          type: array
      type: object
    TagsSortColumns:
      enum:
      - keyAsc
      - keyDesc
      type: string
    TagsFilters:
      properties:
        searchPattern:
          type: string
        offset:
          format: int32
          minimum: 0
          type: integer
        limit:
          format: int32
          minimum: -1
          type: integer
        sort:
          items:
            $ref: '#/components/schemas/TagsSortColumns'
          type: array
      type: object
    TagSpec:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      required:
      - key
      - value
      type: object
    Tag:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        value: value
        key: key
      properties:
        id:
          format: uuid
          type: string
        key:
          type: string
        value:
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - id
      - key
      - value
      type: object
    TagsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          value: value
          key: key
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          value: value
          key: key
      properties:
        results:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        totalCount:
          format: int32
          type: integer
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    VirtualMachine:
      example:
        awsResourceId: awsResourceId
        isDeleted: true
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        backupDestinations:
        - null
        - null
        name: name
        location:
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        awsResourceId:
          type: string
        protectionStatus:
          $ref: '#/components/schemas/VirtualMachineProtectionStatuses'
        backupDestinations:
          items:
            $ref: '#/components/schemas/BackupDestinations'
          type: array
        location:
          $ref: '#/components/schemas/VirtualMachine_location'
        isDeleted:
          type: boolean
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - awsResourceId
      - id
      - protectionStatus
      type: object
    VirtualMachinesPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - awsResourceId: awsResourceId
          isDeleted: true
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          backupDestinations:
          - null
          - null
          name: name
          location:
            name: name
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - awsResourceId: awsResourceId
          isDeleted: true
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          backupDestinations:
          - null
          - null
          name: name
          location:
            name: name
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        results:
          items:
            $ref: '#/components/schemas/VirtualMachine'
          type: array
        totalCount:
          format: int32
          type: integer
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    VirtualMachinesSortColumns:
      enum:
      - nameAsc
      - nameDesc
      - locationAsc
      - locationDesc
      type: string
    VirtualMachineProtectionStatuses:
      enum:
      - Protected
      - Unprotected
      type: string
    BackupDestinations:
      enum:
      - Snapshot
      - AwsBlob
      - ManualSnapshot
      type: string
    VirtualMachinesFilters:
      properties:
        SearchPattern:
          type: string
        ProtectionStatus:
          items:
            $ref: '#/components/schemas/VirtualMachineProtectionStatuses'
          type: array
        BackupDestination:
          items:
            $ref: '#/components/schemas/BackupDestinations'
          type: array
        BackupState:
          enum:
          - OnlyBackedUp
          - OnlyNotBackedUp
          - All
          type: string
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        Sort:
          items:
            $ref: '#/components/schemas/VirtualMachinesSortColumns'
          type: array
      type: object
    VirtualMachineSnapshotSpec:
      example:
        amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        copyTagsFromVolumeEnabled: true
        additionalTags:
        - value: value
          key: key
        - value: value
          key: key
        targetAmazonAccountIdToCopySnapshots: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        encryptionKey: encryptionKey
        targetRegionIdToCopySnapshots: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        amazonAccountId:
          format: uuid
          type: string
        targetAmazonAccountIdToCopySnapshots:
          format: uuid
          type: string
        targetRegionIdToCopySnapshots:
          format: uuid
          type: string
        encryptionKey:
          type: string
        additionalTags:
          items:
            $ref: '#/components/schemas/TagSpec'
          type: array
        copyTagsFromVolumeEnabled:
          type: boolean
      required:
      - amazonAccountId
      type: object
    BucketsSortColumns:
      enum:
      - nameAsc
      - nameDesc
      type: string
    BucketsFilters:
      properties:
        AmazonAccountId:
          format: uuid
          type: string
        SearchPattern:
          type: string
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        Sort:
          items:
            $ref: '#/components/schemas/BucketsSortColumns'
          type: array
      type: object
    Bucket:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        name: name
        location:
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        location:
          $ref: '#/components/schemas/Bucket_location'
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - id
      - location
      - name
      type: object
    BucketsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          name: name
          location:
            name: name
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          name: name
          location:
            name: name
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        results:
          items:
            $ref: '#/components/schemas/Bucket'
          type: array
        totalCount:
          format: int32
          type: integer
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    RepositoriesPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          amazonBucketId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          _embedded:
            bucket: bucket
            amazonAccount: amazonAccount
            bucketLink:
              method: GET
              rel: rel
              href: href
            regionLink:
              method: GET
              rel: rel
              href: href
            amazonAccountLink:
              method: GET
              rel: rel
              href: href
            region: region
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          amazonStorageFolder: amazonStorageFolder
          hint: hint
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          enableEncryption: true
        - amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          amazonBucketId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          _embedded:
            bucket: bucket
            amazonAccount: amazonAccount
            bucketLink:
              method: GET
              rel: rel
              href: href
            regionLink:
              method: GET
              rel: rel
              href: href
            amazonAccountLink:
              method: GET
              rel: rel
              href: href
            region: region
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          amazonStorageFolder: amazonStorageFolder
          hint: hint
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          enableEncryption: true
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/Repository'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    Repository:
      example:
        amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        amazonBucketId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        _embedded:
          bucket: bucket
          amazonAccount: amazonAccount
          bucketLink:
            method: GET
            rel: rel
            href: href
          regionLink:
            method: GET
            rel: rel
            href: href
          amazonAccountLink:
            method: GET
            rel: rel
            href: href
          region: region
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        amazonStorageFolder: amazonStorageFolder
        hint: hint
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        enableEncryption: true
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        description:
          type: string
        amazonAccountId:
          format: uuid
          type: string
        amazonStorageFolder:
          type: string
        amazonBucketId:
          format: uuid
          type: string
        hint:
          type: string
        enableEncryption:
          type: boolean
        _embedded:
          $ref: '#/components/schemas/RepositoryEmbedded'
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - amazonAccountId
      - amazonStorageFolder
      - description
      - enableEncryption
      - id
      - name
      type: object
    RepositoryCreateSpec:
      example:
        amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        amazonBucketId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        password: password
        amazonStorageFolder: amazonStorageFolder
        hint: hint
        name: name
        description: description
        enableEncryption: true
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
        description:
          type: string
        amazonAccountId:
          format: uuid
          type: string
        amazonBucketId:
          format: uuid
          type: string
        amazonStorageFolder:
          type: string
        password:
          type: string
        hint:
          type: string
        enableEncryption:
          type: boolean
      required:
      - amazonAccountId
      - amazonBucketId
      - amazonStorageFolder
      - enableEncryption
      - name
      type: object
    RepositoryUpdateSpec:
      example:
        amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        password: password
        hint: hint
        name: name
        description: description
        enableEncryption: true
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
        description:
          type: string
        amazonAccountId:
          format: uuid
          type: string
        password:
          type: string
        hint:
          type: string
        enableEncryption:
          type: boolean
      required:
      - amazonAccountId
      - enableEncryption
      - name
      type: object
    RepositoryEmbedded:
      example:
        bucket: bucket
        amazonAccount: amazonAccount
        bucketLink:
          method: GET
          rel: rel
          href: href
        regionLink:
          method: GET
          rel: rel
          href: href
        amazonAccountLink:
          method: GET
          rel: rel
          href: href
        region: region
      properties:
        amazonAccount:
          type: string
        amazonAccountLink:
          $ref: '#/components/schemas/Link'
        region:
          type: string
        regionLink:
          $ref: '#/components/schemas/Link'
        bucket:
          type: string
        bucketLink:
          $ref: '#/components/schemas/Link'
      type: object
    RepositoriesSortColumns:
      enum:
      - nameAsc
      - nameDesc
      - descriptionAsc
      - descriptionDesc
      - amazonAccountNameAsc
      - amazonAccountNameDesc
      - amazonBucketAsc
      - amazonBucketDesc
      - amazonStorageFolderAsc
      - amazonStorageFolderDesc
      - regionAsc
      - regionDesc
      - encryptionAsc
      - encryptionDesc
      type: string
    RepositoriesFilters:
      properties:
        SearchPattern:
          type: string
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        Sort:
          items:
            $ref: '#/components/schemas/RepositoriesSortColumns'
          type: array
      type: object
    RepositoryPasswordValidationSpec:
      example:
        password: password
      properties:
        password:
          minLength: 1
          type: string
      required:
      - password
      type: object
    RepositoryPasswordValidationResult:
      example:
        isSuccess: true
      properties:
        isSuccess:
          type: boolean
      required:
      - isSuccess
      type: object
    SessionStatuses:
      enum:
      - Running
      - NeverExecuted
      - Succeeded
      - Warning
      - Failed
      - Canceled
      type: string
    SessionResults:
      enum:
      - Running
      - Success
      - Warning
      - Failed
      - Cancelled
      type: string
    RetentionTypes:
      enum:
      - Days
      - Months
      type: string
    DaysOfWeek:
      enum:
      - Sunday
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday
      - Saturday
      type: string
    DayNumbersInMonth:
      enum:
      - First
      - Second
      - Third
      - Fourth
      - Last
      - OnDay
      type: string
    Months:
      enum:
      - January
      - February
      - March
      - April
      - May
      - June
      - July
      - August
      - September
      - October
      - November
      - December
      type: string
    PeriodRetentionOptions:
      example:
        count: 0
      properties:
        type:
          $ref: '#/components/schemas/RetentionTypes'
        count:
          format: int32
          minimum: 0
          type: integer
      required:
      - count
      - type
      type: object
    PointsRetentionOptions:
      example:
        count: 0
      properties:
        count:
          format: int32
          minimum: 0
          type: integer
      required:
      - count
      type: object
    YearlyRetentionOptions:
      example:
        count: 0
        type: Years
      properties:
        count:
          format: int32
          minimum: 0
          type: integer
        type:
          enum:
          - Years
          type: string
      required:
      - count
      - type
      type: object
    DailySchedule:
      example:
        hours:
        - true
        - true
      properties:
        hours:
          items:
            type: boolean
          type: array
      required:
      - hours
      type: object
    DailySnapshotScheduleSettings:
      example:
        schedule:
          hours:
          - true
          - true
        retention:
          count: 0
      properties:
        retention:
          $ref: '#/components/schemas/PointsRetentionOptions'
        schedule:
          $ref: '#/components/schemas/DailySchedule'
      required:
      - retention
      - schedule
      type: object
    DailyBackupScheduleSettings:
      example:
        schedule:
          hours:
          - true
          - true
        retention:
          count: 0
      properties:
        retention:
          $ref: '#/components/schemas/PeriodRetentionOptions'
        schedule:
          $ref: '#/components/schemas/DailySchedule'
      required:
      - retention
      - schedule
      type: object
    DailyReplicaScheduleSettings:
      example:
        schedule:
          hours:
          - true
          - true
        retention:
          count: 0
      properties:
        retention:
          $ref: '#/components/schemas/PointsRetentionOptions'
        schedule:
          $ref: '#/components/schemas/DailySchedule'
      required:
      - retention
      - schedule
      type: object
    DailyScheduleKinds:
      enum:
      - Everyday
      - WeekDays
      - SelectedDays
      type: string
    DailyScheduleSettings:
      example:
        runsPerHour: 1
        replicaOptions:
          schedule:
            hours:
            - true
            - true
          retention:
            count: 0
        days:
        - null
        - null
        backupOptions:
          schedule:
            hours:
            - true
            - true
          retention:
            count: 0
        snapshotOptions:
          schedule:
            hours:
            - true
            - true
          retention:
            count: 0
      properties:
        kind:
          $ref: '#/components/schemas/DailyScheduleKinds'
        runsPerHour:
          format: int32
          minimum: 1
          type: integer
        days:
          items:
            $ref: '#/components/schemas/DaysOfWeek'
          type: array
        snapshotOptions:
          $ref: '#/components/schemas/DailySnapshotScheduleSettings'
        backupOptions:
          $ref: '#/components/schemas/DailyBackupScheduleSettings'
        replicaOptions:
          $ref: '#/components/schemas/DailyReplicaScheduleSettings'
      required:
      - kind
      - runsPerHour
      - snapshotOptions
      type: object
    WeeklySchedule:
      example:
        days:
        - null
        - null
      properties:
        days:
          items:
            $ref: '#/components/schemas/DaysOfWeek'
          type: array
          uniqueItems: true
      required:
      - days
      type: object
    WeeklySnapshotScheduleSettings:
      example:
        schedule:
          days:
          - null
          - null
        retention:
          count: 0
      properties:
        retention:
          $ref: '#/components/schemas/PointsRetentionOptions'
        schedule:
          $ref: '#/components/schemas/WeeklySchedule'
      required:
      - retention
      - schedule
      type: object
    WeeklyBackupScheduleSettings:
      example:
        schedule:
          days:
          - null
          - null
        retention:
          count: 0
      properties:
        retention:
          $ref: '#/components/schemas/PeriodRetentionOptions'
        schedule:
          $ref: '#/components/schemas/WeeklySchedule'
      required:
      - retention
      - schedule
      type: object
    WeeklyReplicaScheduleSettings:
      example:
        schedule:
          days:
          - null
          - null
        retention:
          count: 0
      properties:
        retention:
          $ref: '#/components/schemas/PointsRetentionOptions'
        schedule:
          $ref: '#/components/schemas/WeeklySchedule'
      required:
      - retention
      - schedule
      type: object
    WeeklyScheduleSettings:
      example:
        replicaOptions:
          schedule:
            days:
            - null
            - null
          retention:
            count: 0
        backupOptions:
          schedule:
            days:
            - null
            - null
          retention:
            count: 0
        snapshotOptions:
          schedule:
            days:
            - null
            - null
          retention:
            count: 0
        timeLocal: 2000-01-23T04:56:07.000+00:00
      properties:
        timeLocal:
          format: date-time
          type: string
        snapshotOptions:
          $ref: '#/components/schemas/WeeklySnapshotScheduleSettings'
        backupOptions:
          $ref: '#/components/schemas/WeeklyBackupScheduleSettings'
        replicaOptions:
          $ref: '#/components/schemas/WeeklyReplicaScheduleSettings'
      required:
      - snapshotOptions
      - timeLocal
      type: object
    MonthlySchedule:
      example:
        months:
        - null
        - null
      properties:
        months:
          items:
            $ref: '#/components/schemas/Months'
          type: array
          uniqueItems: true
      required:
      - months
      type: object
    MonthlySnapshotScheduleSettings:
      example:
        schedule:
          months:
          - null
          - null
        retention:
          count: 0
      properties:
        retention:
          $ref: '#/components/schemas/PointsRetentionOptions'
        schedule:
          $ref: '#/components/schemas/MonthlySchedule'
      required:
      - retention
      - schedule
      type: object
    MonthlyBackupScheduleSettings:
      example:
        schedule:
          months:
          - null
          - null
        retention:
          count: 0
      properties:
        retention:
          $ref: '#/components/schemas/PeriodRetentionOptions'
        schedule:
          $ref: '#/components/schemas/MonthlySchedule'
      required:
      - retention
      - schedule
      type: object
    MonthlyReplicaScheduleSettings:
      example:
        schedule:
          months:
          - null
          - null
        retention:
          count: 0
      properties:
        retention:
          $ref: '#/components/schemas/PointsRetentionOptions'
        schedule:
          $ref: '#/components/schemas/MonthlySchedule'
      required:
      - retention
      - schedule
      type: object
    MonthlyScheduleSettings:
      example:
        dayOfMonth: 5
        replicaOptions:
          schedule:
            months:
            - null
            - null
          retention:
            count: 0
        backupOptions:
          schedule:
            months:
            - null
            - null
          retention:
            count: 0
        snapshotOptions:
          schedule:
            months:
            - null
            - null
          retention:
            count: 0
        timeLocal: 2000-01-23T04:56:07.000+00:00
      properties:
        timeLocal:
          format: date-time
          type: string
        dayNumberInMonth:
          $ref: '#/components/schemas/DayNumbersInMonth'
        dayOfWeek:
          $ref: '#/components/schemas/DaysOfWeek'
        dayOfMonth:
          format: int32
          type: integer
        snapshotOptions:
          $ref: '#/components/schemas/MonthlySnapshotScheduleSettings'
        backupOptions:
          $ref: '#/components/schemas/MonthlyBackupScheduleSettings'
        replicaOptions:
          $ref: '#/components/schemas/MonthlyReplicaScheduleSettings'
      required:
      - dayNumberInMonth
      - snapshotOptions
      - timeLocal
      type: object
    YearlyScheduleSettings:
      example:
        dayOfMonth: 2
        retention:
          count: 0
          type: Years
        timeLocal: 2000-01-23T04:56:07.000+00:00
      properties:
        timeLocal:
          format: date-time
          type: string
        dayNumberInMonth:
          $ref: '#/components/schemas/DayNumbersInMonth'
        dayOfWeek:
          $ref: '#/components/schemas/DaysOfWeek'
        dayOfMonth:
          format: int32
          type: integer
        month:
          $ref: '#/components/schemas/Months'
        retention:
          $ref: '#/components/schemas/YearlyRetentionOptions'
      required:
      - dayNumberInMonth
      - month
      - retention
      - timeLocal
      type: object
    ScheduleSettings:
      example:
        dailySchedule:
          runsPerHour: 1
          replicaOptions:
            schedule:
              hours:
              - true
              - true
            retention:
              count: 0
          days:
          - null
          - null
          backupOptions:
            schedule:
              hours:
              - true
              - true
            retention:
              count: 0
          snapshotOptions:
            schedule:
              hours:
              - true
              - true
            retention:
              count: 0
        monthlyScheduleEnabled: true
        yearlySchedule:
          dayOfMonth: 2
          retention:
            count: 0
            type: Years
          timeLocal: 2000-01-23T04:56:07.000+00:00
        dailyScheduleEnabled: true
        weeklySchedule:
          replicaOptions:
            schedule:
              days:
              - null
              - null
            retention:
              count: 0
          backupOptions:
            schedule:
              days:
              - null
              - null
            retention:
              count: 0
          snapshotOptions:
            schedule:
              days:
              - null
              - null
            retention:
              count: 0
          timeLocal: 2000-01-23T04:56:07.000+00:00
        monthlySchedule:
          dayOfMonth: 5
          replicaOptions:
            schedule:
              months:
              - null
              - null
            retention:
              count: 0
          backupOptions:
            schedule:
              months:
              - null
              - null
            retention:
              count: 0
          snapshotOptions:
            schedule:
              months:
              - null
              - null
            retention:
              count: 0
          timeLocal: 2000-01-23T04:56:07.000+00:00
        yearlyScheduleEnabled: true
        weeklyScheduleEnabled: true
      properties:
        dailyScheduleEnabled:
          type: boolean
        dailySchedule:
          $ref: '#/components/schemas/DailyScheduleSettings'
        weeklyScheduleEnabled:
          type: boolean
        weeklySchedule:
          $ref: '#/components/schemas/WeeklyScheduleSettings'
        monthlyScheduleEnabled:
          type: boolean
        monthlySchedule:
          $ref: '#/components/schemas/MonthlyScheduleSettings'
        yearlyScheduleEnabled:
          type: boolean
        yearlySchedule:
          $ref: '#/components/schemas/YearlyScheduleSettings'
      required:
      - dailyScheduleEnabled
      - monthlyScheduleEnabled
      - weeklyScheduleEnabled
      - yearlyScheduleEnabled
      type: object
    PolicyStatuses:
      enum:
      - Enabled
      - Disabled
      type: string
    PoliciesSortColumns:
      enum:
      - priorityAsc
      - priorityDesc
      - nameAsc
      - nameDesc
      - usnAsc
      - usnDesc
      type: string
    PoliciesFilters:
      properties:
        SearchPattern:
          type: string
        VirtualMachineId:
          format: uuid
          type: string
        LastPolicySessionStatus:
          items:
            $ref: '#/components/schemas/SessionStatuses'
          type: array
        PolicyStatus:
          items:
            $ref: '#/components/schemas/PolicyStatuses'
          type: array
        Sort:
          items:
            $ref: '#/components/schemas/PoliciesSortColumns'
          type: array
        Usn:
          format: int64
          type: integer
        RepositoryId:
          format: uuid
          type: string
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
      type: object
    PoliciesPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          replicaSettings:
            copyTagsFromVolumeEnabled: true
            mapping:
            - targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              encryptionKey: encryptionKey
              sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              encryptionKey: encryptionKey
              sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            additionalTags:
            - value: value
              key: key
            - value: value
              key: key
          _embeddedResources:
            protectedResources:
              method: GET
              rel: rel
              href: href
            lastBackupSession:
              method: GET
              rel: rel
              href: href
            regions:
              method: GET
              rel: rel
              href: href
            excludedResources:
              method: GET
              rel: rel
              href: href
            lastFinishedBackupSession:
              method: GET
              rel: rel
              href: href
            targetRepository:
              method: GET
              rel: rel
              href: href
          excludedItems:
            virtualMachineIds:
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            tagIds:
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          description: description
          regionIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          priority: 9
          policyNotificationSettings:
            notifyOnWarning: true
            notifyOnFailure: true
            recipient: recipient
            notifyOnSuccess: true
          snapshotSettings:
            copyTagsFromVolumeEnabled: true
            additionalTags:
            - value: value
              key: key
            - value: value
              key: key
            tryCreateVSSSnapshot: true
          backupSettings:
            targetRepositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          retrySettings:
            retryTimes: 3
          usn: 2
          scheduleSettings:
            dailySchedule:
              runsPerHour: 1
              replicaOptions:
                schedule:
                  hours:
                  - true
                  - true
                retention:
                  count: 0
              days:
              - null
              - null
              backupOptions:
                schedule:
                  hours:
                  - true
                  - true
                retention:
                  count: 0
              snapshotOptions:
                schedule:
                  hours:
                  - true
                  - true
                retention:
                  count: 0
            monthlyScheduleEnabled: true
            yearlySchedule:
              dayOfMonth: 2
              retention:
                count: 0
                type: Years
              timeLocal: 2000-01-23T04:56:07.000+00:00
            dailyScheduleEnabled: true
            weeklySchedule:
              replicaOptions:
                schedule:
                  days:
                  - null
                  - null
                retention:
                  count: 0
              backupOptions:
                schedule:
                  days:
                  - null
                  - null
                retention:
                  count: 0
              snapshotOptions:
                schedule:
                  days:
                  - null
                  - null
                retention:
                  count: 0
              timeLocal: 2000-01-23T04:56:07.000+00:00
            monthlySchedule:
              dayOfMonth: 5
              replicaOptions:
                schedule:
                  months:
                  - null
                  - null
                retention:
                  count: 0
              backupOptions:
                schedule:
                  months:
                  - null
                  - null
                retention:
                  count: 0
              snapshotOptions:
                schedule:
                  months:
                  - null
                  - null
                retention:
                  count: 0
              timeLocal: 2000-01-23T04:56:07.000+00:00
            yearlyScheduleEnabled: true
            weeklyScheduleEnabled: true
          createdBy: createdBy
          isEnabled: true
          name: name
          warning: warning
          modifiedBy: modifiedBy
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          selectedItems:
            virtualMachineIds:
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            tagIds:
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          replicaSettings:
            copyTagsFromVolumeEnabled: true
            mapping:
            - targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              encryptionKey: encryptionKey
              sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              encryptionKey: encryptionKey
              sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            additionalTags:
            - value: value
              key: key
            - value: value
              key: key
          _embeddedResources:
            protectedResources:
              method: GET
              rel: rel
              href: href
            lastBackupSession:
              method: GET
              rel: rel
              href: href
            regions:
              method: GET
              rel: rel
              href: href
            excludedResources:
              method: GET
              rel: rel
              href: href
            lastFinishedBackupSession:
              method: GET
              rel: rel
              href: href
            targetRepository:
              method: GET
              rel: rel
              href: href
          excludedItems:
            virtualMachineIds:
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            tagIds:
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          description: description
          regionIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          priority: 9
          policyNotificationSettings:
            notifyOnWarning: true
            notifyOnFailure: true
            recipient: recipient
            notifyOnSuccess: true
          snapshotSettings:
            copyTagsFromVolumeEnabled: true
            additionalTags:
            - value: value
              key: key
            - value: value
              key: key
            tryCreateVSSSnapshot: true
          backupSettings:
            targetRepositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          retrySettings:
            retryTimes: 3
          usn: 2
          scheduleSettings:
            dailySchedule:
              runsPerHour: 1
              replicaOptions:
                schedule:
                  hours:
                  - true
                  - true
                retention:
                  count: 0
              days:
              - null
              - null
              backupOptions:
                schedule:
                  hours:
                  - true
                  - true
                retention:
                  count: 0
              snapshotOptions:
                schedule:
                  hours:
                  - true
                  - true
                retention:
                  count: 0
            monthlyScheduleEnabled: true
            yearlySchedule:
              dayOfMonth: 2
              retention:
                count: 0
                type: Years
              timeLocal: 2000-01-23T04:56:07.000+00:00
            dailyScheduleEnabled: true
            weeklySchedule:
              replicaOptions:
                schedule:
                  days:
                  - null
                  - null
                retention:
                  count: 0
              backupOptions:
                schedule:
                  days:
                  - null
                  - null
                retention:
                  count: 0
              snapshotOptions:
                schedule:
                  days:
                  - null
                  - null
                retention:
                  count: 0
              timeLocal: 2000-01-23T04:56:07.000+00:00
            monthlySchedule:
              dayOfMonth: 5
              replicaOptions:
                schedule:
                  months:
                  - null
                  - null
                retention:
                  count: 0
              backupOptions:
                schedule:
                  months:
                  - null
                  - null
                retention:
                  count: 0
              snapshotOptions:
                schedule:
                  months:
                  - null
                  - null
                retention:
                  count: 0
              timeLocal: 2000-01-23T04:56:07.000+00:00
            yearlyScheduleEnabled: true
            weeklyScheduleEnabled: true
          createdBy: createdBy
          isEnabled: true
          name: name
          warning: warning
          modifiedBy: modifiedBy
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          selectedItems:
            virtualMachineIds:
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            tagIds:
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/Policy'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    PolicySelectionTypes:
      enum:
      - AllItems
      - SelectedItems
      type: string
    Policy:
      example:
        amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        replicaSettings:
          copyTagsFromVolumeEnabled: true
          mapping:
          - targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            encryptionKey: encryptionKey
            sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            encryptionKey: encryptionKey
            sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          additionalTags:
          - value: value
            key: key
          - value: value
            key: key
        _embeddedResources:
          protectedResources:
            method: GET
            rel: rel
            href: href
          lastBackupSession:
            method: GET
            rel: rel
            href: href
          regions:
            method: GET
            rel: rel
            href: href
          excludedResources:
            method: GET
            rel: rel
            href: href
          lastFinishedBackupSession:
            method: GET
            rel: rel
            href: href
          targetRepository:
            method: GET
            rel: rel
            href: href
        excludedItems:
          virtualMachineIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tagIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        description: description
        regionIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        priority: 9
        policyNotificationSettings:
          notifyOnWarning: true
          notifyOnFailure: true
          recipient: recipient
          notifyOnSuccess: true
        snapshotSettings:
          copyTagsFromVolumeEnabled: true
          additionalTags:
          - value: value
            key: key
          - value: value
            key: key
          tryCreateVSSSnapshot: true
        backupSettings:
          targetRepositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        retrySettings:
          retryTimes: 3
        usn: 2
        scheduleSettings:
          dailySchedule:
            runsPerHour: 1
            replicaOptions:
              schedule:
                hours:
                - true
                - true
              retention:
                count: 0
            days:
            - null
            - null
            backupOptions:
              schedule:
                hours:
                - true
                - true
              retention:
                count: 0
            snapshotOptions:
              schedule:
                hours:
                - true
                - true
              retention:
                count: 0
          monthlyScheduleEnabled: true
          yearlySchedule:
            dayOfMonth: 2
            retention:
              count: 0
              type: Years
            timeLocal: 2000-01-23T04:56:07.000+00:00
          dailyScheduleEnabled: true
          weeklySchedule:
            replicaOptions:
              schedule:
                days:
                - null
                - null
              retention:
                count: 0
            backupOptions:
              schedule:
                days:
                - null
                - null
              retention:
                count: 0
            snapshotOptions:
              schedule:
                days:
                - null
                - null
              retention:
                count: 0
            timeLocal: 2000-01-23T04:56:07.000+00:00
          monthlySchedule:
            dayOfMonth: 5
            replicaOptions:
              schedule:
                months:
                - null
                - null
              retention:
                count: 0
            backupOptions:
              schedule:
                months:
                - null
                - null
              retention:
                count: 0
            snapshotOptions:
              schedule:
                months:
                - null
                - null
              retention:
                count: 0
            timeLocal: 2000-01-23T04:56:07.000+00:00
          yearlyScheduleEnabled: true
          weeklyScheduleEnabled: true
        createdBy: createdBy
        isEnabled: true
        name: name
        warning: warning
        modifiedBy: modifiedBy
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        selectedItems:
          virtualMachineIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tagIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        snapshotSettings:
          $ref: '#/components/schemas/PolicySnapshotSettings'
        replicaSettings:
          $ref: '#/components/schemas/PolicyReplicaSettings'
        backupSettings:
          $ref: '#/components/schemas/PolicyBackupSettings'
        regionIds:
          items:
            format: uuid
            type: string
          type: array
        selectedItems:
          $ref: '#/components/schemas/PolicyBackupItems'
        excludedItems:
          $ref: '#/components/schemas/PolicyBackupItems'
        scheduleSettings:
          $ref: '#/components/schemas/ScheduleSettings'
        name:
          type: string
        description:
          type: string
        priority:
          format: int64
          type: integer
        amazonAccountId:
          format: uuid
          type: string
        retrySettings:
          $ref: '#/components/schemas/RetrySettings'
        policyNotificationSettings:
          $ref: '#/components/schemas/PolicyNotificationSettings'
        isEnabled:
          type: boolean
        backupType:
          $ref: '#/components/schemas/PolicySelectionTypes'
        createdBy:
          type: string
        modifiedBy:
          type: string
        lastPolicySessionStatus:
          $ref: '#/components/schemas/SessionStatuses'
        warning:
          type: string
        usn:
          format: int64
          type: integer
        _embeddedResources:
          $ref: '#/components/schemas/PolicyEmbeddedResources'
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - amazonAccountId
      - backupType
      - description
      - id
      - isEnabled
      - name
      - priority
      - regionIds
      type: object
    PolicySpec:
      example:
        amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        replicaSettings:
          copyTagsFromVolumeEnabled: true
          mapping:
          - targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            encryptionKey: encryptionKey
            sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            encryptionKey: encryptionKey
            sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          additionalTags:
          - value: value
            key: key
          - value: value
            key: key
        excludedItems:
          virtualMachineIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tagIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        description: description
        regionIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        policyNotificationSettings:
          notifyOnWarning: true
          notifyOnFailure: true
          recipient: recipient
          notifyOnSuccess: true
        snapshotSettings:
          copyTagsFromVolumeEnabled: true
          additionalTags:
          - value: value
            key: key
          - value: value
            key: key
          tryCreateVSSSnapshot: true
        backupSettings:
          targetRepositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        retrySettings:
          retryTimes: 3
        scheduleSettings:
          dailySchedule:
            runsPerHour: 1
            replicaOptions:
              schedule:
                hours:
                - true
                - true
              retention:
                count: 0
            days:
            - null
            - null
            backupOptions:
              schedule:
                hours:
                - true
                - true
              retention:
                count: 0
            snapshotOptions:
              schedule:
                hours:
                - true
                - true
              retention:
                count: 0
          monthlyScheduleEnabled: true
          yearlySchedule:
            dayOfMonth: 2
            retention:
              count: 0
              type: Years
            timeLocal: 2000-01-23T04:56:07.000+00:00
          dailyScheduleEnabled: true
          weeklySchedule:
            replicaOptions:
              schedule:
                days:
                - null
                - null
              retention:
                count: 0
            backupOptions:
              schedule:
                days:
                - null
                - null
              retention:
                count: 0
            snapshotOptions:
              schedule:
                days:
                - null
                - null
              retention:
                count: 0
            timeLocal: 2000-01-23T04:56:07.000+00:00
          monthlySchedule:
            dayOfMonth: 5
            replicaOptions:
              schedule:
                months:
                - null
                - null
              retention:
                count: 0
            backupOptions:
              schedule:
                months:
                - null
                - null
              retention:
                count: 0
            snapshotOptions:
              schedule:
                months:
                - null
                - null
              retention:
                count: 0
            timeLocal: 2000-01-23T04:56:07.000+00:00
          yearlyScheduleEnabled: true
          weeklyScheduleEnabled: true
        name: name
        selectedItems:
          virtualMachineIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tagIds:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        snapshotSettings:
          $ref: '#/components/schemas/PolicySnapshotSettings'
        replicaSettings:
          $ref: '#/components/schemas/PolicyReplicaSettings'
        backupSettings:
          $ref: '#/components/schemas/PolicyBackupSettings'
        regionIds:
          items:
            format: uuid
            type: string
          type: array
        selectedItems:
          $ref: '#/components/schemas/PolicyBackupItems'
        excludedItems:
          $ref: '#/components/schemas/PolicyBackupItems'
        scheduleSettings:
          $ref: '#/components/schemas/ScheduleSettings'
        name:
          maxLength: 255
          minLength: 1
          type: string
        description:
          type: string
        amazonAccountId:
          format: uuid
          type: string
        retrySettings:
          $ref: '#/components/schemas/RetrySettings'
        policyNotificationSettings:
          $ref: '#/components/schemas/PolicyNotificationSettings'
        backupType:
          $ref: '#/components/schemas/PolicySelectionTypes'
      required:
      - amazonAccountId
      - backupType
      - name
      type: object
    PolicySnapshotSettings:
      example:
        copyTagsFromVolumeEnabled: true
        additionalTags:
        - value: value
          key: key
        - value: value
          key: key
        tryCreateVSSSnapshot: true
      properties:
        additionalTags:
          items:
            $ref: '#/components/schemas/TagSpec'
          type: array
        copyTagsFromVolumeEnabled:
          type: boolean
        tryCreateVSSSnapshot:
          type: boolean
      type: object
    ReplicaMapping:
      example:
        targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        encryptionKey: encryptionKey
        sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        sourceRegionId:
          format: uuid
          type: string
        targetRegionId:
          format: uuid
          type: string
        targetAmazonAccountId:
          format: uuid
          type: string
        encryptionKey:
          type: string
      required:
      - sourceRegionId
      - targetAmazonAccountId
      - targetRegionId
      type: object
    PolicyReplicaSettings:
      example:
        copyTagsFromVolumeEnabled: true
        mapping:
        - targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          encryptionKey: encryptionKey
          sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - targetRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          targetAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          encryptionKey: encryptionKey
          sourceRegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        additionalTags:
        - value: value
          key: key
        - value: value
          key: key
      properties:
        mapping:
          items:
            $ref: '#/components/schemas/ReplicaMapping'
          type: array
        additionalTags:
          items:
            $ref: '#/components/schemas/TagSpec'
          type: array
        copyTagsFromVolumeEnabled:
          type: boolean
      required:
      - mapping
      type: object
    PolicyBackupSettings:
      example:
        targetRepositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        targetRepositoryId:
          format: uuid
          type: string
      type: object
    PolicyEmbeddedResources:
      example:
        protectedResources:
          method: GET
          rel: rel
          href: href
        lastBackupSession:
          method: GET
          rel: rel
          href: href
        regions:
          method: GET
          rel: rel
          href: href
        excludedResources:
          method: GET
          rel: rel
          href: href
        lastFinishedBackupSession:
          method: GET
          rel: rel
          href: href
        targetRepository:
          method: GET
          rel: rel
          href: href
      properties:
        lastBackupSession:
          $ref: '#/components/schemas/Link'
        lastFinishedBackupSession:
          $ref: '#/components/schemas/Link'
        targetRepository:
          $ref: '#/components/schemas/Link'
        protectedResources:
          $ref: '#/components/schemas/Link'
        excludedResources:
          $ref: '#/components/schemas/Link'
        regions:
          $ref: '#/components/schemas/Link'
      type: object
    PolicyItem:
      example:
        virtualMachine:
          method: GET
          rel: rel
          href: href
        name: name
        deletedItem:
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: VirtualMachine
        tag:
          method: GET
          rel: rel
          href: href
      properties:
        name:
          type: string
        tag:
          $ref: '#/components/schemas/Link'
        virtualMachine:
          $ref: '#/components/schemas/Link'
        deletedItem:
          $ref: '#/components/schemas/PolicyItemDeletedFromAmazon'
      type: object
    PolicyBackupItems:
      example:
        virtualMachineIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tagIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        virtualMachineIds:
          items:
            format: uuid
            type: string
          type: array
        tagIds:
          items:
            format: uuid
            type: string
          type: array
      type: object
    PolicyItemsSortColumns:
      enum:
      - nameAsc
      - nameDesc
      type: string
    PolicyItemsFilters:
      properties:
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        SearchPattern:
          type: string
        Sort:
          items:
            $ref: '#/components/schemas/PolicyItemsSortColumns'
          type: array
      type: object
    PolicyItemsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - virtualMachine:
            method: GET
            rel: rel
            href: href
          name: name
          deletedItem:
            name: name
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            type: VirtualMachine
          tag:
            method: GET
            rel: rel
            href: href
        - virtualMachine:
            method: GET
            rel: rel
            href: href
          name: name
          deletedItem:
            name: name
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            type: VirtualMachine
          tag:
            method: GET
            rel: rel
            href: href
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/PolicyItem'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    PoliciesPrioritySpec:
      example:
        priorities:
        - policyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          priority: 0
        - policyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          priority: 0
      properties:
        priorities:
          items:
            $ref: '#/components/schemas/PolicyPrioritySpec'
          type: array
      required:
      - priorities
      type: object
    PolicyPrioritySpec:
      example:
        policyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        priority: 0
      properties:
        policyId:
          format: uuid
          type: string
        priority:
          format: int32
          type: integer
      required:
      - policyId
      - priority
      type: object
    PolicyExportModel:
      example:
        replicaSettings:
          copyTagsFromVolumeEnabled: true
          mapping:
          - targetAmazonAccountName: targetAmazonAccountName
            targetRegionName: targetRegionName
            encryptionKey: encryptionKey
            sourceRegionName: sourceRegionName
          - targetAmazonAccountName: targetAmazonAccountName
            targetRegionName: targetRegionName
            encryptionKey: encryptionKey
            sourceRegionName: sourceRegionName
          additionalTags:
          - value: value
            key: key
          - value: value
            key: key
        regions:
        - regions
        - regions
        excludedItems:
          virtualMachines:
          - virtualMachines
          - virtualMachines
          tags:
          - value: value
            key: key
          - value: value
            key: key
        description: description
        priority: 0
        amazonAccountName: amazonAccountName
        policyNotificationSettings:
          notifyOnWarning: true
          notifyOnFailure: true
          recipient: recipient
          notifyOnSuccess: true
        snapshotSettings:
          copyTagsFromVolumeEnabled: true
          additionalTags:
          - value: value
            key: key
          - value: value
            key: key
          tryCreateVSSSnapshot: true
        backupSettings:
          targetRepositoryName: targetRepositoryName
        retrySettings:
          retryTimes: 3
        scheduleSettings:
          dailySchedule:
            runsPerHour: 1
            replicaOptions:
              schedule:
                hours:
                - true
                - true
              retention:
                count: 0
            days:
            - null
            - null
            backupOptions:
              schedule:
                hours:
                - true
                - true
              retention:
                count: 0
            snapshotOptions:
              schedule:
                hours:
                - true
                - true
              retention:
                count: 0
          monthlyScheduleEnabled: true
          yearlySchedule:
            dayOfMonth: 2
            retention:
              count: 0
              type: Years
            timeLocal: 2000-01-23T04:56:07.000+00:00
          dailyScheduleEnabled: true
          weeklySchedule:
            replicaOptions:
              schedule:
                days:
                - null
                - null
              retention:
                count: 0
            backupOptions:
              schedule:
                days:
                - null
                - null
              retention:
                count: 0
            snapshotOptions:
              schedule:
                days:
                - null
                - null
              retention:
                count: 0
            timeLocal: 2000-01-23T04:56:07.000+00:00
          monthlySchedule:
            dayOfMonth: 5
            replicaOptions:
              schedule:
                months:
                - null
                - null
              retention:
                count: 0
            backupOptions:
              schedule:
                months:
                - null
                - null
              retention:
                count: 0
            snapshotOptions:
              schedule:
                months:
                - null
                - null
              retention:
                count: 0
            timeLocal: 2000-01-23T04:56:07.000+00:00
          yearlyScheduleEnabled: true
          weeklyScheduleEnabled: true
        isEnabled: true
        name: name
        selectedItems:
          virtualMachines:
          - virtualMachines
          - virtualMachines
          tags:
          - value: value
            key: key
          - value: value
            key: key
      properties:
        snapshotSettings:
          $ref: '#/components/schemas/PolicySnapshotSettings'
        replicaSettings:
          $ref: '#/components/schemas/ReplicaSettingsExportModel'
        backupSettings:
          $ref: '#/components/schemas/BackupSettingsExportModel'
        regions:
          items:
            type: string
          type: array
        selectedItems:
          $ref: '#/components/schemas/PolicyBackupItemsExportModel'
        excludedItems:
          $ref: '#/components/schemas/PolicyBackupItemsExportModel'
        scheduleSettings:
          $ref: '#/components/schemas/ScheduleSettings'
        name:
          maxLength: 255
          minLength: 1
          type: string
        description:
          type: string
        priority:
          format: int64
          type: integer
        amazonAccountName:
          type: string
        retrySettings:
          $ref: '#/components/schemas/RetrySettings'
        policyNotificationSettings:
          $ref: '#/components/schemas/PolicyNotificationSettings'
        isEnabled:
          type: boolean
        backupType:
          $ref: '#/components/schemas/PolicySelectionTypes'
      required:
      - amazonAccountName
      - backupType
      - isEnabled
      - name
      - regions
      type: object
    ReplicaSettingsExportModel:
      example:
        copyTagsFromVolumeEnabled: true
        mapping:
        - targetAmazonAccountName: targetAmazonAccountName
          targetRegionName: targetRegionName
          encryptionKey: encryptionKey
          sourceRegionName: sourceRegionName
        - targetAmazonAccountName: targetAmazonAccountName
          targetRegionName: targetRegionName
          encryptionKey: encryptionKey
          sourceRegionName: sourceRegionName
        additionalTags:
        - value: value
          key: key
        - value: value
          key: key
      properties:
        mapping:
          items:
            $ref: '#/components/schemas/RemoteMappingExportModel'
          type: array
        additionalTags:
          items:
            $ref: '#/components/schemas/TagSpec'
          type: array
        copyTagsFromVolumeEnabled:
          type: boolean
      required:
      - mapping
      type: object
    BackupSettingsExportModel:
      example:
        targetRepositoryName: targetRepositoryName
      properties:
        targetRepositoryName:
          type: string
      required:
      - targetRepositoryName
      type: object
    PolicyBackupItemsExportModel:
      example:
        virtualMachines:
        - virtualMachines
        - virtualMachines
        tags:
        - value: value
          key: key
        - value: value
          key: key
      properties:
        virtualMachines:
          items:
            type: string
          type: array
        tags:
          items:
            $ref: '#/components/schemas/TagSpec'
          type: array
      type: object
    RemoteMappingExportModel:
      example:
        targetAmazonAccountName: targetAmazonAccountName
        targetRegionName: targetRegionName
        encryptionKey: encryptionKey
        sourceRegionName: sourceRegionName
      properties:
        sourceRegionName:
          type: string
        targetRegionName:
          type: string
        targetAmazonAccountName:
          type: string
        encryptionKey:
          type: string
      required:
      - sourceRegionName
      - targetAmazonAccountName
      - targetRegionName
      type: object
    CostEstimationSortColumns:
      enum:
      - virtualMachineNameAsc
      - virtualMachineNameDesc
      - snapshotCostAsc
      - snapshotCostDesc
      - replicaCostAsc
      - replicaCostDesc
      - backupCostAsc
      - backupCostDesc
      - trafficAsc
      - trafficDesc
      - transactionAsc
      - transactionDesc
      - totalAsc
      - totalDesc
      type: string
    CostEstimationFilters:
      properties:
        VirtualMachineNameFilter:
          type: string
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        Sort:
          items:
            $ref: '#/components/schemas/CostEstimationSortColumns'
          type: array
      type: object
    CostEstimationsPage:
      example:
        totalReplicaCost: 3.616076749251911
        totalSnapshotCost: 9.301444243932576
        totalTrafficCost: 4.145608029883936
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        isEmpty: true
        totalCount: 0
        items:
        - replicaCost: 1.4658129805029452
          virtualMachineId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          virtualMachineName: virtualMachineName
          snapshotCost: 6.027456183070403
          backupCost: 5.962133916683182
          transactionCost: 2.3021358869347655
          trafficCost: 5.637376656633329
          totalCost: 7.061401241503109
        - replicaCost: 1.4658129805029452
          virtualMachineId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          virtualMachineName: virtualMachineName
          snapshotCost: 6.027456183070403
          backupCost: 5.962133916683182
          transactionCost: 2.3021358869347655
          trafficCost: 5.637376656633329
          totalCost: 7.061401241503109
        totalBackupCost: 2.027123023002322
        totalTransactionCost: 7.386281948385884
        totalCost: 1.2315135367772556
      properties:
        totalCount:
          format: int32
          type: integer
        items:
          items:
            $ref: '#/components/schemas/CostEstimationItem'
          type: array
        isEmpty:
          type: boolean
        totalSnapshotCost:
          format: double
          type: number
        totalReplicaCost:
          format: double
          type: number
        totalBackupCost:
          format: double
          type: number
        totalTrafficCost:
          format: double
          type: number
        totalTransactionCost:
          format: double
          type: number
        totalCost:
          format: double
          type: number
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - isEmpty
      - items
      - totalCost
      - totalCount
      - totalTrafficCost
      - totalTransactionCost
      type: object
    CostEstimationItem:
      example:
        replicaCost: 1.4658129805029452
        virtualMachineId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        virtualMachineName: virtualMachineName
        snapshotCost: 6.027456183070403
        backupCost: 5.962133916683182
        transactionCost: 2.3021358869347655
        trafficCost: 5.637376656633329
        totalCost: 7.061401241503109
      properties:
        virtualMachineId:
          format: uuid
          type: string
        virtualMachineName:
          type: string
        snapshotCost:
          format: double
          type: number
        replicaCost:
          format: double
          type: number
        backupCost:
          format: double
          type: number
        trafficCost:
          format: double
          type: number
        transactionCost:
          format: double
          type: number
        totalCost:
          format: double
          type: number
      required:
      - totalCost
      - trafficCost
      - transactionCost
      - virtualMachineId
      - virtualMachineName
      type: object
    RegionsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/Region'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    RegionsSortColumns:
      enum:
      - nameAsc
      - nameDesk
      type: string
    RegionsFilters:
      properties:
        SearchPattern:
          type: string
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        Sort:
          items:
            $ref: '#/components/schemas/RegionsSortColumns'
          type: array
      type: object
    Region:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - id
      - name
      type: object
    AmazonInstancesTypesByRegionFilters:
      properties:
        offset:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        isArm64:
          type: boolean
        virtualizationTypes:
          items:
            type: string
          type: array
      type: object
    AmazonInstanceType:
      example:
        virtualizationType:
        - virtualizationType
        - virtualizationType
        isArm64: true
        name: name
        cpuCount: 6
        ram: 1
      properties:
        name:
          type: string
        cpuCount:
          format: int32
          type: integer
        ram:
          format: int32
          type: integer
        isArm64:
          type: boolean
        virtualizationType:
          items:
            type: string
          type: array
      required:
      - cpuCount
      - name
      - ram
      type: object
    AmazonInstanceTypesByRegionPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - virtualizationType:
          - virtualizationType
          - virtualizationType
          isArm64: true
          name: name
          cpuCount: 6
          ram: 1
        - virtualizationType:
          - virtualizationType
          - virtualizationType
          isArm64: true
          name: name
          cpuCount: 6
          ram: 1
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/AmazonInstanceType'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    PolicyItemDeletedFromAmazon:
      example:
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: VirtualMachine
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        type:
          enum:
          - VirtualMachine
          - Tag
          - Region
          - Bucket
          type: string
      required:
      - id
      - name
      - type
      type: object
    VmRestorePointsSortColumns:
      enum:
      - pointInTimeAsc
      - pointInTimeDesc
      - backupSizeBytesAsc
      - backupSizeBytesDesc
      - jobTypeAsc
      - jobTypeDesc
      type: string
    VmRestorePointsFilters:
      properties:
        VirtualMachineId:
          format: uuid
          type: string
        OnlyLatest:
          type: boolean
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        Sort:
          items:
            $ref: '#/components/schemas/VmRestorePointsSortColumns'
          type: array
      type: object
    JobTypes:
      enum:
      - Backup
      - Snapshot
      - ManualSnapshot
      - Replica
      type: string
    VmBackupVolume:
      example:
        iops: 5
        name: name
        encryptionKeyName: encryptionKeyName
        diskId: diskId
        backupSizeBytes: 1
        encryptionKey: encryptionKey
        device: device
      properties:
        diskId:
          type: string
        type:
          $ref: '#/components/schemas/Ec2DiskTypes'
        backupSizeBytes:
          format: int64
          type: integer
        iops:
          format: int32
          type: integer
        name:
          type: string
        device:
          type: string
        encryptionKey:
          type: string
        encryptionKeyName:
          type: string
      required:
      - backupSizeBytes
      - diskId
      - type
      type: object
    VmRestorePoint:
      example:
        pointInTime: 2000-01-23T04:56:07.000+00:00
        regionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        availabilityZoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        backupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        volumes:
        - iops: 5
          name: name
          encryptionKeyName: encryptionKeyName
          diskId: diskId
          backupSizeBytes: 1
          encryptionKey: encryptionKey
          device: device
        - iops: 5
          name: name
          encryptionKeyName: encryptionKeyName
          diskId: diskId
          backupSizeBytes: 1
          encryptionKey: encryptionKey
          device: device
        backupSizeBytes: 6
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        backupId:
          format: uuid
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypes'
        pointInTime:
          format: date-time
          type: string
        backupSizeBytes:
          format: int64
          type: integer
        volumes:
          items:
            $ref: '#/components/schemas/VmBackupVolume'
          type: array
        regionId:
          format: uuid
          type: string
        availabilityZoneId:
          format: uuid
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - backupId
      - backupSizeBytes
      - id
      - jobType
      - pointInTime
      - volumes
      type: object
    VmRestorePointsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - pointInTime: 2000-01-23T04:56:07.000+00:00
          regionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          availabilityZoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          backupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          volumes:
          - iops: 5
            name: name
            encryptionKeyName: encryptionKeyName
            diskId: diskId
            backupSizeBytes: 1
            encryptionKey: encryptionKey
            device: device
          - iops: 5
            name: name
            encryptionKeyName: encryptionKeyName
            diskId: diskId
            backupSizeBytes: 1
            encryptionKey: encryptionKey
            device: device
          backupSizeBytes: 6
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - pointInTime: 2000-01-23T04:56:07.000+00:00
          regionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          availabilityZoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          backupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          volumes:
          - iops: 5
            name: name
            encryptionKeyName: encryptionKeyName
            diskId: diskId
            backupSizeBytes: 1
            encryptionKey: encryptionKey
            device: device
          - iops: 5
            name: name
            encryptionKeyName: encryptionKeyName
            diskId: diskId
            backupSizeBytes: 1
            encryptionKey: encryptionKey
            device: device
          backupSizeBytes: 6
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/VmRestorePoint'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    VmRestorePointDefaultNetworkSettings:
      example:
        securityGroupName: securityGroupName
        securityGroupId: securityGroupId
        networkName: networkName
        subNetworkName: subNetworkName
        networkId: networkId
        subNetworkId: subNetworkId
        restorePointId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        restorePointId:
          format: uuid
          type: string
        networkName:
          type: string
        networkId:
          type: string
        subNetworkName:
          type: string
        subNetworkId:
          type: string
        securityGroupName:
          type: string
        securityGroupId:
          type: string
      required:
      - restorePointId
      type: object
    DiskBulkRestoreOptions:
      example:
        amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        reason: reason
        secretKey: secretKey
        accessKey: accessKey
        toAlternative:
          encryptionKeyId: encryptionKeyId
          preserveEncryptionForVolumes: true
          availabilityZoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        volumes:
        - name: name
          diskId: diskId
        - name: name
          diskId: diskId
      properties:
        reason:
          type: string
        amazonAccountId:
          format: uuid
          type: string
        accessKey:
          type: string
        secretKey:
          type: string
        volumes:
          items:
            $ref: '#/components/schemas/DiskRestoreOptions'
          type: array
        toAlternative:
          $ref: '#/components/schemas/DiskBulkRestoreToAlternativeOptions'
      required:
      - volumes
      type: object
    DiskBulkRestoreToAlternativeOptions:
      example:
        encryptionKeyId: encryptionKeyId
        preserveEncryptionForVolumes: true
        availabilityZoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        availabilityZoneId:
          format: uuid
          type: string
        preserveEncryptionForVolumes:
          type: boolean
        encryptionKeyId:
          type: string
      required:
      - availabilityZoneId
      - preserveEncryptionForVolumes
      type: object
    Ec2DiskTypes:
      enum:
      - Standart
      - St1
      - Sc1
      - Io1
      - Gp2
      type: string
    DiskRestoreOptions:
      example:
        name: name
        diskId: diskId
      properties:
        diskId:
          type: string
        name:
          type: string
      required:
      - diskId
      type: object
    ValidationMessage:
      example:
        severity: Warning
        contextId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message: message
      properties:
        severity:
          enum:
          - Warning
          - Error
          type: string
        message:
          type: string
        contextId:
          format: uuid
          type: string
      type: object
    VirtualMachineRestoreOptions:
      example:
        amazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        reason: reason
        secretKey: secretKey
        accessKey: accessKey
        toAlternative:
          subnetId: subnetId
          vmType: vmType
          encryptionKeyId: encryptionKeyId
          preserveEncryptionForVolumes: true
          regionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          networkSecurityGroupId: networkSecurityGroupId
        startInstance: true
      properties:
        reason:
          type: string
        amazonAccountId:
          format: uuid
          type: string
        accessKey:
          type: string
        secretKey:
          type: string
        startInstance:
          type: boolean
        toAlternative:
          $ref: '#/components/schemas/VirtualMachineToAlternativeRestoreOptions'
      type: object
    VirtualMachineToAlternativeRestoreOptions:
      example:
        subnetId: subnetId
        vmType: vmType
        encryptionKeyId: encryptionKeyId
        preserveEncryptionForVolumes: true
        regionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        networkSecurityGroupId: networkSecurityGroupId
      properties:
        name:
          type: string
        regionId:
          format: uuid
          type: string
        vmType:
          type: string
        subnetId:
          type: string
        networkSecurityGroupId:
          type: string
        preserveEncryptionForVolumes:
          type: boolean
        encryptionKeyId:
          type: string
      required:
      - name
      - networkSecurityGroupId
      - preserveEncryptionForVolumes
      - regionId
      - subnetId
      - vmType
      type: object
    SessionTypes:
      enum:
      - Policy
      - Job
      - Task
      - UserPolicy
      - RetentionActivity
      - RestoreTask
      - FLRTask
      - SelfBackupActivity
      - ImportPolicy
      - TombstoneRetention
      type: string
    SessionsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - reason: reason
          usn: 1
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          _embedded:
            restoreJobInfo:
              method: GET
              rel: rel
              href: href
            retentionJobDeletedRestorePoints:
              method: GET
              rel: rel
              href: href
            backupJobInfo:
              method: GET
              rel: rel
              href: href
          executionStartTime: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          executionDuration: 6
          executionStopTime: 2000-01-23T04:56:07.000+00:00
        - reason: reason
          usn: 1
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          _embedded:
            restoreJobInfo:
              method: GET
              rel: rel
              href: href
            retentionJobDeletedRestorePoints:
              method: GET
              rel: rel
              href: href
            backupJobInfo:
              method: GET
              rel: rel
              href: href
          executionStartTime: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          executionDuration: 6
          executionStopTime: 2000-01-23T04:56:07.000+00:00
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/Session'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    Session:
      example:
        reason: reason
        usn: 1
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        _embedded:
          restoreJobInfo:
            method: GET
            rel: rel
            href: href
          retentionJobDeletedRestorePoints:
            method: GET
            rel: rel
            href: href
          backupJobInfo:
            method: GET
            rel: rel
            href: href
        executionStartTime: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        executionDuration: 6
        executionStopTime: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/SessionTypes'
        executionStartTime:
          format: date-time
          type: string
        executionStopTime:
          format: date-time
          type: string
        executionDuration:
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/SessionStatuses'
        result:
          $ref: '#/components/schemas/SessionResults'
        reason:
          type: string
        usn:
          format: int64
          type: integer
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        _embedded:
          $ref: '#/components/schemas/SessionEmbeddedResources'
      required:
      - id
      - status
      - type
      - usn
      type: object
    SessionLink:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        sessionId:
          format: uuid
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - sessionId
      type: object
    SessionEmbeddedResources:
      example:
        restoreJobInfo:
          method: GET
          rel: rel
          href: href
        retentionJobDeletedRestorePoints:
          method: GET
          rel: rel
          href: href
        backupJobInfo:
          method: GET
          rel: rel
          href: href
      properties:
        backupJobInfo:
          $ref: '#/components/schemas/Link'
        restoreJobInfo:
          $ref: '#/components/schemas/Link'
        retentionJobDeletedRestorePoints:
          $ref: '#/components/schemas/Link'
      type: object
    RetentionJobDeletedRestorePointSortColumns:
      enum:
      - nameAsc
      - nameDesc
      - statusAsc
      - statusDesc
      - regionAsc
      - regionDesc
      type: string
    RetentionJobDeletedRestorePointsFilters:
      properties:
        SearchPattern:
          type: string
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        Sort:
          items:
            $ref: '#/components/schemas/RetentionJobDeletedRestorePointSortColumns'
          type: array
      type: object
    SessionItemsStatuses:
      enum:
      - Succeeded
      - Warning
      - Failed
      type: string
    RetentionJobDeletedRestorePoint:
      example:
        _embedded:
          region:
            method: GET
            rel: rel
            href: href
        name: name
        region: region
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/SessionItemsStatuses'
        region:
          type: string
        _embedded:
          $ref: '#/components/schemas/RetentionJobDeletedRestorePointEmbedded'
      type: object
    RetentionJobDeletedRestorePointEmbedded:
      example:
        region:
          method: GET
          rel: rel
          href: href
      properties:
        region:
          $ref: '#/components/schemas/Link'
      type: object
    RetentionJobDeletedRestorePointsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - _embedded:
            region:
              method: GET
              rel: rel
              href: href
          name: name
          region: region
        - _embedded:
            region:
              method: GET
              rel: rel
              href: href
          name: name
          region: region
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/RetentionJobDeletedRestorePoint'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    ProtectedItemsSortColumns:
      enum:
      - virtualMachineNameAsc
      - virtualMachineNameDesc
      - regionAsc
      - regionDesc
      type: string
    ProtectedItemsFilters:
      properties:
        SearchPattern:
          type: string
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        Sort:
          items:
            $ref: '#/components/schemas/ProtectedItemsSortColumns'
          type: array
      type: object
    ProtectedItemEmbedded:
      example:
        virtualMachine:
          method: GET
          rel: rel
          href: href
        region:
          method: GET
          rel: rel
          href: href
      properties:
        virtualMachine:
          $ref: '#/components/schemas/Link'
        region:
          $ref: '#/components/schemas/Link'
      type: object
    ProtectedItem:
      example:
        _embedded:
          virtualMachine:
            method: GET
            rel: rel
            href: href
          region:
            method: GET
            rel: rel
            href: href
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        region: region
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/SessionItemsStatuses'
        region:
          type: string
        _embedded:
          $ref: '#/components/schemas/ProtectedItemEmbedded'
      required:
      - id
      - name
      type: object
    ProtectedItemsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - _embedded:
            virtualMachine:
              method: GET
              rel: rel
              href: href
            region:
              method: GET
              rel: rel
              href: href
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          region: region
        - _embedded:
            virtualMachine:
              method: GET
              rel: rel
              href: href
            region:
              method: GET
              rel: rel
              href: href
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          region: region
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/ProtectedItem'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    RestoredItemsSortColumns:
      enum:
      - nameAsc
      - nameDesc
      - regionAsc
      - regionDesc
      type: string
    RestoredItemsFilters:
      properties:
        SearchPattern:
          type: string
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        Sort:
          items:
            $ref: '#/components/schemas/RestoredItemsSortColumns'
          type: array
      type: object
    RestoreItemEmbedded:
      example:
        virtualMachine:
          method: GET
          rel: rel
          href: href
        region:
          method: GET
          rel: rel
          href: href
      properties:
        virtualMachine:
          $ref: '#/components/schemas/Link'
        region:
          $ref: '#/components/schemas/Link'
      type: object
    RestoredItem:
      example:
        _embedded:
          virtualMachine:
            method: GET
            rel: rel
            href: href
          region:
            method: GET
            rel: rel
            href: href
        regionName: regionName
        name: name
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/SessionItemsStatuses'
        regionName:
          type: string
        _embedded:
          $ref: '#/components/schemas/RestoreItemEmbedded'
      type: object
    RestoredItemsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - _embedded:
            virtualMachine:
              method: GET
              rel: rel
              href: href
            region:
              method: GET
              rel: rel
              href: href
          regionName: regionName
          name: name
        - _embedded:
            virtualMachine:
              method: GET
              rel: rel
              href: href
            region:
              method: GET
              rel: rel
              href: href
          regionName: regionName
          name: name
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/RestoredItem'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    SessionsSortColumns:
      enum:
      - startTimeAsc
      - startTimeDesc
      - stopTimeAsc
      - stopTimeDesc
      - durationAsc
      - durationDesc
      - typeAsc
      - typeDesc
      - reasonAsc
      - reasonDesc
      - usnAsc
      - usnDesc
      type: string
    SessionsFilters:
      properties:
        Offset:
          format: int32
          minimum: 0
          type: integer
        Limit:
          format: int32
          minimum: -1
          type: integer
        PolicyId:
          format: uuid
          type: string
        Status:
          items:
            $ref: '#/components/schemas/SessionStatuses'
          type: array
        Types:
          items:
            $ref: '#/components/schemas/SessionTypes'
          type: array
        FromUtc:
          format: date-time
          type: string
        Usn:
          format: int64
          type: integer
        Sort:
          items:
            $ref: '#/components/schemas/SessionsSortColumns'
          type: array
      type: object
    SessionLog:
      example:
        log:
        - executionStartTime: 2000-01-23T04:56:07.000+00:00
          executionDuration: 0
          message: message
          logTime: 2000-01-23T04:56:07.000+00:00
          status: NeverExecuted
        - executionStartTime: 2000-01-23T04:56:07.000+00:00
          executionDuration: 0
          message: message
          logTime: 2000-01-23T04:56:07.000+00:00
          status: NeverExecuted
        sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        sessionId:
          format: uuid
          type: string
        log:
          items:
            $ref: '#/components/schemas/LogItem'
          type: array
      required:
      - sessionId
      type: object
    FlrOptions:
      example:
        reason: reason
      properties:
        reason:
          type: string
      type: object
    StartFlrResponse:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: url
      properties:
        sessionId:
          format: uuid
          type: string
        url:
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - sessionId
      - url
      type: object
    LogItem:
      example:
        executionStartTime: 2000-01-23T04:56:07.000+00:00
        executionDuration: 0
        message: message
        logTime: 2000-01-23T04:56:07.000+00:00
        status: NeverExecuted
      properties:
        logTime:
          format: date-time
          type: string
        status:
          enum:
          - NeverExecuted
          - Success
          - Warning
          - Error
          - Pending
          - Canceling
          - Canceled
          - Running
          - RunningWithWarning
          - RunningWithError
          type: string
        message:
          type: string
        executionStartTime:
          format: date-time
          type: string
        executionDuration:
          format: int64
          type: integer
      required:
      - logTime
      - status
      type: object
    RetrySettings:
      example:
        retryTimes: 3
      properties:
        retryTimes:
          format: int32
          type: integer
      required:
      - retryTimes
      type: object
    PolicyNotificationSettings:
      example:
        notifyOnWarning: true
        notifyOnFailure: true
        recipient: recipient
        notifyOnSuccess: true
      properties:
        recipient:
          type: string
        notifyOnSuccess:
          type: boolean
        notifyOnWarning:
          type: boolean
        notifyOnFailure:
          type: boolean
      type: object
    RetentionSetting:
      example:
        timeRetentionDuration: 0
        retentionDurationType: Daily
      properties:
        timeRetentionDuration:
          format: int32
          type: integer
        retentionDurationType:
          enum:
          - Daily
          - Monthly
          - Points
          type: string
      required:
      - retentionDurationType
      - timeRetentionDuration
      type: object
    RetentionSettings:
      example:
        lingeringSnapshotRetention:
          timeRetentionDuration: 0
          retentionDurationType: Daily
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        sessionsRetention:
          timeRetentionDuration: 0
          retentionDurationType: Daily
        lingeringSnapshotRetentionDisabled: true
        keepAllSessions: true
      properties:
        lingeringSnapshotRetentionDisabled:
          type: boolean
        lingeringSnapshotRetention:
          $ref: '#/components/schemas/RetentionSetting'
        sessionsRetention:
          $ref: '#/components/schemas/RetentionSetting'
        keepAllSessions:
          type: boolean
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - keepAllSessions
      - lingeringSnapshotRetentionDisabled
      type: object
    AmazonConnectionSpec:
      example:
        AmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        secretKey: secretKey
        accessKey: accessKey
        RegionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        AmazonAccountId:
          format: uuid
          type: string
        accessKey:
          type: string
        secretKey:
          type: string
        RegionId:
          format: uuid
          type: string
      required:
      - RegionId
      type: object
    AmazonConnection:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - id
      type: object
    AmazonConnectionsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/AmazonConnection'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    CloudNetworksFilters:
      properties:
        Offset:
          format: int32
          type: integer
        Limit:
          format: int32
          type: integer
      type: object
    CloudNetworksPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - resourceId: resourceId
          isDefault: true
          cidrBlock: cidrBlock
          name: name
        - resourceId: resourceId
          isDefault: true
          cidrBlock: cidrBlock
          name: name
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/CloudNetwork'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    CloudNetworkStates:
      enum:
      - Available
      - Pending
      type: string
    CloudNetwork:
      example:
        resourceId: resourceId
        isDefault: true
        cidrBlock: cidrBlock
        name: name
      properties:
        resourceId:
          type: string
        name:
          type: string
        cidrBlock:
          type: string
        state:
          $ref: '#/components/schemas/CloudNetworkStates'
        isDefault:
          type: boolean
      required:
      - cidrBlock
      - isDefault
      - resourceId
      - state
      type: object
    CloudSubnetworksFilters:
      properties:
        cloudNetworkId:
          type: string
        availabilityZone:
          format: uuid
          type: string
        Offset:
          format: int32
          type: integer
        Limit:
          format: int32
          type: integer
      type: object
    CloudSubnetworksPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - resourceId: resourceId
          cloudNetworkResourceId: cloudNetworkResourceId
          cidrBlock: cidrBlock
          name: name
          availabilityZone: availabilityZone
        - resourceId: resourceId
          cloudNetworkResourceId: cloudNetworkResourceId
          cidrBlock: cidrBlock
          name: name
          availabilityZone: availabilityZone
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/CloudSubnetwork'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    CloudSubnetwork:
      example:
        resourceId: resourceId
        cloudNetworkResourceId: cloudNetworkResourceId
        cidrBlock: cidrBlock
        name: name
        availabilityZone: availabilityZone
      properties:
        resourceId:
          type: string
        name:
          type: string
        cloudNetworkResourceId:
          type: string
        cidrBlock:
          type: string
        availabilityZone:
          type: string
      required:
      - cidrBlock
      - cloudNetworkResourceId
      - name
      - resourceId
      type: object
    CloudSecurityGroupsFilters:
      properties:
        cloudNetworkId:
          type: string
        offset:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
      type: object
    CloudSecurityGroupsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - resourceId: resourceId
          cloudNetworkResourceId: cloudNetworkResourceId
          name: name
        - resourceId: resourceId
          cloudNetworkResourceId: cloudNetworkResourceId
          name: name
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/CloudSecurityGroup'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    CloudSecurityGroup:
      example:
        resourceId: resourceId
        cloudNetworkResourceId: cloudNetworkResourceId
        name: name
      properties:
        resourceId:
          type: string
        cloudNetworkResourceId:
          type: string
        name:
          type: string
      required:
      - cloudNetworkResourceId
      - name
      - resourceId
      type: object
    CloudSubnetS3EndpointValidationResult:
      example:
        isValid: true
        details: details
      properties:
        isValid:
          type: boolean
        details:
          type: string
      required:
      - details
      - isValid
      type: object
    CloudEncryptionKeysFilters:
      properties:
        offset:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
      type: object
    CloudEncryptionKeysPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - name: name
          arn: arn
        - name: name
          arn: arn
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/CloudEncryptionKey'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    CloudEncryptionKey:
      example:
        name: name
        arn: arn
      properties:
        arn:
          type: string
        name:
          type: string
      required:
      - arn
      - name
      type: object
    BucketFoldersFiltersOrderColumns:
      enum:
      - NameAsc
      - NameDesc
      type: string
    BucketFoldersFilters:
      properties:
        offset:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        sort:
          items:
            $ref: '#/components/schemas/BucketFoldersFiltersOrderColumns'
          type: array
      type: object
    BucketFoldersPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - name: name
          folderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - name: name
          folderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/BucketFolder'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    BucketFolder:
      example:
        name: name
        folderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        name:
          type: string
        folderId:
          format: uuid
          type: string
      required:
      - folderId
      - name
      type: object
    ServiceAccountSettings:
      example:
        serviceRegion: serviceRegion
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        serviceAmazonAccountName: serviceAmazonAccountName
        serviceAmazonAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        serviceAmazonAccountId:
          format: uuid
          type: string
        serviceAmazonAccountName:
          type: string
        serviceAmazonAccountRegionType:
          $ref: '#/components/schemas/RegionTypes'
        serviceRegion:
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - serviceAmazonAccountId
      type: object
    RegionSettingsFilters:
      properties:
        offset:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
      type: object
    RegionSettingsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - parentReiognId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          cloudNetworkName: cloudNetworkName
          cloudSecurityGroupName: cloudSecurityGroupName
          parentRegionName: parentRegionName
          regionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          cloudSubnetworkId: cloudSubnetworkId
          regionName: regionName
          cloudSecurityGroupId: cloudSecurityGroupId
          cloudNetworkId: cloudNetworkId
          cloudSubnetworkName: cloudSubnetworkName
        - parentReiognId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          cloudNetworkName: cloudNetworkName
          cloudSecurityGroupName: cloudSecurityGroupName
          parentRegionName: parentRegionName
          regionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          cloudSubnetworkId: cloudSubnetworkId
          regionName: regionName
          cloudSecurityGroupId: cloudSecurityGroupId
          cloudNetworkId: cloudNetworkId
          cloudSubnetworkName: cloudSubnetworkName
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/RegionSettings'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    RegionSettingsSpec:
      example:
        cloudSubnetworkId: cloudSubnetworkId
        cloudSecurityGroupId: cloudSecurityGroupId
        cloudNetworkId: cloudNetworkId
        availableZoneId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        availableZoneId:
          format: uuid
          type: string
        cloudNetworkId:
          type: string
        cloudSubnetworkId:
          type: string
        cloudSecurityGroupId:
          type: string
      required:
      - availableZoneId
      - cloudNetworkId
      - cloudSecurityGroupId
      - cloudSubnetworkId
      type: object
    RegionSettings:
      example:
        parentReiognId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        cloudNetworkName: cloudNetworkName
        cloudSecurityGroupName: cloudSecurityGroupName
        parentRegionName: parentRegionName
        regionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        cloudSubnetworkId: cloudSubnetworkId
        regionName: regionName
        cloudSecurityGroupId: cloudSecurityGroupId
        cloudNetworkId: cloudNetworkId
        cloudSubnetworkName: cloudSubnetworkName
      properties:
        regionId:
          format: uuid
          type: string
        regionName:
          type: string
        parentReiognId:
          format: uuid
          type: string
        parentRegionName:
          type: string
        cloudNetworkId:
          type: string
        cloudNetworkName:
          type: string
        cloudSubnetworkId:
          type: string
        cloudSubnetworkName:
          type: string
        cloudSecurityGroupId:
          type: string
        cloudSecurityGroupName:
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - cloudNetworkId
      - cloudSecurityGroupId
      - cloudSubnetworkId
      - regionId
      type: object
    LicensedWorkloadsSortColumns:
      enum:
      - nameAsc
      - nameDesc
      - lastBackupAsc
      - lastBackupDesc
      type: string
    LicensedWorkloadsFilters:
      properties:
        searchPattern:
          type: string
        offset:
          format: int32
          minimum: 0
          type: integer
        limit:
          format: int32
          minimum: -1
          type: integer
        sort:
          items:
            $ref: '#/components/schemas/LicensedWorkloadsSortColumns'
          type: array
      type: object
    LicenseInfo:
      example:
        licenseType: Free
        instances: 6
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        supportId: supportId
        licenseId: licenseId
        licenseExpires: 2000-01-23T04:56:07.000+00:00
        instancesUses: 0.8008281904610115
        licensedTo: licensedTo
      properties:
        licenseType:
          enum:
          - Free
          - Subscription
          - Marketplace
          - Managed
          type: string
        instancesUses:
          format: double
          type: number
        instances:
          format: int32
          type: integer
        licensedTo:
          type: string
        licenseExpires:
          format: date-time
          type: string
        licenseId:
          type: string
        supportId:
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      type: object
    LicensedWorkloadsPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          lastBackupTime: 2000-01-23T04:56:07.000+00:00
        - _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          lastBackupTime: 2000-01-23T04:56:07.000+00:00
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/LicensedWorkload'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    LicensedWorkload:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        lastBackupTime: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        lastBackupTime:
          format: date-time
          type: string
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      type: object
    LicenseNotificationTypes:
      enum:
      - Expiration
      - Exceed
      - Marketplace
      type: string
    LicenseNotificationSeverities:
      enum:
      - Information
      - Warning
      - Error
      type: string
    LicenseNotificationReply:
      example:
        replyText: replyText
        replyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        replyId:
          format: uuid
          type: string
        notificationType:
          $ref: '#/components/schemas/LicenseNotificationTypes'
        replyText:
          type: string
      required:
      - notificationType
      - replyId
      - replyText
      type: object
    LicenseNotification:
      example:
        replies:
        - replyText: replyText
          replyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - replyText: replyText
          replyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message: message
      properties:
        notificationType:
          $ref: '#/components/schemas/LicenseNotificationTypes'
        notificationSeverity:
          $ref: '#/components/schemas/LicenseNotificationSeverities'
        message:
          type: string
        replies:
          items:
            $ref: '#/components/schemas/LicenseNotificationReply'
          type: array
      required:
      - message
      - notificationSeverity
      - notificationType
      type: object
    LicenseNotifications:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        results:
        - replies:
          - replyText: replyText
            replyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - replyText: replyText
            replyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          message: message
        - replies:
          - replyText: replyText
            replyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - replyText: replyText
            replyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          message: message
      properties:
        results:
          items:
            $ref: '#/components/schemas/LicenseNotification'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      type: object
    ResolveNotificationsSpec:
      example:
        selectedReplies:
        - replyText: replyText
          replyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - replyText: replyText
          replyId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        notificationsToResolve:
        - null
        - null
      properties:
        notificationsToResolve:
          items:
            $ref: '#/components/schemas/LicenseNotificationTypes'
          type: array
        selectedReplies:
          items:
            $ref: '#/components/schemas/LicenseNotificationReply'
          type: array
      required:
      - notificationsToResolve
      type: object
    EmailNotifications:
      example:
        server: server
        enableScheduledNotification: true
        subject: subject
        notifyTime: 2000-01-23T04:56:07.000+00:00
        useCredentials: true
        onFailure: true
        credentialsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        enabled: true
        timeout: 6
        useSsl: true
        port: 0
        onWarning: true
        from: from
        to: to
        onSuccess: true
      properties:
        enabled:
          type: boolean
        server:
          type: string
        port:
          type: integer
        useSsl:
          type: boolean
        timeout:
          type: integer
        useCredentials:
          type: boolean
        credentialsId:
          format: uuid
          type: string
        from:
          type: string
        to:
          type: string
        subject:
          type: string
        onSuccess:
          type: boolean
        onWarning:
          type: boolean
        onFailure:
          type: boolean
        enableScheduledNotification:
          type: boolean
        notifyTime:
          format: date-time
          type: string
      required:
      - enabled
      - from
      - port
      - server
      - subject
      - to
      type: object
    EmailNotificationsTestResult:
      example:
        success: true
        message: message
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
      - success
      type: object
    UsersSortColumns:
      enum:
      - nameAsc
      - nameDesc
      - descriptionAsc
      - descriptionDesc
      - isDefaultAsc
      - isDefaultDesc
      - mfaEnabledAsc
      - mfaEnabledDesc
      type: string
    UsersFilters:
      properties:
        searchPattern:
          type: string
        offset:
          format: int32
          minimum: 0
          type: integer
        limit:
          format: int32
          minimum: -1
          type: integer
        sort:
          items:
            $ref: '#/components/schemas/UsersSortColumns'
          type: array
      type: object
    UserCreateSpec:
      example:
        password: password
        name: name
        description: description
      properties:
        name:
          minLength: 1
          type: string
        description:
          type: string
        password:
          minLength: 1
          type: string
      required:
      - description
      - name
      - password
      type: object
    UserUpdateSpec:
      example:
        password: password
        oldPassword: oldPassword
        description: description
      properties:
        description:
          type: string
        password:
          type: string
        oldPassword:
          type: string
      type: object
    User:
      example:
        isDefault: true
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        name: name
        description: description
        mfaEnabled: true
      properties:
        name:
          type: string
        description:
          type: string
        mfaEnabled:
          type: boolean
        isDefault:
          type: boolean
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - description
      - isDefault
      - mfaEnabled
      - name
      type: object
    UsersPage:
      example:
        _links:
        - method: GET
          rel: rel
          href: href
        - method: GET
          rel: rel
          href: href
        totalCount: 0
        results:
        - isDefault: true
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          name: name
          description: description
          mfaEnabled: true
        - isDefault: true
          _links:
          - method: GET
            rel: rel
            href: href
          - method: GET
            rel: rel
            href: href
          name: name
          description: description
          mfaEnabled: true
      properties:
        totalCount:
          format: int32
          type: integer
        results:
          items:
            $ref: '#/components/schemas/User'
          type: array
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - results
      - totalCount
      type: object
    UserNameValidationSpec:
      example:
        name: name
      properties:
        name:
          minLength: 1
          type: string
      required:
      - name
      type: object
    UserDescriptionValidationSpec:
      example:
        description: description
      properties:
        description:
          type: string
      required:
      - description
      type: object
    UserPasswordValidationSpec:
      example:
        password: password
      properties:
        password:
          minLength: 1
          type: string
      required:
      - password
      type: object
    UserMfaSetup:
      example:
        recreate: true
      properties:
        recreate:
          type: boolean
      type: object
    UserMfaData:
      example:
        scratchCodes:
        - scratchCodes
        - scratchCodes
        secretKey: secretKey
        qrString: qrString
        userName: userName
        token: token
      properties:
        userName:
          type: string
        qrString:
          type: string
        secretKey:
          type: string
        scratchCodes:
          items:
            type: string
          type: array
        token:
          type: string
      type: object
    UserMfaAccept:
      example:
        code: code
        token: token
      properties:
        code:
          minLength: 1
          type: string
        token:
          minLength: 1
          type: string
      required:
      - code
      - token
      type: object
    IsFirstLoginResult:
      example:
        isFirstLogin: true
      properties:
        isFirstLogin:
          type: boolean
      required:
      - isFirstLogin
      type: object
    CheckInstanceIdSpec:
      example:
        instanceId: instanceId
      properties:
        instanceId:
          type: string
      required:
      - instanceId
      type: object
    CheckInstanceIdResult:
      example:
        isValid: true
      properties:
        isValid:
          type: boolean
      required:
      - isValid
      type: object
    DefaultUserSpec:
      example:
        instance:
          instanceId: instanceId
        userSpec:
          password: password
          name: name
          description: description
      properties:
        instance:
          $ref: '#/components/schemas/CheckInstanceIdSpec'
        userSpec:
          $ref: '#/components/schemas/UserCreateSpec'
      required:
      - instance
      - userSpec
      type: object
    LogExportSpec:
      properties:
        exportLogsType:
          enum:
          - LastDays
          - BetweenDates
          type: string
        days:
          format: int32
          type: integer
        fromDateUtc:
          format: date-time
          type: string
        toDateUtc:
          format: date-time
          type: string
      type: object
    ProductVersion:
      example:
        about: about
        version: version
      properties:
        about:
          type: string
        version:
          type: string
      required:
      - about
      - version
      type: object
    ProductId:
      example:
        awsid: awsid
        supportid: supportid
      properties:
        awsid:
          type: string
        supportid:
          type: string
      required:
      - awsid
      - supportid
      type: object
    CertificateRegenerateSpec:
      example:
        validBy: 2000-01-23T04:56:07.000+00:00
      properties:
        validBy:
          format: date-time
          type: string
      type: object
    Certificate:
      example:
        serialNumber: serialNumber
        keyAlgorithm: keyAlgorithm
        issuedTo: issuedTo
        keySize: keySize
        subject: subject
        issuedBy: issuedBy
        thumbprint: thumbprint
        automaticallyGenerated: true
        validFrom: 2000-01-23T04:56:07.000+00:00
        validBy: 2000-01-23T04:56:07.000+00:00
      properties:
        thumbprint:
          description: certificate thumpbprint
          type: string
        serialNumber:
          type: string
        keyAlgorithm:
          description: certificate key algorithm
          type: string
        keySize:
          description: certificate key size
          type: string
        subject:
          description: certificate subject
          type: string
        issuedTo:
          description: certificate acquirer
          type: string
        issuedBy:
          description: certificate issuer
          type: string
        validFrom:
          format: date-time
          type: string
        validBy:
          format: date-time
          type: string
        automaticallyGenerated:
          type: boolean
      required:
      - automaticallyGenerated
      - issuedBy
      - issuedTo
      - keyAlgorithm
      - keySize
      - serialNumber
      - subject
      - thumbprint
      - validBy
      - validFrom
      type: object
    Certificates:
      example:
        data:
        - serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          issuedTo: issuedTo
          keySize: keySize
          subject: subject
          issuedBy: issuedBy
          thumbprint: thumbprint
          automaticallyGenerated: true
          validFrom: 2000-01-23T04:56:07.000+00:00
          validBy: 2000-01-23T04:56:07.000+00:00
        - serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          issuedTo: issuedTo
          keySize: keySize
          subject: subject
          issuedBy: issuedBy
          thumbprint: thumbprint
          automaticallyGenerated: true
          validFrom: 2000-01-23T04:56:07.000+00:00
          validBy: 2000-01-23T04:56:07.000+00:00
      properties:
        data:
          items:
            $ref: '#/components/schemas/Certificate'
          type: array
      type: object
    DateTimeInfo:
      example:
        utcDateTime: 2000-01-23T04:56:07.000+00:00
      properties:
        utcDateTime:
          format: date-time
          type: string
      required:
      - utcDateTime
      type: object
    SummaryChangesTrends:
      enum:
      - NotChanged
      - Increased
      - Decreased
      type: string
    SummaryStatistics:
      example:
        policiesCount: 5
        instancesCount: 6
        protectedInstancesCount: 1
        alarmsCount: 0
        repositoriesCount: 5
      properties:
        alarmsCount:
          format: int32
          type: integer
        alarmsCountChangesTrend:
          $ref: '#/components/schemas/SummaryChangesTrends'
        instancesCount:
          format: int32
          type: integer
        instancesCountChangesTrend:
          $ref: '#/components/schemas/SummaryChangesTrends'
        protectedInstancesCount:
          format: int32
          type: integer
        protectedInstancesCountChangesTrend:
          $ref: '#/components/schemas/SummaryChangesTrends'
        policiesCount:
          format: int32
          type: integer
        policiesCountChangesTrend:
          $ref: '#/components/schemas/SummaryChangesTrends'
        repositoriesCount:
          format: int32
          type: integer
        repositoriesCountChangesTrend:
          $ref: '#/components/schemas/SummaryChangesTrends'
      required:
      - alarmsCount
      - alarmsCountChangesTrend
      - instancesCount
      - instancesCountChangesTrend
      - policiesCount
      - policiesCountChangesTrend
      - protectedInstancesCount
      - protectedInstancesCountChangesTrend
      - repositoriesCount
      - repositoriesCountChangesTrend
      type: object
    TimeZone:
      example:
        displayName: displayName
        name: name
      properties:
        name:
          type: string
        displayName:
          type: string
      required:
      - displayName
      - name
      type: object
    TimeZones:
      example:
        items:
        - displayName: displayName
          name: name
        - displayName: displayName
          name: name
      properties:
        items:
          items:
            $ref: '#/components/schemas/TimeZone'
          type: array
      required:
      - items
      type: object
    DateTimeSettings:
      example:
        useCustomSettings: true
        timezone:
          displayName: displayName
          name: name
      properties:
        timezone:
          $ref: '#/components/schemas/TimeZone'
        useCustomSettings:
          type: boolean
      required:
      - timezone
      - useCustomSettings
      type: object
    UserStatus:
      example:
        repositoryCount: 6
        policiesCount: 1
        connectionsCount: 0
        workerLocationsCount: 5
      properties:
        connectionsCount:
          type: integer
        repositoryCount:
          type: integer
        policiesCount:
          type: integer
        workerLocationsCount:
          type: integer
      required:
      - connectionsCount
      - policiesCount
      - repositoryCount
      - workerLocationsCount
      type: object
    LicenseAgreements:
      example:
        items:
        - checksum: checksum
          content: content
        - checksum: checksum
          content: content
      properties:
        items:
          items:
            $ref: '#/components/schemas/LicenseAgreement'
          type: array
      type: object
    LicenseAgreementTypes:
      enum:
      - Eula
      - ThirdPartyAgreement
      type: string
    LicenseAgreement:
      example:
        checksum: checksum
        content: content
      properties:
        checksum:
          type: string
        content:
          type: string
        type:
          $ref: '#/components/schemas/LicenseAgreementTypes'
      required:
      - type
      type: object
    LicenseAgreementAcceptResult:
      example:
        accepted: true
      properties:
        accepted:
          type: boolean
      required:
      - accepted
      type: object
    LicenseAgreementDownloadSpec:
      properties:
        licenseAgreementType:
          $ref: '#/components/schemas/LicenseAgreementTypes'
      required:
      - licenseAgreementType
      type: object
    LoginGrantTypes:
      enum:
      - password
      - refresh_token
      - authorization_code
      - mfa
      type: string
    LoginSpec:
      properties:
        username:
          type: string
        password:
          format: password
          type: string
        refresh_token:
          type: string
        code:
          description: required if grant_type = authorization_code
          type: string
        grant_type:
          $ref: '#/components/schemas/LoginGrantTypes'
        mfa_token:
          type: string
        mfa_code:
          type: string
      required:
      - grant_type
      type: object
    RESTLogin:
      example:
        access_token: access_token
        refresh_token: refresh_token
        roleName: roleName
        mfa_token: mfa_token
        ".expires": 2000-01-23T04:56:07.000+00:00
        mfa_enabled: true
        token_type: token_type
        expires_in: 0
        ".issued": 2000-01-23T04:56:07.000+00:00
        username: username
      properties:
        access_token:
          type: string
        token_type:
          type: string
        refresh_token:
          type: string
        expires_in:
          format: int32
          type: integer
        ".issued":
          format: date-time
          type: string
        ".expires":
          format: date-time
          type: string
        username:
          type: string
        roleName:
          type: string
        mfa_enabled:
          type: boolean
        mfa_token:
          type: string
      type: object
    AuthorizationCode:
      example:
        code: code
      properties:
        code:
          type: string
      required:
      - code
      type: object
    UploadCertificateSpec:
      properties:
        certificateFile:
          description: The .PFX certificate to upload.
          format: binary
          type: string
          x-veeam-type:
            type: formfile
        certificatePassword:
          description: .PFX certificate password
          type: string
      required:
      - certificateFile
      - certificatePassword
      type: object
    UploadLicenseSpec:
      properties:
        licenseFile:
          description: The .lic license to upload.
          format: binary
          type: string
          x-veeam-type:
            type: formfile
      required:
      - licenseFile
      type: object
    VirtualMachine_location:
      example:
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        name:
          type: string
        id:
          format: uuid
          type: string
      required:
      - id
      - name
      type: object
    Bucket_location:
      example:
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
      required:
      - id
      - name
      type: object
  securitySchemes:
    Bearer:
      description: Bearer \<JWT\>
      in: header
      name: Authorization
      type: apiKey
x-original-swagger-version: "2.0"
