/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// YearlyScheduleSettings struct for YearlyScheduleSettings
type YearlyScheduleSettings struct {
	TimeLocal        Time                   `json:"timeLocal"`
	DayNumberInMonth DayNumbersInMonth      `json:"dayNumberInMonth"`
	DayOfWeek        *DaysOfWeek            `json:"dayOfWeek,omitempty"`
	DayOfMonth       *int32                 `json:"dayOfMonth,omitempty"`
	Month            Months                 `json:"month"`
	Retention        YearlyRetentionOptions `json:"retention"`
}

// NewYearlyScheduleSettings instantiates a new YearlyScheduleSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYearlyScheduleSettings(timeLocal Time, dayNumberInMonth DayNumbersInMonth, month Months, retention YearlyRetentionOptions) *YearlyScheduleSettings {
	this := YearlyScheduleSettings{}
	this.TimeLocal = timeLocal
	this.DayNumberInMonth = dayNumberInMonth
	this.Month = month
	this.Retention = retention
	return &this
}

// NewYearlyScheduleSettingsWithDefaults instantiates a new YearlyScheduleSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYearlyScheduleSettingsWithDefaults() *YearlyScheduleSettings {
	this := YearlyScheduleSettings{}
	return &this
}

// GetTimeLocal returns the TimeLocal field value
func (o *YearlyScheduleSettings) GetTimeLocal() Time {
	if o == nil {
		var ret Time
		return ret
	}

	return o.TimeLocal
}

// GetTimeLocalOk returns a tuple with the TimeLocal field value
// and a boolean to check if the value has been set.
func (o *YearlyScheduleSettings) GetTimeLocalOk() (*Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeLocal, true
}

// SetTimeLocal sets field value
func (o *YearlyScheduleSettings) SetTimeLocal(v Time) {
	o.TimeLocal = v
}

// GetDayNumberInMonth returns the DayNumberInMonth field value
func (o *YearlyScheduleSettings) GetDayNumberInMonth() DayNumbersInMonth {
	if o == nil {
		var ret DayNumbersInMonth
		return ret
	}

	return o.DayNumberInMonth
}

// GetDayNumberInMonthOk returns a tuple with the DayNumberInMonth field value
// and a boolean to check if the value has been set.
func (o *YearlyScheduleSettings) GetDayNumberInMonthOk() (*DayNumbersInMonth, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DayNumberInMonth, true
}

// SetDayNumberInMonth sets field value
func (o *YearlyScheduleSettings) SetDayNumberInMonth(v DayNumbersInMonth) {
	o.DayNumberInMonth = v
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *YearlyScheduleSettings) GetDayOfWeek() DaysOfWeek {
	if o == nil || o.DayOfWeek == nil {
		var ret DaysOfWeek
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YearlyScheduleSettings) GetDayOfWeekOk() (*DaysOfWeek, bool) {
	if o == nil || o.DayOfWeek == nil {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *YearlyScheduleSettings) HasDayOfWeek() bool {
	if o != nil && o.DayOfWeek != nil {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given DaysOfWeek and assigns it to the DayOfWeek field.
func (o *YearlyScheduleSettings) SetDayOfWeek(v DaysOfWeek) {
	o.DayOfWeek = &v
}

// GetDayOfMonth returns the DayOfMonth field value if set, zero value otherwise.
func (o *YearlyScheduleSettings) GetDayOfMonth() int32 {
	if o == nil || o.DayOfMonth == nil {
		var ret int32
		return ret
	}
	return *o.DayOfMonth
}

// GetDayOfMonthOk returns a tuple with the DayOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YearlyScheduleSettings) GetDayOfMonthOk() (*int32, bool) {
	if o == nil || o.DayOfMonth == nil {
		return nil, false
	}
	return o.DayOfMonth, true
}

// HasDayOfMonth returns a boolean if a field has been set.
func (o *YearlyScheduleSettings) HasDayOfMonth() bool {
	if o != nil && o.DayOfMonth != nil {
		return true
	}

	return false
}

// SetDayOfMonth gets a reference to the given int32 and assigns it to the DayOfMonth field.
func (o *YearlyScheduleSettings) SetDayOfMonth(v int32) {
	o.DayOfMonth = &v
}

// GetMonth returns the Month field value
func (o *YearlyScheduleSettings) GetMonth() Months {
	if o == nil {
		var ret Months
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *YearlyScheduleSettings) GetMonthOk() (*Months, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *YearlyScheduleSettings) SetMonth(v Months) {
	o.Month = v
}

// GetRetention returns the Retention field value
func (o *YearlyScheduleSettings) GetRetention() YearlyRetentionOptions {
	if o == nil {
		var ret YearlyRetentionOptions
		return ret
	}

	return o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *YearlyScheduleSettings) GetRetentionOk() (*YearlyRetentionOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retention, true
}

// SetRetention sets field value
func (o *YearlyScheduleSettings) SetRetention(v YearlyRetentionOptions) {
	o.Retention = v
}

func (o YearlyScheduleSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timeLocal"] = o.TimeLocal
	}
	if true {
		toSerialize["dayNumberInMonth"] = o.DayNumberInMonth
	}
	if o.DayOfWeek != nil {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	if o.DayOfMonth != nil {
		toSerialize["dayOfMonth"] = o.DayOfMonth
	}
	if true {
		toSerialize["month"] = o.Month
	}
	if true {
		toSerialize["retention"] = o.Retention
	}
	return json.Marshal(toSerialize)
}

type NullableYearlyScheduleSettings struct {
	value *YearlyScheduleSettings
	isSet bool
}

func (v NullableYearlyScheduleSettings) Get() *YearlyScheduleSettings {
	return v.value
}

func (v *NullableYearlyScheduleSettings) Set(val *YearlyScheduleSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableYearlyScheduleSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableYearlyScheduleSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYearlyScheduleSettings(val *YearlyScheduleSettings) *NullableYearlyScheduleSettings {
	return &NullableYearlyScheduleSettings{value: val, isSet: true}
}

func (v NullableYearlyScheduleSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYearlyScheduleSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
