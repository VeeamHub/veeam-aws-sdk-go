/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"os"
)

// UploadLicenseSpec struct for UploadLicenseSpec
type UploadLicenseSpec struct {
	// The .lic license to upload.
	LicenseFile *os.File `json:"licenseFile"`
}

// NewUploadLicenseSpec instantiates a new UploadLicenseSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadLicenseSpec(licenseFile *os.File) *UploadLicenseSpec {
	this := UploadLicenseSpec{}
	this.LicenseFile = licenseFile
	return &this
}

// NewUploadLicenseSpecWithDefaults instantiates a new UploadLicenseSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadLicenseSpecWithDefaults() *UploadLicenseSpec {
	this := UploadLicenseSpec{}
	return &this
}

// GetLicenseFile returns the LicenseFile field value
func (o *UploadLicenseSpec) GetLicenseFile() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.LicenseFile
}

// GetLicenseFileOk returns a tuple with the LicenseFile field value
// and a boolean to check if the value has been set.
func (o *UploadLicenseSpec) GetLicenseFileOk() (**os.File, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LicenseFile, true
}

// SetLicenseFile sets field value
func (o *UploadLicenseSpec) SetLicenseFile(v *os.File) {
	o.LicenseFile = v
}

func (o UploadLicenseSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["licenseFile"] = o.LicenseFile
	}
	return json.Marshal(toSerialize)
}

type NullableUploadLicenseSpec struct {
	value *UploadLicenseSpec
	isSet bool
}

func (v NullableUploadLicenseSpec) Get() *UploadLicenseSpec {
	return v.value
}

func (v *NullableUploadLicenseSpec) Set(val *UploadLicenseSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadLicenseSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadLicenseSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadLicenseSpec(val *UploadLicenseSpec) *NullableUploadLicenseSpec {
	return &NullableUploadLicenseSpec{value: val, isSet: true}
}

func (v NullableUploadLicenseSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadLicenseSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


