/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// LicenseAgreement struct for LicenseAgreement
type LicenseAgreement struct {
	Checksum *string `json:"checksum,omitempty"`
	Content *string `json:"content,omitempty"`
	Type LicenseAgreementTypes `json:"type"`
}

// NewLicenseAgreement instantiates a new LicenseAgreement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseAgreement(type_ LicenseAgreementTypes) *LicenseAgreement {
	this := LicenseAgreement{}
	this.Type = type_
	return &this
}

// NewLicenseAgreementWithDefaults instantiates a new LicenseAgreement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseAgreementWithDefaults() *LicenseAgreement {
	this := LicenseAgreement{}
	return &this
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *LicenseAgreement) GetChecksum() string {
	if o == nil || o.Checksum == nil {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAgreement) GetChecksumOk() (*string, bool) {
	if o == nil || o.Checksum == nil {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *LicenseAgreement) HasChecksum() bool {
	if o != nil && o.Checksum != nil {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *LicenseAgreement) SetChecksum(v string) {
	o.Checksum = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *LicenseAgreement) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAgreement) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *LicenseAgreement) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *LicenseAgreement) SetContent(v string) {
	o.Content = &v
}

// GetType returns the Type field value
func (o *LicenseAgreement) GetType() LicenseAgreementTypes {
	if o == nil {
		var ret LicenseAgreementTypes
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LicenseAgreement) GetTypeOk() (*LicenseAgreementTypes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LicenseAgreement) SetType(v LicenseAgreementTypes) {
	o.Type = v
}

func (o LicenseAgreement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Checksum != nil {
		toSerialize["checksum"] = o.Checksum
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseAgreement struct {
	value *LicenseAgreement
	isSet bool
}

func (v NullableLicenseAgreement) Get() *LicenseAgreement {
	return v.value
}

func (v *NullableLicenseAgreement) Set(val *LicenseAgreement) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseAgreement) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseAgreement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseAgreement(val *LicenseAgreement) *NullableLicenseAgreement {
	return &NullableLicenseAgreement{value: val, isSet: true}
}

func (v NullableLicenseAgreement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseAgreement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


