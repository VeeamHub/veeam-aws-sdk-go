/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UserMfaData struct for UserMfaData
type UserMfaData struct {
	UserName *string `json:"userName,omitempty"`
	QrString *string `json:"qrString,omitempty"`
	SecretKey *string `json:"secretKey,omitempty"`
	ScratchCodes *[]string `json:"scratchCodes,omitempty"`
	Token *string `json:"token,omitempty"`
}

// NewUserMfaData instantiates a new UserMfaData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserMfaData() *UserMfaData {
	this := UserMfaData{}
	return &this
}

// NewUserMfaDataWithDefaults instantiates a new UserMfaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserMfaDataWithDefaults() *UserMfaData {
	this := UserMfaData{}
	return &this
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *UserMfaData) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMfaData) GetUserNameOk() (*string, bool) {
	if o == nil || o.UserName == nil {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *UserMfaData) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *UserMfaData) SetUserName(v string) {
	o.UserName = &v
}

// GetQrString returns the QrString field value if set, zero value otherwise.
func (o *UserMfaData) GetQrString() string {
	if o == nil || o.QrString == nil {
		var ret string
		return ret
	}
	return *o.QrString
}

// GetQrStringOk returns a tuple with the QrString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMfaData) GetQrStringOk() (*string, bool) {
	if o == nil || o.QrString == nil {
		return nil, false
	}
	return o.QrString, true
}

// HasQrString returns a boolean if a field has been set.
func (o *UserMfaData) HasQrString() bool {
	if o != nil && o.QrString != nil {
		return true
	}

	return false
}

// SetQrString gets a reference to the given string and assigns it to the QrString field.
func (o *UserMfaData) SetQrString(v string) {
	o.QrString = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *UserMfaData) GetSecretKey() string {
	if o == nil || o.SecretKey == nil {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMfaData) GetSecretKeyOk() (*string, bool) {
	if o == nil || o.SecretKey == nil {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *UserMfaData) HasSecretKey() bool {
	if o != nil && o.SecretKey != nil {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *UserMfaData) SetSecretKey(v string) {
	o.SecretKey = &v
}

// GetScratchCodes returns the ScratchCodes field value if set, zero value otherwise.
func (o *UserMfaData) GetScratchCodes() []string {
	if o == nil || o.ScratchCodes == nil {
		var ret []string
		return ret
	}
	return *o.ScratchCodes
}

// GetScratchCodesOk returns a tuple with the ScratchCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMfaData) GetScratchCodesOk() (*[]string, bool) {
	if o == nil || o.ScratchCodes == nil {
		return nil, false
	}
	return o.ScratchCodes, true
}

// HasScratchCodes returns a boolean if a field has been set.
func (o *UserMfaData) HasScratchCodes() bool {
	if o != nil && o.ScratchCodes != nil {
		return true
	}

	return false
}

// SetScratchCodes gets a reference to the given []string and assigns it to the ScratchCodes field.
func (o *UserMfaData) SetScratchCodes(v []string) {
	o.ScratchCodes = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *UserMfaData) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMfaData) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *UserMfaData) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *UserMfaData) SetToken(v string) {
	o.Token = &v
}

func (o UserMfaData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserName != nil {
		toSerialize["userName"] = o.UserName
	}
	if o.QrString != nil {
		toSerialize["qrString"] = o.QrString
	}
	if o.SecretKey != nil {
		toSerialize["secretKey"] = o.SecretKey
	}
	if o.ScratchCodes != nil {
		toSerialize["scratchCodes"] = o.ScratchCodes
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableUserMfaData struct {
	value *UserMfaData
	isSet bool
}

func (v NullableUserMfaData) Get() *UserMfaData {
	return v.value
}

func (v *NullableUserMfaData) Set(val *UserMfaData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserMfaData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserMfaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserMfaData(val *UserMfaData) *NullableUserMfaData {
	return &NullableUserMfaData{value: val, isSet: true}
}

func (v NullableUserMfaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserMfaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


