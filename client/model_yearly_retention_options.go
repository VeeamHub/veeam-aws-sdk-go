/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// YearlyRetentionOptions struct for YearlyRetentionOptions
type YearlyRetentionOptions struct {
	Count int32 `json:"count"`
	Type string `json:"type"`
}

// NewYearlyRetentionOptions instantiates a new YearlyRetentionOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYearlyRetentionOptions(count int32, type_ string) *YearlyRetentionOptions {
	this := YearlyRetentionOptions{}
	this.Count = count
	this.Type = type_
	return &this
}

// NewYearlyRetentionOptionsWithDefaults instantiates a new YearlyRetentionOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYearlyRetentionOptionsWithDefaults() *YearlyRetentionOptions {
	this := YearlyRetentionOptions{}
	return &this
}

// GetCount returns the Count field value
func (o *YearlyRetentionOptions) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *YearlyRetentionOptions) GetCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *YearlyRetentionOptions) SetCount(v int32) {
	o.Count = v
}

// GetType returns the Type field value
func (o *YearlyRetentionOptions) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *YearlyRetentionOptions) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *YearlyRetentionOptions) SetType(v string) {
	o.Type = v
}

func (o YearlyRetentionOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableYearlyRetentionOptions struct {
	value *YearlyRetentionOptions
	isSet bool
}

func (v NullableYearlyRetentionOptions) Get() *YearlyRetentionOptions {
	return v.value
}

func (v *NullableYearlyRetentionOptions) Set(val *YearlyRetentionOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableYearlyRetentionOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableYearlyRetentionOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYearlyRetentionOptions(val *YearlyRetentionOptions) *NullableYearlyRetentionOptions {
	return &NullableYearlyRetentionOptions{value: val, isSet: true}
}

func (v NullableYearlyRetentionOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYearlyRetentionOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


