/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// VmBackupVolume struct for VmBackupVolume
type VmBackupVolume struct {
	DiskId string `json:"diskId"`
	Type Ec2DiskTypes `json:"type"`
	BackupSizeBytes int64 `json:"backupSizeBytes"`
	Iops *int32 `json:"iops,omitempty"`
	Name *string `json:"name,omitempty"`
	Device *string `json:"device,omitempty"`
	EncryptionKey *string `json:"encryptionKey,omitempty"`
	EncryptionKeyName *string `json:"encryptionKeyName,omitempty"`
}

// NewVmBackupVolume instantiates a new VmBackupVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmBackupVolume(diskId string, type_ Ec2DiskTypes, backupSizeBytes int64) *VmBackupVolume {
	this := VmBackupVolume{}
	this.DiskId = diskId
	this.Type = type_
	this.BackupSizeBytes = backupSizeBytes
	return &this
}

// NewVmBackupVolumeWithDefaults instantiates a new VmBackupVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmBackupVolumeWithDefaults() *VmBackupVolume {
	this := VmBackupVolume{}
	return &this
}

// GetDiskId returns the DiskId field value
func (o *VmBackupVolume) GetDiskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiskId
}

// GetDiskIdOk returns a tuple with the DiskId field value
// and a boolean to check if the value has been set.
func (o *VmBackupVolume) GetDiskIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DiskId, true
}

// SetDiskId sets field value
func (o *VmBackupVolume) SetDiskId(v string) {
	o.DiskId = v
}

// GetType returns the Type field value
func (o *VmBackupVolume) GetType() Ec2DiskTypes {
	if o == nil {
		var ret Ec2DiskTypes
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VmBackupVolume) GetTypeOk() (*Ec2DiskTypes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VmBackupVolume) SetType(v Ec2DiskTypes) {
	o.Type = v
}

// GetBackupSizeBytes returns the BackupSizeBytes field value
func (o *VmBackupVolume) GetBackupSizeBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BackupSizeBytes
}

// GetBackupSizeBytesOk returns a tuple with the BackupSizeBytes field value
// and a boolean to check if the value has been set.
func (o *VmBackupVolume) GetBackupSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BackupSizeBytes, true
}

// SetBackupSizeBytes sets field value
func (o *VmBackupVolume) SetBackupSizeBytes(v int64) {
	o.BackupSizeBytes = v
}

// GetIops returns the Iops field value if set, zero value otherwise.
func (o *VmBackupVolume) GetIops() int32 {
	if o == nil || o.Iops == nil {
		var ret int32
		return ret
	}
	return *o.Iops
}

// GetIopsOk returns a tuple with the Iops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmBackupVolume) GetIopsOk() (*int32, bool) {
	if o == nil || o.Iops == nil {
		return nil, false
	}
	return o.Iops, true
}

// HasIops returns a boolean if a field has been set.
func (o *VmBackupVolume) HasIops() bool {
	if o != nil && o.Iops != nil {
		return true
	}

	return false
}

// SetIops gets a reference to the given int32 and assigns it to the Iops field.
func (o *VmBackupVolume) SetIops(v int32) {
	o.Iops = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VmBackupVolume) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmBackupVolume) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VmBackupVolume) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VmBackupVolume) SetName(v string) {
	o.Name = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *VmBackupVolume) GetDevice() string {
	if o == nil || o.Device == nil {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmBackupVolume) GetDeviceOk() (*string, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *VmBackupVolume) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *VmBackupVolume) SetDevice(v string) {
	o.Device = &v
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *VmBackupVolume) GetEncryptionKey() string {
	if o == nil || o.EncryptionKey == nil {
		var ret string
		return ret
	}
	return *o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmBackupVolume) GetEncryptionKeyOk() (*string, bool) {
	if o == nil || o.EncryptionKey == nil {
		return nil, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *VmBackupVolume) HasEncryptionKey() bool {
	if o != nil && o.EncryptionKey != nil {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given string and assigns it to the EncryptionKey field.
func (o *VmBackupVolume) SetEncryptionKey(v string) {
	o.EncryptionKey = &v
}

// GetEncryptionKeyName returns the EncryptionKeyName field value if set, zero value otherwise.
func (o *VmBackupVolume) GetEncryptionKeyName() string {
	if o == nil || o.EncryptionKeyName == nil {
		var ret string
		return ret
	}
	return *o.EncryptionKeyName
}

// GetEncryptionKeyNameOk returns a tuple with the EncryptionKeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmBackupVolume) GetEncryptionKeyNameOk() (*string, bool) {
	if o == nil || o.EncryptionKeyName == nil {
		return nil, false
	}
	return o.EncryptionKeyName, true
}

// HasEncryptionKeyName returns a boolean if a field has been set.
func (o *VmBackupVolume) HasEncryptionKeyName() bool {
	if o != nil && o.EncryptionKeyName != nil {
		return true
	}

	return false
}

// SetEncryptionKeyName gets a reference to the given string and assigns it to the EncryptionKeyName field.
func (o *VmBackupVolume) SetEncryptionKeyName(v string) {
	o.EncryptionKeyName = &v
}

func (o VmBackupVolume) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["diskId"] = o.DiskId
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["backupSizeBytes"] = o.BackupSizeBytes
	}
	if o.Iops != nil {
		toSerialize["iops"] = o.Iops
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if o.EncryptionKey != nil {
		toSerialize["encryptionKey"] = o.EncryptionKey
	}
	if o.EncryptionKeyName != nil {
		toSerialize["encryptionKeyName"] = o.EncryptionKeyName
	}
	return json.Marshal(toSerialize)
}

type NullableVmBackupVolume struct {
	value *VmBackupVolume
	isSet bool
}

func (v NullableVmBackupVolume) Get() *VmBackupVolume {
	return v.value
}

func (v *NullableVmBackupVolume) Set(val *VmBackupVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableVmBackupVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableVmBackupVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmBackupVolume(val *VmBackupVolume) *NullableVmBackupVolume {
	return &NullableVmBackupVolume{value: val, isSet: true}
}

func (v NullableVmBackupVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmBackupVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


