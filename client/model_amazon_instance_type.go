/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AmazonInstanceType struct for AmazonInstanceType
type AmazonInstanceType struct {
	Name string `json:"name"`
	CpuCount int32 `json:"cpuCount"`
	Ram int32 `json:"ram"`
	IsArm64 *bool `json:"isArm64,omitempty"`
	VirtualizationType *[]string `json:"virtualizationType,omitempty"`
}

// NewAmazonInstanceType instantiates a new AmazonInstanceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonInstanceType(name string, cpuCount int32, ram int32) *AmazonInstanceType {
	this := AmazonInstanceType{}
	this.Name = name
	this.CpuCount = cpuCount
	this.Ram = ram
	return &this
}

// NewAmazonInstanceTypeWithDefaults instantiates a new AmazonInstanceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonInstanceTypeWithDefaults() *AmazonInstanceType {
	this := AmazonInstanceType{}
	return &this
}

// GetName returns the Name field value
func (o *AmazonInstanceType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AmazonInstanceType) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AmazonInstanceType) SetName(v string) {
	o.Name = v
}

// GetCpuCount returns the CpuCount field value
func (o *AmazonInstanceType) GetCpuCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CpuCount
}

// GetCpuCountOk returns a tuple with the CpuCount field value
// and a boolean to check if the value has been set.
func (o *AmazonInstanceType) GetCpuCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CpuCount, true
}

// SetCpuCount sets field value
func (o *AmazonInstanceType) SetCpuCount(v int32) {
	o.CpuCount = v
}

// GetRam returns the Ram field value
func (o *AmazonInstanceType) GetRam() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ram
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
func (o *AmazonInstanceType) GetRamOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ram, true
}

// SetRam sets field value
func (o *AmazonInstanceType) SetRam(v int32) {
	o.Ram = v
}

// GetIsArm64 returns the IsArm64 field value if set, zero value otherwise.
func (o *AmazonInstanceType) GetIsArm64() bool {
	if o == nil || o.IsArm64 == nil {
		var ret bool
		return ret
	}
	return *o.IsArm64
}

// GetIsArm64Ok returns a tuple with the IsArm64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonInstanceType) GetIsArm64Ok() (*bool, bool) {
	if o == nil || o.IsArm64 == nil {
		return nil, false
	}
	return o.IsArm64, true
}

// HasIsArm64 returns a boolean if a field has been set.
func (o *AmazonInstanceType) HasIsArm64() bool {
	if o != nil && o.IsArm64 != nil {
		return true
	}

	return false
}

// SetIsArm64 gets a reference to the given bool and assigns it to the IsArm64 field.
func (o *AmazonInstanceType) SetIsArm64(v bool) {
	o.IsArm64 = &v
}

// GetVirtualizationType returns the VirtualizationType field value if set, zero value otherwise.
func (o *AmazonInstanceType) GetVirtualizationType() []string {
	if o == nil || o.VirtualizationType == nil {
		var ret []string
		return ret
	}
	return *o.VirtualizationType
}

// GetVirtualizationTypeOk returns a tuple with the VirtualizationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonInstanceType) GetVirtualizationTypeOk() (*[]string, bool) {
	if o == nil || o.VirtualizationType == nil {
		return nil, false
	}
	return o.VirtualizationType, true
}

// HasVirtualizationType returns a boolean if a field has been set.
func (o *AmazonInstanceType) HasVirtualizationType() bool {
	if o != nil && o.VirtualizationType != nil {
		return true
	}

	return false
}

// SetVirtualizationType gets a reference to the given []string and assigns it to the VirtualizationType field.
func (o *AmazonInstanceType) SetVirtualizationType(v []string) {
	o.VirtualizationType = &v
}

func (o AmazonInstanceType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["cpuCount"] = o.CpuCount
	}
	if true {
		toSerialize["ram"] = o.Ram
	}
	if o.IsArm64 != nil {
		toSerialize["isArm64"] = o.IsArm64
	}
	if o.VirtualizationType != nil {
		toSerialize["virtualizationType"] = o.VirtualizationType
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonInstanceType struct {
	value *AmazonInstanceType
	isSet bool
}

func (v NullableAmazonInstanceType) Get() *AmazonInstanceType {
	return v.value
}

func (v *NullableAmazonInstanceType) Set(val *AmazonInstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonInstanceType(val *AmazonInstanceType) *NullableAmazonInstanceType {
	return &NullableAmazonInstanceType{value: val, isSet: true}
}

func (v NullableAmazonInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


