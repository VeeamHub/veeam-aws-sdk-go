/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SessionItemsStatuses the model 'SessionItemsStatuses'
type SessionItemsStatuses string

// List of SessionItemsStatuses
const (
	SESSIONITEMSSTATUSES_SUCCEEDED SessionItemsStatuses = "Succeeded"
	SESSIONITEMSSTATUSES_WARNING SessionItemsStatuses = "Warning"
	SESSIONITEMSSTATUSES_FAILED SessionItemsStatuses = "Failed"
)

func (v *SessionItemsStatuses) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SessionItemsStatuses(value)
	for _, existing := range []SessionItemsStatuses{ "Succeeded", "Warning", "Failed",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SessionItemsStatuses", value)
}

// Ptr returns reference to SessionItemsStatuses value
func (v SessionItemsStatuses) Ptr() *SessionItemsStatuses {
	return &v
}

type NullableSessionItemsStatuses struct {
	value *SessionItemsStatuses
	isSet bool
}

func (v NullableSessionItemsStatuses) Get() *SessionItemsStatuses {
	return v.value
}

func (v *NullableSessionItemsStatuses) Set(val *SessionItemsStatuses) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionItemsStatuses) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionItemsStatuses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionItemsStatuses(val *SessionItemsStatuses) *NullableSessionItemsStatuses {
	return &NullableSessionItemsStatuses{value: val, isSet: true}
}

func (v NullableSessionItemsStatuses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionItemsStatuses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

