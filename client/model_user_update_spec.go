/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UserUpdateSpec struct for UserUpdateSpec
type UserUpdateSpec struct {
	Description *string `json:"description,omitempty"`
	Password *string `json:"password,omitempty"`
	OldPassword *string `json:"oldPassword,omitempty"`
}

// NewUserUpdateSpec instantiates a new UserUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdateSpec() *UserUpdateSpec {
	this := UserUpdateSpec{}
	return &this
}

// NewUserUpdateSpecWithDefaults instantiates a new UserUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdateSpecWithDefaults() *UserUpdateSpec {
	this := UserUpdateSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UserUpdateSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UserUpdateSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UserUpdateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserUpdateSpec) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateSpec) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserUpdateSpec) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserUpdateSpec) SetPassword(v string) {
	o.Password = &v
}

// GetOldPassword returns the OldPassword field value if set, zero value otherwise.
func (o *UserUpdateSpec) GetOldPassword() string {
	if o == nil || o.OldPassword == nil {
		var ret string
		return ret
	}
	return *o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateSpec) GetOldPasswordOk() (*string, bool) {
	if o == nil || o.OldPassword == nil {
		return nil, false
	}
	return o.OldPassword, true
}

// HasOldPassword returns a boolean if a field has been set.
func (o *UserUpdateSpec) HasOldPassword() bool {
	if o != nil && o.OldPassword != nil {
		return true
	}

	return false
}

// SetOldPassword gets a reference to the given string and assigns it to the OldPassword field.
func (o *UserUpdateSpec) SetOldPassword(v string) {
	o.OldPassword = &v
}

func (o UserUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.OldPassword != nil {
		toSerialize["oldPassword"] = o.OldPassword
	}
	return json.Marshal(toSerialize)
}

type NullableUserUpdateSpec struct {
	value *UserUpdateSpec
	isSet bool
}

func (v NullableUserUpdateSpec) Get() *UserUpdateSpec {
	return v.value
}

func (v *NullableUserUpdateSpec) Set(val *UserUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdateSpec(val *UserUpdateSpec) *NullableUserUpdateSpec {
	return &NullableUserUpdateSpec{value: val, isSet: true}
}

func (v NullableUserUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


