/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// LicenseNotificationTypes the model 'LicenseNotificationTypes'
type LicenseNotificationTypes string

// List of LicenseNotificationTypes
const (
	LICENSENOTIFICATIONTYPES_EXPIRATION LicenseNotificationTypes = "Expiration"
	LICENSENOTIFICATIONTYPES_EXCEED LicenseNotificationTypes = "Exceed"
	LICENSENOTIFICATIONTYPES_MARKETPLACE LicenseNotificationTypes = "Marketplace"
)

func (v *LicenseNotificationTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LicenseNotificationTypes(value)
	for _, existing := range []LicenseNotificationTypes{ "Expiration", "Exceed", "Marketplace",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LicenseNotificationTypes", value)
}

// Ptr returns reference to LicenseNotificationTypes value
func (v LicenseNotificationTypes) Ptr() *LicenseNotificationTypes {
	return &v
}

type NullableLicenseNotificationTypes struct {
	value *LicenseNotificationTypes
	isSet bool
}

func (v NullableLicenseNotificationTypes) Get() *LicenseNotificationTypes {
	return v.value
}

func (v *NullableLicenseNotificationTypes) Set(val *LicenseNotificationTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseNotificationTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseNotificationTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseNotificationTypes(val *LicenseNotificationTypes) *NullableLicenseNotificationTypes {
	return &NullableLicenseNotificationTypes{value: val, isSet: true}
}

func (v NullableLicenseNotificationTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseNotificationTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

