/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// LicenseNotification struct for LicenseNotification
type LicenseNotification struct {
	NotificationType LicenseNotificationTypes `json:"notificationType"`
	NotificationSeverity LicenseNotificationSeverities `json:"notificationSeverity"`
	Message string `json:"message"`
	Replies *[]LicenseNotificationReply `json:"replies,omitempty"`
}

// NewLicenseNotification instantiates a new LicenseNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseNotification(notificationType LicenseNotificationTypes, notificationSeverity LicenseNotificationSeverities, message string) *LicenseNotification {
	this := LicenseNotification{}
	this.NotificationType = notificationType
	this.NotificationSeverity = notificationSeverity
	this.Message = message
	return &this
}

// NewLicenseNotificationWithDefaults instantiates a new LicenseNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseNotificationWithDefaults() *LicenseNotification {
	this := LicenseNotification{}
	return &this
}

// GetNotificationType returns the NotificationType field value
func (o *LicenseNotification) GetNotificationType() LicenseNotificationTypes {
	if o == nil {
		var ret LicenseNotificationTypes
		return ret
	}

	return o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value
// and a boolean to check if the value has been set.
func (o *LicenseNotification) GetNotificationTypeOk() (*LicenseNotificationTypes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NotificationType, true
}

// SetNotificationType sets field value
func (o *LicenseNotification) SetNotificationType(v LicenseNotificationTypes) {
	o.NotificationType = v
}

// GetNotificationSeverity returns the NotificationSeverity field value
func (o *LicenseNotification) GetNotificationSeverity() LicenseNotificationSeverities {
	if o == nil {
		var ret LicenseNotificationSeverities
		return ret
	}

	return o.NotificationSeverity
}

// GetNotificationSeverityOk returns a tuple with the NotificationSeverity field value
// and a boolean to check if the value has been set.
func (o *LicenseNotification) GetNotificationSeverityOk() (*LicenseNotificationSeverities, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NotificationSeverity, true
}

// SetNotificationSeverity sets field value
func (o *LicenseNotification) SetNotificationSeverity(v LicenseNotificationSeverities) {
	o.NotificationSeverity = v
}

// GetMessage returns the Message field value
func (o *LicenseNotification) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *LicenseNotification) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *LicenseNotification) SetMessage(v string) {
	o.Message = v
}

// GetReplies returns the Replies field value if set, zero value otherwise.
func (o *LicenseNotification) GetReplies() []LicenseNotificationReply {
	if o == nil || o.Replies == nil {
		var ret []LicenseNotificationReply
		return ret
	}
	return *o.Replies
}

// GetRepliesOk returns a tuple with the Replies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseNotification) GetRepliesOk() (*[]LicenseNotificationReply, bool) {
	if o == nil || o.Replies == nil {
		return nil, false
	}
	return o.Replies, true
}

// HasReplies returns a boolean if a field has been set.
func (o *LicenseNotification) HasReplies() bool {
	if o != nil && o.Replies != nil {
		return true
	}

	return false
}

// SetReplies gets a reference to the given []LicenseNotificationReply and assigns it to the Replies field.
func (o *LicenseNotification) SetReplies(v []LicenseNotificationReply) {
	o.Replies = &v
}

func (o LicenseNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["notificationType"] = o.NotificationType
	}
	if true {
		toSerialize["notificationSeverity"] = o.NotificationSeverity
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.Replies != nil {
		toSerialize["replies"] = o.Replies
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseNotification struct {
	value *LicenseNotification
	isSet bool
}

func (v NullableLicenseNotification) Get() *LicenseNotification {
	return v.value
}

func (v *NullableLicenseNotification) Set(val *LicenseNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseNotification(val *LicenseNotification) *NullableLicenseNotification {
	return &NullableLicenseNotification{value: val, isSet: true}
}

func (v NullableLicenseNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


