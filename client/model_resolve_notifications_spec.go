/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ResolveNotificationsSpec struct for ResolveNotificationsSpec
type ResolveNotificationsSpec struct {
	NotificationsToResolve []LicenseNotificationTypes `json:"notificationsToResolve"`
	SelectedReplies *[]LicenseNotificationReply `json:"selectedReplies,omitempty"`
}

// NewResolveNotificationsSpec instantiates a new ResolveNotificationsSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolveNotificationsSpec(notificationsToResolve []LicenseNotificationTypes) *ResolveNotificationsSpec {
	this := ResolveNotificationsSpec{}
	this.NotificationsToResolve = notificationsToResolve
	return &this
}

// NewResolveNotificationsSpecWithDefaults instantiates a new ResolveNotificationsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolveNotificationsSpecWithDefaults() *ResolveNotificationsSpec {
	this := ResolveNotificationsSpec{}
	return &this
}

// GetNotificationsToResolve returns the NotificationsToResolve field value
func (o *ResolveNotificationsSpec) GetNotificationsToResolve() []LicenseNotificationTypes {
	if o == nil {
		var ret []LicenseNotificationTypes
		return ret
	}

	return o.NotificationsToResolve
}

// GetNotificationsToResolveOk returns a tuple with the NotificationsToResolve field value
// and a boolean to check if the value has been set.
func (o *ResolveNotificationsSpec) GetNotificationsToResolveOk() (*[]LicenseNotificationTypes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NotificationsToResolve, true
}

// SetNotificationsToResolve sets field value
func (o *ResolveNotificationsSpec) SetNotificationsToResolve(v []LicenseNotificationTypes) {
	o.NotificationsToResolve = v
}

// GetSelectedReplies returns the SelectedReplies field value if set, zero value otherwise.
func (o *ResolveNotificationsSpec) GetSelectedReplies() []LicenseNotificationReply {
	if o == nil || o.SelectedReplies == nil {
		var ret []LicenseNotificationReply
		return ret
	}
	return *o.SelectedReplies
}

// GetSelectedRepliesOk returns a tuple with the SelectedReplies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolveNotificationsSpec) GetSelectedRepliesOk() (*[]LicenseNotificationReply, bool) {
	if o == nil || o.SelectedReplies == nil {
		return nil, false
	}
	return o.SelectedReplies, true
}

// HasSelectedReplies returns a boolean if a field has been set.
func (o *ResolveNotificationsSpec) HasSelectedReplies() bool {
	if o != nil && o.SelectedReplies != nil {
		return true
	}

	return false
}

// SetSelectedReplies gets a reference to the given []LicenseNotificationReply and assigns it to the SelectedReplies field.
func (o *ResolveNotificationsSpec) SetSelectedReplies(v []LicenseNotificationReply) {
	o.SelectedReplies = &v
}

func (o ResolveNotificationsSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["notificationsToResolve"] = o.NotificationsToResolve
	}
	if o.SelectedReplies != nil {
		toSerialize["selectedReplies"] = o.SelectedReplies
	}
	return json.Marshal(toSerialize)
}

type NullableResolveNotificationsSpec struct {
	value *ResolveNotificationsSpec
	isSet bool
}

func (v NullableResolveNotificationsSpec) Get() *ResolveNotificationsSpec {
	return v.value
}

func (v *NullableResolveNotificationsSpec) Set(val *ResolveNotificationsSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableResolveNotificationsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableResolveNotificationsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolveNotificationsSpec(val *ResolveNotificationsSpec) *NullableResolveNotificationsSpec {
	return &NullableResolveNotificationsSpec{value: val, isSet: true}
}

func (v NullableResolveNotificationsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolveNotificationsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


