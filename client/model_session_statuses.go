/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SessionStatuses the model 'SessionStatuses'
type SessionStatuses string

// List of SessionStatuses
const (
	SESSIONSTATUSES_RUNNING SessionStatuses = "Running"
	SESSIONSTATUSES_NEVER_EXECUTED SessionStatuses = "NeverExecuted"
	SESSIONSTATUSES_SUCCEEDED SessionStatuses = "Succeeded"
	SESSIONSTATUSES_WARNING SessionStatuses = "Warning"
	SESSIONSTATUSES_FAILED SessionStatuses = "Failed"
	SESSIONSTATUSES_CANCELED SessionStatuses = "Canceled"
)

func (v *SessionStatuses) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SessionStatuses(value)
	for _, existing := range []SessionStatuses{ "Running", "NeverExecuted", "Succeeded", "Warning", "Failed", "Canceled",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SessionStatuses", value)
}

// Ptr returns reference to SessionStatuses value
func (v SessionStatuses) Ptr() *SessionStatuses {
	return &v
}

type NullableSessionStatuses struct {
	value *SessionStatuses
	isSet bool
}

func (v NullableSessionStatuses) Get() *SessionStatuses {
	return v.value
}

func (v *NullableSessionStatuses) Set(val *SessionStatuses) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionStatuses) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionStatuses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionStatuses(val *SessionStatuses) *NullableSessionStatuses {
	return &NullableSessionStatuses{value: val, isSet: true}
}

func (v NullableSessionStatuses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionStatuses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

