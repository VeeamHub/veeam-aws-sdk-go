/*
 * Veeam Backup for AWS public API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0-rev0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// StartFlrResponse struct for StartFlrResponse
type StartFlrResponse struct {
	SessionId string `json:"sessionId"`
	Url string `json:"url"`
	Links *[]Link `json:"_links,omitempty"`
}

// NewStartFlrResponse instantiates a new StartFlrResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartFlrResponse(sessionId string, url string) *StartFlrResponse {
	this := StartFlrResponse{}
	this.SessionId = sessionId
	this.Url = url
	return &this
}

// NewStartFlrResponseWithDefaults instantiates a new StartFlrResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartFlrResponseWithDefaults() *StartFlrResponse {
	this := StartFlrResponse{}
	return &this
}

// GetSessionId returns the SessionId field value
func (o *StartFlrResponse) GetSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *StartFlrResponse) GetSessionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *StartFlrResponse) SetSessionId(v string) {
	o.SessionId = v
}

// GetUrl returns the Url field value
func (o *StartFlrResponse) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *StartFlrResponse) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *StartFlrResponse) SetUrl(v string) {
	o.Url = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *StartFlrResponse) GetLinks() []Link {
	if o == nil || o.Links == nil {
		var ret []Link
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartFlrResponse) GetLinksOk() (*[]Link, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *StartFlrResponse) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *StartFlrResponse) SetLinks(v []Link) {
	o.Links = &v
}

func (o StartFlrResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sessionId"] = o.SessionId
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableStartFlrResponse struct {
	value *StartFlrResponse
	isSet bool
}

func (v NullableStartFlrResponse) Get() *StartFlrResponse {
	return v.value
}

func (v *NullableStartFlrResponse) Set(val *StartFlrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStartFlrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStartFlrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartFlrResponse(val *StartFlrResponse) *NullableStartFlrResponse {
	return &NullableStartFlrResponse{value: val, isSet: true}
}

func (v NullableStartFlrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartFlrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


